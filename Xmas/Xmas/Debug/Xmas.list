
Xmas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002790  08002790  00003790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002884  08002884  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002884  08002884  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002884  08002884  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002884  08002884  00003884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002888  08002888  00003888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800288c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002898  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002898  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082e9  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001577  00000000  00000000  0000c31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0000d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000761  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012223  00000000  00000000  0000e979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a78b  00000000  00000000  00020b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007501c  00000000  00000000  0002b327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002234  00000000  00000000  000a0388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a25bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002778 	.word	0x08002778

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002778 	.word	0x08002778

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b09d      	sub	sp, #116	@ 0x74
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb70 	bl	800090a <HAL_Init>

  /* USER CODE BEGIN Init */
 // uint32_t melody_tone[] = {800, 956, 758};
 // uint32_t melody_dur[] = {1000, 1300, 1600};
  HAL_TIM_PWM_DeInit(&htim1);
 800022a:	4b18      	ldr	r3, [pc, #96]	@ (800028c <main+0x6c>)
 800022c:	0018      	movs	r0, r3
 800022e:	f001 fa05 	bl	800163c <HAL_TIM_PWM_DeInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f833 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f9bd 	bl	80005b4 <MX_GPIO_Init>
  MX_TIM3_Init();
 800023a:	f000 f93d 	bl	80004b8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800023e:	f000 f871 	bl	8000324 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //melody1 is notes of jingle_bells melody  {E4, E4, E4, E4, E4, E4, E4, G4, C4 , D4 , E4, F4, F4, F4, F4, F4, E4, E4, E4, D4, D4, E4, D4, G4}
  uint16_t melody1[] = {329, 329, 329, 329, 329, 329, 329, 392, 261, 293, 329, 349, 349, 349, 349, 349, 329, 329, 329, 293, 293, 329, 293, 392};
 8000242:	2334      	movs	r3, #52	@ 0x34
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	4a12      	ldr	r2, [pc, #72]	@ (8000290 <main+0x70>)
 8000248:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024a:	c313      	stmia	r3!, {r0, r1, r4}
 800024c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024e:	c313      	stmia	r3!, {r0, r1, r4}
 8000250:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000252:	c313      	stmia	r3!, {r0, r1, r4}
 8000254:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000256:	c313      	stmia	r3!, {r0, r1, r4}

  //duration of melodies
  uint16_t duration_melody[] = {250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4a0e      	ldr	r2, [pc, #56]	@ (8000294 <main+0x74>)
 800025c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800025e:	c313      	stmia	r3!, {r0, r1, r4}
 8000260:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000262:	c313      	stmia	r3!, {r0, r1, r4}
 8000264:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000266:	c313      	stmia	r3!, {r0, r1, r4}
 8000268:	ca13      	ldmia	r2!, {r0, r1, r4}
 800026a:	c313      	stmia	r3!, {r0, r1, r4}

  uint16_t brmelody = sizeof(melody1)/sizeof(uint16_t);
 800026c:	2366      	movs	r3, #102	@ 0x66
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	2218      	movs	r2, #24
 8000272:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	  begin(&htim3, TIM_CHANNEL_1, 1, 1, 1, 5);
 8000274:	4808      	ldr	r0, [pc, #32]	@ (8000298 <main+0x78>)
 8000276:	2305      	movs	r3, #5
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	2301      	movs	r3, #1
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2301      	movs	r3, #1
 8000280:	2201      	movs	r2, #1
 8000282:	2100      	movs	r1, #0
 8000284:	f000 f9cc 	bl	8000620 <begin>
 8000288:	e7f4      	b.n	8000274 <main+0x54>
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	20000028 	.word	0x20000028
 8000290:	08002790 	.word	0x08002790
 8000294:	080027c0 	.word	0x080027c0
 8000298:	20000074 	.word	0x20000074

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b08d      	sub	sp, #52	@ 0x34
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2414      	movs	r4, #20
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	231c      	movs	r3, #28
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f002 fa37 	bl	8002720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	003b      	movs	r3, r7
 80002b4:	0018      	movs	r0, r3
 80002b6:	2314      	movs	r3, #20
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f002 fa30 	bl	8002720 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2202      	movs	r2, #2
 80002c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2280      	movs	r2, #128	@ 0x80
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2240      	movs	r2, #64	@ 0x40
 80002d8:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fdcd 	bl	8000e7c <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002e6:	f000 f9fb 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	003b      	movs	r3, r7
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	003b      	movs	r3, r7
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f000 ff99 	bl	8001244 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000316:	f000 f9e3 	bl	80006e0 <Error_Handler>
  }
}
 800031a:	46c0      	nop			@ (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b00d      	add	sp, #52	@ 0x34
 8000320:	bd90      	pop	{r4, r7, pc}
	...

08000324 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b09c      	sub	sp, #112	@ 0x70
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	2360      	movs	r3, #96	@ 0x60
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2310      	movs	r3, #16
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 f9f3 	bl	8002720 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033a:	2354      	movs	r3, #84	@ 0x54
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	230c      	movs	r3, #12
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 f9eb 	bl	8002720 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800034a:	2338      	movs	r3, #56	@ 0x38
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	0018      	movs	r0, r3
 8000350:	231c      	movs	r3, #28
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f002 f9e3 	bl	8002720 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	0018      	movs	r0, r3
 800035e:	2334      	movs	r3, #52	@ 0x34
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f002 f9dc 	bl	8002720 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000368:	4b51      	ldr	r3, [pc, #324]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 800036a:	4a52      	ldr	r2, [pc, #328]	@ (80004b4 <MX_TIM1_Init+0x190>)
 800036c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 800036e:	4b50      	ldr	r3, [pc, #320]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 8000370:	22e0      	movs	r2, #224	@ 0xe0
 8000372:	32ff      	adds	r2, #255	@ 0xff
 8000374:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000376:	4b4e      	ldr	r3, [pc, #312]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 800037c:	4b4c      	ldr	r3, [pc, #304]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 800037e:	2232      	movs	r2, #50	@ 0x32
 8000380:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000382:	4b4b      	ldr	r3, [pc, #300]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000388:	4b49      	ldr	r3, [pc, #292]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038e:	4b48      	ldr	r3, [pc, #288]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000394:	4b46      	ldr	r3, [pc, #280]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 8000396:	0018      	movs	r0, r3
 8000398:	f001 f8a0 	bl	80014dc <HAL_TIM_Base_Init>
 800039c:	1e03      	subs	r3, r0, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80003a0:	f000 f99e 	bl	80006e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a4:	2160      	movs	r1, #96	@ 0x60
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2280      	movs	r2, #128	@ 0x80
 80003aa:	0152      	lsls	r2, r2, #5
 80003ac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ae:	187a      	adds	r2, r7, r1
 80003b0:	4b3f      	ldr	r3, [pc, #252]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 80003b2:	0011      	movs	r1, r2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fc0d 	bl	8001bd4 <HAL_TIM_ConfigClockSource>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80003be:	f000 f98f 	bl	80006e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003c2:	4b3b      	ldr	r3, [pc, #236]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 f8e1 	bl	800158c <HAL_TIM_PWM_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80003ce:	f000 f987 	bl	80006e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d2:	2154      	movs	r1, #84	@ 0x54
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003e6:	187a      	adds	r2, r7, r1
 80003e8:	4b31      	ldr	r3, [pc, #196]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 f88f 	bl	8002510 <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80003f6:	f000 f973 	bl	80006e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003fa:	2138      	movs	r1, #56	@ 0x38
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2260      	movs	r2, #96	@ 0x60
 8000400:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000426:	1879      	adds	r1, r7, r1
 8000428:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 800042a:	2200      	movs	r2, #0
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fad1 	bl	80019d4 <HAL_TIM_PWM_ConfigChannel>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000436:	f000 f953 	bl	80006e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2280      	movs	r2, #128	@ 0x80
 800045c:	0192      	lsls	r2, r2, #6
 800045e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2200      	movs	r2, #0
 800046a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2280      	movs	r2, #128	@ 0x80
 8000476:	0492      	lsls	r2, r2, #18
 8000478:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800048c:	1d3a      	adds	r2, r7, #4
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f002 f89e 	bl	80025d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 800049c:	f000 f920 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004a0:	4b03      	ldr	r3, [pc, #12]	@ (80004b0 <MX_TIM1_Init+0x18c>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 f97a 	bl	800079c <HAL_TIM_MspPostInit>

}
 80004a8:	46c0      	nop			@ (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b01c      	add	sp, #112	@ 0x70
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000028 	.word	0x20000028
 80004b4:	40012c00 	.word	0x40012c00

080004b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08e      	sub	sp, #56	@ 0x38
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004be:	2328      	movs	r3, #40	@ 0x28
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	0018      	movs	r0, r3
 80004c4:	2310      	movs	r3, #16
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f002 f929 	bl	8002720 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ce:	231c      	movs	r3, #28
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	0018      	movs	r0, r3
 80004d4:	230c      	movs	r3, #12
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f002 f921 	bl	8002720 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004de:	003b      	movs	r3, r7
 80004e0:	0018      	movs	r0, r3
 80004e2:	231c      	movs	r3, #28
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f002 f91a 	bl	8002720 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ec:	4b2f      	ldr	r3, [pc, #188]	@ (80005ac <MX_TIM3_Init+0xf4>)
 80004ee:	4a30      	ldr	r2, [pc, #192]	@ (80005b0 <MX_TIM3_Init+0xf8>)
 80004f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 80004f2:	4b2e      	ldr	r3, [pc, #184]	@ (80005ac <MX_TIM3_Init+0xf4>)
 80004f4:	2205      	movs	r2, #5
 80004f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f8:	4b2c      	ldr	r3, [pc, #176]	@ (80005ac <MX_TIM3_Init+0xf4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12;
 80004fe:	4b2b      	ldr	r3, [pc, #172]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000500:	220c      	movs	r2, #12
 8000502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000504:	4b29      	ldr	r3, [pc, #164]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <MX_TIM3_Init+0xf4>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000510:	4b26      	ldr	r3, [pc, #152]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000512:	0018      	movs	r0, r3
 8000514:	f000 ffe2 	bl	80014dc <HAL_TIM_Base_Init>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800051c:	f000 f8e0 	bl	80006e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000520:	2128      	movs	r1, #40	@ 0x28
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2280      	movs	r2, #128	@ 0x80
 8000526:	0152      	lsls	r2, r2, #5
 8000528:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800052a:	187a      	adds	r2, r7, r1
 800052c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <MX_TIM3_Init+0xf4>)
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fb4f 	bl	8001bd4 <HAL_TIM_ConfigClockSource>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800053a:	f000 f8d1 	bl	80006e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800053e:	4b1b      	ldr	r3, [pc, #108]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 f823 	bl	800158c <HAL_TIM_PWM_Init>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800054a:	f000 f8c9 	bl	80006e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054e:	211c      	movs	r1, #28
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800055c:	187a      	adds	r2, r7, r1
 800055e:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <MX_TIM3_Init+0xf4>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f001 ffd4 	bl	8002510 <HAL_TIMEx_MasterConfigSynchronization>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800056c:	f000 f8b8 	bl	80006e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000570:	003b      	movs	r3, r7
 8000572:	2260      	movs	r2, #96	@ 0x60
 8000574:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000576:	003b      	movs	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000588:	0039      	movs	r1, r7
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <MX_TIM3_Init+0xf4>)
 800058c:	2200      	movs	r2, #0
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fa20 	bl	80019d4 <HAL_TIM_PWM_ConfigChannel>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000598:	f000 f8a2 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800059c:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <MX_TIM3_Init+0xf4>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 f8fc 	bl	800079c <HAL_TIM_MspPostInit>

}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b00e      	add	sp, #56	@ 0x38
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000074 	.word	0x20000074
 80005b0:	40000400 	.word	0x40000400

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	0018      	movs	r0, r3
 80005be:	2314      	movs	r3, #20
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f002 f8ac 	bl	8002720 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b14      	ldr	r3, [pc, #80]	@ (800061c <MX_GPIO_Init+0x68>)
 80005ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005cc:	4b13      	ldr	r3, [pc, #76]	@ (800061c <MX_GPIO_Init+0x68>)
 80005ce:	2101      	movs	r1, #1
 80005d0:	430a      	orrs	r2, r1
 80005d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80005d4:	4b11      	ldr	r3, [pc, #68]	@ (800061c <MX_GPIO_Init+0x68>)
 80005d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005d8:	2201      	movs	r2, #1
 80005da:	4013      	ands	r3, r2
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 80005e0:	23a0      	movs	r3, #160	@ 0xa0
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	2200      	movs	r2, #0
 80005e6:	2180      	movs	r1, #128	@ 0x80
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fc29 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PERIPH_SUPLLY_Pin */
  GPIO_InitStruct.Pin = PERIPH_SUPLLY_Pin;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2211      	movs	r2, #17
 80005f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2201      	movs	r2, #1
 80005fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 8000606:	1d3a      	adds	r2, r7, #4
 8000608:	23a0      	movs	r3, #160	@ 0xa0
 800060a:	05db      	lsls	r3, r3, #23
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f000 faac 	bl	8000b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b006      	add	sp, #24
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <begin>:




void begin(TIM_HandleTypeDef *_htim, uint32_t channel, uint32_t num_of_leds, uint32_t pause_Pulse, uint32_t work_Pulse, uint32_t prescaler)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0a0      	sub	sp, #128	@ 0x80
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	603b      	str	r3, [r7, #0]
	//HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
	 *
	 */

	uint32_t buffer[24];
	uint32_t colorRGB = 0b000111100011111;
 800062e:	4b2b      	ldr	r3, [pc, #172]	@ (80006dc <begin+0xbc>)
 8000630:	677b      	str	r3, [r7, #116]	@ 0x74
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2205      	movs	r2, #5
 8000638:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(_htim, 9);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2209      	movs	r2, #9
 8000640:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2209      	movs	r2, #9
 8000646:	60da      	str	r2, [r3, #12]

	for(int j = 0; j < 2; j++)
 8000648:	2300      	movs	r3, #0
 800064a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800064c:	e03d      	b.n	80006ca <begin+0xaa>
	{
	HAL_TIM_PWM_Start(_htim, channel);
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f85f 	bl	8001718 <HAL_TIM_PWM_Start>

	for(int i = 0; i < 24 ; i++)
 800065a:	2300      	movs	r3, #0
 800065c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800065e:	e028      	b.n	80006b2 <begin+0x92>
	{
		uint32_t bit = (colorRGB >> (24-i));
 8000660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000662:	2218      	movs	r2, #24
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000668:	40da      	lsrs	r2, r3
 800066a:	0013      	movs	r3, r2
 800066c:	673b      	str	r3, [r7, #112]	@ 0x70
		if((bit & 1) == 1)
 800066e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000670:	2201      	movs	r2, #1
 8000672:	4013      	ands	r3, r2
 8000674:	d006      	beq.n	8000684 <begin+0x64>
		{
			buffer[i] = 6;
 8000676:	2310      	movs	r3, #16
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800067c:	0092      	lsls	r2, r2, #2
 800067e:	2106      	movs	r1, #6
 8000680:	50d1      	str	r1, [r2, r3]
 8000682:	e005      	b.n	8000690 <begin+0x70>

		}
		else
		{
			buffer[i] = 3;
 8000684:	2310      	movs	r3, #16
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800068a:	0092      	lsls	r2, r2, #2
 800068c:	2103      	movs	r1, #3
 800068e:	50d1      	str	r1, [r2, r3]
		}
		_htim->Instance->CCR1 = buffer[i];
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2210      	movs	r2, #16
 8000696:	18ba      	adds	r2, r7, r2
 8000698:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800069a:	0089      	lsls	r1, r1, #2
 800069c:	588a      	ldr	r2, [r1, r2]
 800069e:	635a      	str	r2, [r3, #52]	@ 0x34
		while(__HAL_TIM_GET_COUNTER(_htim) < 6);
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a8:	2b05      	cmp	r3, #5
 80006aa:	d9fa      	bls.n	80006a2 <begin+0x82>
	for(int i = 0; i < 24 ; i++)
 80006ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80006ae:	3301      	adds	r3, #1
 80006b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80006b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80006b4:	2b17      	cmp	r3, #23
 80006b6:	ddd3      	ble.n	8000660 <begin+0x40>
	}


	HAL_TIM_PWM_Stop(_htim, channel);
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 f902 	bl	80018c8 <HAL_TIM_PWM_Stop>
	for(int j = 0; j < 2; j++)
 80006c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006c6:	3301      	adds	r3, #1
 80006c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80006ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	ddbe      	ble.n	800064e <begin+0x2e>
	}



}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b020      	add	sp, #128	@ 0x80
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	00000f1f 	.word	0x00000f1f

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <HAL_MspInit+0x44>)
 80006f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <HAL_MspInit+0x44>)
 80006f8:	2101      	movs	r1, #1
 80006fa:	430a      	orrs	r2, r1
 80006fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <HAL_MspInit+0x44>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	2201      	movs	r2, #1
 8000704:	4013      	ands	r3, r2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <HAL_MspInit+0x44>)
 800070c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <HAL_MspInit+0x44>)
 8000710:	2180      	movs	r1, #128	@ 0x80
 8000712:	0549      	lsls	r1, r1, #21
 8000714:	430a      	orrs	r2, r1
 8000716:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_MspInit+0x44>)
 800071a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	055b      	lsls	r3, r3, #21
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a13      	ldr	r2, [pc, #76]	@ (8000790 <HAL_TIM_Base_MspInit+0x5c>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d10e      	bne.n	8000764 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <HAL_TIM_Base_MspInit+0x60>)
 8000748:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_TIM_Base_MspInit+0x60>)
 800074c:	2180      	movs	r1, #128	@ 0x80
 800074e:	0109      	lsls	r1, r1, #4
 8000750:	430a      	orrs	r2, r1
 8000752:	641a      	str	r2, [r3, #64]	@ 0x40
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <HAL_TIM_Base_MspInit+0x60>)
 8000756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000758:	2380      	movs	r3, #128	@ 0x80
 800075a:	011b      	lsls	r3, r3, #4
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000762:	e010      	b.n	8000786 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM3)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0b      	ldr	r2, [pc, #44]	@ (8000798 <HAL_TIM_Base_MspInit+0x64>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d10b      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_TIM_Base_MspInit+0x60>)
 8000770:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <HAL_TIM_Base_MspInit+0x60>)
 8000774:	2102      	movs	r1, #2
 8000776:	430a      	orrs	r2, r1
 8000778:	63da      	str	r2, [r3, #60]	@ 0x3c
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_TIM_Base_MspInit+0x60>)
 800077c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077e:	2202      	movs	r2, #2
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	40012c00 	.word	0x40012c00
 8000794:	40021000 	.word	0x40021000
 8000798:	40000400 	.word	0x40000400

0800079c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b08b      	sub	sp, #44	@ 0x2c
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	2414      	movs	r4, #20
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	0018      	movs	r0, r3
 80007aa:	2314      	movs	r3, #20
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f001 ffb6 	bl	8002720 <memset>
  if(htim->Instance==TIM1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a29      	ldr	r2, [pc, #164]	@ (8000860 <HAL_TIM_MspPostInit+0xc4>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d123      	bne.n	8000806 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b29      	ldr	r3, [pc, #164]	@ (8000864 <HAL_TIM_MspPostInit+0xc8>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <HAL_TIM_MspPostInit+0xc8>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ca:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <HAL_TIM_MspPostInit+0xc8>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007d6:	0021      	movs	r1, r4
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2220      	movs	r2, #32
 80007dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2202      	movs	r2, #2
 80007e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2202      	movs	r2, #2
 80007ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2205      	movs	r2, #5
 80007f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	187a      	adds	r2, r7, r1
 80007f8:	23a0      	movs	r3, #160	@ 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f9b4 	bl	8000b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000804:	e027      	b.n	8000856 <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <HAL_TIM_MspPostInit+0xcc>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d122      	bne.n	8000856 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <HAL_TIM_MspPostInit+0xc8>)
 8000812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <HAL_TIM_MspPostInit+0xc8>)
 8000816:	2101      	movs	r1, #1
 8000818:	430a      	orrs	r2, r1
 800081a:	635a      	str	r2, [r3, #52]	@ 0x34
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_TIM_MspPostInit+0xc8>)
 800081e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000820:	2201      	movs	r2, #1
 8000822:	4013      	ands	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000828:	2114      	movs	r1, #20
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2240      	movs	r2, #64	@ 0x40
 800082e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2202      	movs	r2, #2
 8000834:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2202      	movs	r2, #2
 8000840:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2201      	movs	r2, #1
 8000846:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	187a      	adds	r2, r7, r1
 800084a:	23a0      	movs	r3, #160	@ 0xa0
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f000 f98b 	bl	8000b6c <HAL_GPIO_Init>
}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b00b      	add	sp, #44	@ 0x2c
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	40012c00 	.word	0x40012c00
 8000864:	40021000 	.word	0x40021000
 8000868:	40000400 	.word	0x40000400

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f89a 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008a4:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <SystemInit+0x14>)
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	0512      	lsls	r2, r2, #20
 80008aa:	609a      	str	r2, [r3, #8]
#endif
}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <Reset_Handler>:
 80008b8:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <LoopForever+0x2>)
 80008ba:	4685      	mov	sp, r0
 80008bc:	f7ff fff0 	bl	80008a0 <SystemInit>
 80008c0:	2100      	movs	r1, #0
 80008c2:	e003      	b.n	80008cc <LoopCopyDataInit>

080008c4 <CopyDataInit>:
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <LoopForever+0x6>)
 80008c6:	585b      	ldr	r3, [r3, r1]
 80008c8:	5043      	str	r3, [r0, r1]
 80008ca:	3104      	adds	r1, #4

080008cc <LoopCopyDataInit>:
 80008cc:	480a      	ldr	r0, [pc, #40]	@ (80008f8 <LoopForever+0xa>)
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <LoopForever+0xe>)
 80008d0:	1842      	adds	r2, r0, r1
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d3f6      	bcc.n	80008c4 <CopyDataInit>
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <LoopForever+0x12>)
 80008d8:	e002      	b.n	80008e0 <LoopFillZerobss>

080008da <FillZerobss>:
 80008da:	2300      	movs	r3, #0
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	3204      	adds	r2, #4

080008e0 <LoopFillZerobss>:
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <LoopForever+0x16>)
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d3f9      	bcc.n	80008da <FillZerobss>
 80008e6:	f001 ff23 	bl	8002730 <__libc_init_array>
 80008ea:	f7ff fc99 	bl	8000220 <main>

080008ee <LoopForever>:
 80008ee:	e7fe      	b.n	80008ee <LoopForever>
 80008f0:	20001800 	.word	0x20001800
 80008f4:	0800288c 	.word	0x0800288c
 80008f8:	20000000 	.word	0x20000000
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	2000000c 	.word	0x2000000c
 8000904:	200000c4 	.word	0x200000c4

08000908 <ADC1_IRQHandler>:
 8000908:	e7fe      	b.n	8000908 <ADC1_IRQHandler>

0800090a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000916:	2003      	movs	r0, #3
 8000918:	f000 f80e 	bl	8000938 <HAL_InitTick>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d003      	beq.n	8000928 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e001      	b.n	800092c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000928:	f7ff fee0 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b002      	add	sp, #8
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000940:	230f      	movs	r3, #15
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <HAL_InitTick+0x88>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d02b      	beq.n	80009a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000950:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <HAL_InitTick+0x8c>)
 8000952:	681c      	ldr	r4, [r3, #0]
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <HAL_InitTick+0x88>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	0019      	movs	r1, r3
 800095a:	23fa      	movs	r3, #250	@ 0xfa
 800095c:	0098      	lsls	r0, r3, #2
 800095e:	f7ff fbd3 	bl	8000108 <__udivsi3>
 8000962:	0003      	movs	r3, r0
 8000964:	0019      	movs	r1, r3
 8000966:	0020      	movs	r0, r4
 8000968:	f7ff fbce 	bl	8000108 <__udivsi3>
 800096c:	0003      	movs	r3, r0
 800096e:	0018      	movs	r0, r3
 8000970:	f000 f8ef 	bl	8000b52 <HAL_SYSTICK_Config>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d112      	bne.n	800099e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b03      	cmp	r3, #3
 800097c:	d80a      	bhi.n	8000994 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f8ce 	bl	8000b28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_InitTick+0x90>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e00d      	b.n	80009b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	230f      	movs	r3, #15
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e008      	b.n	80009b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099e:	230f      	movs	r3, #15
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e003      	b.n	80009b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a8:	230f      	movs	r3, #15
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009b0:	230f      	movs	r3, #15
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	781b      	ldrb	r3, [r3, #0]
}
 80009b6:	0018      	movs	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b005      	add	sp, #20
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	001a      	movs	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	18d2      	adds	r2, r2, r3
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <HAL_IncTick+0x20>)
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	20000008 	.word	0x20000008
 80009ec:	200000c0 	.word	0x200000c0

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	@ (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	200000c0 	.word	0x200000c0

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a18:	d828      	bhi.n	8000a6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad8 <__NVIC_SetPriority+0xd4>)
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	33c0      	adds	r3, #192	@ 0xc0
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	589b      	ldr	r3, [r3, r2]
 8000a2a:	1dfa      	adds	r2, r7, #7
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	0011      	movs	r1, r2
 8000a30:	2203      	movs	r2, #3
 8000a32:	400a      	ands	r2, r1
 8000a34:	00d2      	lsls	r2, r2, #3
 8000a36:	21ff      	movs	r1, #255	@ 0xff
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	22ff      	movs	r2, #255	@ 0xff
 8000a48:	401a      	ands	r2, r3
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2303      	movs	r3, #3
 8000a52:	4003      	ands	r3, r0
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a58:	481f      	ldr	r0, [pc, #124]	@ (8000ad8 <__NVIC_SetPriority+0xd4>)
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	430a      	orrs	r2, r1
 8000a64:	33c0      	adds	r3, #192	@ 0xc0
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a6a:	e031      	b.n	8000ad0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000adc <__NVIC_SetPriority+0xd8>)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	0019      	movs	r1, r3
 8000a74:	230f      	movs	r3, #15
 8000a76:	400b      	ands	r3, r1
 8000a78:	3b08      	subs	r3, #8
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3306      	adds	r3, #6
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	18d3      	adds	r3, r2, r3
 8000a82:	3304      	adds	r3, #4
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	1dfa      	adds	r2, r7, #7
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	400a      	ands	r2, r1
 8000a90:	00d2      	lsls	r2, r2, #3
 8000a92:	21ff      	movs	r1, #255	@ 0xff
 8000a94:	4091      	lsls	r1, r2
 8000a96:	000a      	movs	r2, r1
 8000a98:	43d2      	mvns	r2, r2
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	019b      	lsls	r3, r3, #6
 8000aa2:	22ff      	movs	r2, #255	@ 0xff
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2303      	movs	r3, #3
 8000aae:	4003      	ands	r3, r0
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab4:	4809      	ldr	r0, [pc, #36]	@ (8000adc <__NVIC_SetPriority+0xd8>)
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	001c      	movs	r4, r3
 8000abc:	230f      	movs	r3, #15
 8000abe:	4023      	ands	r3, r4
 8000ac0:	3b08      	subs	r3, #8
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	3306      	adds	r3, #6
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	18c3      	adds	r3, r0, r3
 8000acc:	3304      	adds	r3, #4
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	1e5a      	subs	r2, r3, #1
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	045b      	lsls	r3, r3, #17
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d301      	bcc.n	8000af8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af4:	2301      	movs	r3, #1
 8000af6:	e010      	b.n	8000b1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <SysTick_Config+0x44>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	3a01      	subs	r2, #1
 8000afe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b00:	2301      	movs	r3, #1
 8000b02:	425b      	negs	r3, r3
 8000b04:	2103      	movs	r1, #3
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff ff7c 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <SysTick_Config+0x44>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <SysTick_Config+0x44>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	210f      	movs	r1, #15
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	1c02      	adds	r2, r0, #0
 8000b38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ff5d 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b004      	add	sp, #16
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ffbf 	bl	8000ae0 <SysTick_Config>
 8000b62:	0003      	movs	r3, r0
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b7a:	e14d      	b.n	8000e18 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4091      	lsls	r1, r2
 8000b86:	000a      	movs	r2, r1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d100      	bne.n	8000b94 <HAL_GPIO_Init+0x28>
 8000b92:	e13e      	b.n	8000e12 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x38>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b12      	cmp	r3, #18
 8000ba2:	d125      	bne.n	8000bf0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	08da      	lsrs	r2, r3, #3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3208      	adds	r2, #8
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	58d3      	ldr	r3, [r2, r3]
 8000bb0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	220f      	movs	r2, #15
 8000bce:	401a      	ands	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2107      	movs	r1, #7
 8000bd4:	400b      	ands	r3, r1
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	0013      	movs	r3, r2
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	08da      	lsrs	r2, r3, #3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3208      	adds	r2, #8
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	6979      	ldr	r1, [r7, #20]
 8000bee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	409a      	lsls	r2, r3
 8000bfe:	0013      	movs	r3, r2
 8000c00:	43da      	mvns	r2, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	4013      	ands	r3, r2
 8000c06:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	401a      	ands	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	409a      	lsls	r2, r3
 8000c16:	0013      	movs	r3, r2
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d00b      	beq.n	8000c44 <HAL_GPIO_Init+0xd8>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d007      	beq.n	8000c44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c38:	2b11      	cmp	r3, #17
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b12      	cmp	r3, #18
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	43da      	mvns	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	43da      	mvns	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	4013      	ands	r3, r2
 8000c88:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	2201      	movs	r2, #1
 8000c92:	401a      	ands	r2, r3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d017      	beq.n	8000cde <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	2380      	movs	r3, #128	@ 0x80
 8000ce4:	055b      	lsls	r3, r3, #21
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d100      	bne.n	8000cec <HAL_GPIO_Init+0x180>
 8000cea:	e092      	b.n	8000e12 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000cec:	4a50      	ldr	r2, [pc, #320]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	589b      	ldr	r3, [r3, r2]
 8000cf8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	220f      	movs	r2, #15
 8000d04:	409a      	lsls	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	23a0      	movs	r3, #160	@ 0xa0
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d013      	beq.n	8000d42 <HAL_GPIO_Init+0x1d6>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a45      	ldr	r2, [pc, #276]	@ (8000e34 <HAL_GPIO_Init+0x2c8>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00d      	beq.n	8000d3e <HAL_GPIO_Init+0x1d2>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a44      	ldr	r2, [pc, #272]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d007      	beq.n	8000d3a <HAL_GPIO_Init+0x1ce>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a43      	ldr	r2, [pc, #268]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_GPIO_Init+0x1ca>
 8000d32:	2305      	movs	r3, #5
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x1d8>
 8000d36:	2306      	movs	r3, #6
 8000d38:	e004      	b.n	8000d44 <HAL_GPIO_Init+0x1d8>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x1d8>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x1d8>
 8000d42:	2300      	movs	r3, #0
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	2103      	movs	r1, #3
 8000d48:	400a      	ands	r2, r1
 8000d4a:	00d2      	lsls	r2, r2, #3
 8000d4c:	4093      	lsls	r3, r2
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000d54:	4936      	ldr	r1, [pc, #216]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3318      	adds	r3, #24
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000d62:	4a33      	ldr	r2, [pc, #204]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	58d3      	ldr	r3, [r2, r3]
 8000d68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	4013      	ands	r3, r2
 8000d72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	025b      	lsls	r3, r3, #9
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000d88:	4929      	ldr	r1, [pc, #164]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000d90:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000d92:	2384      	movs	r3, #132	@ 0x84
 8000d94:	58d3      	ldr	r3, [r2, r3]
 8000d96:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	2380      	movs	r3, #128	@ 0x80
 8000da8:	029b      	lsls	r3, r3, #10
 8000daa:	4013      	ands	r3, r2
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000db6:	491e      	ldr	r1, [pc, #120]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000db8:	2284      	movs	r2, #132	@ 0x84
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	2380      	movs	r3, #128	@ 0x80
 8000dd4:	035b      	lsls	r3, r3, #13
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	@ 0x80
 8000dfe:	039b      	lsls	r3, r3, #14
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	3301      	adds	r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	40da      	lsrs	r2, r3
 8000e20:	1e13      	subs	r3, r2, #0
 8000e22:	d000      	beq.n	8000e26 <HAL_GPIO_Init+0x2ba>
 8000e24:	e6aa      	b.n	8000b7c <HAL_GPIO_Init+0x10>
  }
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b006      	add	sp, #24
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021800 	.word	0x40021800
 8000e34:	50000400 	.word	0x50000400
 8000e38:	50000800 	.word	0x50000800
 8000e3c:	50001400 	.word	0x50001400

08000e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	0008      	movs	r0, r1
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	1cbb      	adds	r3, r7, #2
 8000e4e:	1c02      	adds	r2, r0, #0
 8000e50:	801a      	strh	r2, [r3, #0]
 8000e52:	1c7b      	adds	r3, r7, #1
 8000e54:	1c0a      	adds	r2, r1, #0
 8000e56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e58:	1c7b      	adds	r3, r7, #1
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e60:	1cbb      	adds	r3, r7, #2
 8000e62:	881a      	ldrh	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e68:	e003      	b.n	8000e72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e6a:	1cbb      	adds	r3, r7, #2
 8000e6c:	881a      	ldrh	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e1d0      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2201      	movs	r2, #1
 8000e94:	4013      	ands	r3, r2
 8000e96:	d100      	bne.n	8000e9a <HAL_RCC_OscConfig+0x1e>
 8000e98:	e069      	b.n	8000f6e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e9a:	4bc8      	ldr	r3, [pc, #800]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2238      	movs	r2, #56	@ 0x38
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d105      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d15d      	bne.n	8000f6e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e1bc      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	2380      	movs	r3, #128	@ 0x80
 8000ebc:	025b      	lsls	r3, r3, #9
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d107      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x56>
 8000ec2:	4bbe      	ldr	r3, [pc, #760]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4bbd      	ldr	r3, [pc, #756]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000ec8:	2180      	movs	r1, #128	@ 0x80
 8000eca:	0249      	lsls	r1, r1, #9
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e020      	b.n	8000f14 <HAL_RCC_OscConfig+0x98>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	23a0      	movs	r3, #160	@ 0xa0
 8000ed8:	02db      	lsls	r3, r3, #11
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d10e      	bne.n	8000efc <HAL_RCC_OscConfig+0x80>
 8000ede:	4bb7      	ldr	r3, [pc, #732]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4bb6      	ldr	r3, [pc, #728]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	02c9      	lsls	r1, r1, #11
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4bb3      	ldr	r3, [pc, #716]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4bb2      	ldr	r3, [pc, #712]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000ef2:	2180      	movs	r1, #128	@ 0x80
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e00b      	b.n	8000f14 <HAL_RCC_OscConfig+0x98>
 8000efc:	4baf      	ldr	r3, [pc, #700]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4bae      	ldr	r3, [pc, #696]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000f02:	49af      	ldr	r1, [pc, #700]	@ (80011c0 <HAL_RCC_OscConfig+0x344>)
 8000f04:	400a      	ands	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	4bac      	ldr	r3, [pc, #688]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4bab      	ldr	r3, [pc, #684]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000f0e:	49ad      	ldr	r1, [pc, #692]	@ (80011c4 <HAL_RCC_OscConfig+0x348>)
 8000f10:	400a      	ands	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d014      	beq.n	8000f46 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fd68 	bl	80009f0 <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f26:	f7ff fd63 	bl	80009f0 <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b64      	cmp	r3, #100	@ 0x64
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e17b      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f38:	4ba0      	ldr	r3, [pc, #640]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	029b      	lsls	r3, r3, #10
 8000f40:	4013      	ands	r3, r2
 8000f42:	d0f0      	beq.n	8000f26 <HAL_RCC_OscConfig+0xaa>
 8000f44:	e013      	b.n	8000f6e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f46:	f7ff fd53 	bl	80009f0 <HAL_GetTick>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fd4e 	bl	80009f0 <HAL_GetTick>
 8000f54:	0002      	movs	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b64      	cmp	r3, #100	@ 0x64
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e166      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f62:	4b96      	ldr	r3, [pc, #600]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	2380      	movs	r3, #128	@ 0x80
 8000f68:	029b      	lsls	r3, r3, #10
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2202      	movs	r2, #2
 8000f74:	4013      	ands	r3, r2
 8000f76:	d100      	bne.n	8000f7a <HAL_RCC_OscConfig+0xfe>
 8000f78:	e086      	b.n	8001088 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f7a:	4b90      	ldr	r3, [pc, #576]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2238      	movs	r2, #56	@ 0x38
 8000f80:	4013      	ands	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d12f      	bne.n	8000fea <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e14c      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	4b89      	ldr	r3, [pc, #548]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a8b      	ldr	r2, [pc, #556]	@ (80011c8 <HAL_RCC_OscConfig+0x34c>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	021a      	lsls	r2, r3, #8
 8000fa6:	4b85      	ldr	r3, [pc, #532]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d112      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fb2:	4b82      	ldr	r3, [pc, #520]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a85      	ldr	r2, [pc, #532]	@ (80011cc <HAL_RCC_OscConfig+0x350>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	0019      	movs	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fc6:	4b7d      	ldr	r3, [pc, #500]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	0adb      	lsrs	r3, r3, #11
 8000fcc:	2207      	movs	r2, #7
 8000fce:	4013      	ands	r3, r2
 8000fd0:	4a7f      	ldr	r2, [pc, #508]	@ (80011d0 <HAL_RCC_OscConfig+0x354>)
 8000fd2:	40da      	lsrs	r2, r3
 8000fd4:	4b7f      	ldr	r3, [pc, #508]	@ (80011d4 <HAL_RCC_OscConfig+0x358>)
 8000fd6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fd8:	4b7f      	ldr	r3, [pc, #508]	@ (80011d8 <HAL_RCC_OscConfig+0x35c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff fcab 	bl	8000938 <HAL_InitTick>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d050      	beq.n	8001088 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e122      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d030      	beq.n	8001054 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ff2:	4b72      	ldr	r3, [pc, #456]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a75      	ldr	r2, [pc, #468]	@ (80011cc <HAL_RCC_OscConfig+0x350>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	4b6e      	ldr	r3, [pc, #440]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001006:	4b6d      	ldr	r3, [pc, #436]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b6c      	ldr	r3, [pc, #432]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 800100c:	2180      	movs	r1, #128	@ 0x80
 800100e:	0049      	lsls	r1, r1, #1
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001014:	f7ff fcec 	bl	80009f0 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800101e:	f7ff fce7 	bl	80009f0 <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e0ff      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001030:	4b62      	ldr	r3, [pc, #392]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	@ 0x80
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4013      	ands	r3, r2
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b5f      	ldr	r3, [pc, #380]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4a61      	ldr	r2, [pc, #388]	@ (80011c8 <HAL_RCC_OscConfig+0x34c>)
 8001042:	4013      	ands	r3, r2
 8001044:	0019      	movs	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	021a      	lsls	r2, r3, #8
 800104c:	4b5b      	ldr	r3, [pc, #364]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 800104e:	430a      	orrs	r2, r1
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	e019      	b.n	8001088 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001054:	4b59      	ldr	r3, [pc, #356]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b58      	ldr	r3, [pc, #352]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 800105a:	4960      	ldr	r1, [pc, #384]	@ (80011dc <HAL_RCC_OscConfig+0x360>)
 800105c:	400a      	ands	r2, r1
 800105e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fcc6 	bl	80009f0 <HAL_GetTick>
 8001064:	0003      	movs	r3, r0
 8001066:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800106a:	f7ff fcc1 	bl	80009f0 <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e0d9      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800107c:	4b4f      	ldr	r3, [pc, #316]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4013      	ands	r3, r2
 8001086:	d1f0      	bne.n	800106a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2208      	movs	r2, #8
 800108e:	4013      	ands	r3, r2
 8001090:	d042      	beq.n	8001118 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001092:	4b4a      	ldr	r3, [pc, #296]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2238      	movs	r2, #56	@ 0x38
 8001098:	4013      	ands	r3, r2
 800109a:	2b18      	cmp	r3, #24
 800109c:	d105      	bne.n	80010aa <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d138      	bne.n	8001118 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e0c2      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d019      	beq.n	80010e6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010b2:	4b42      	ldr	r3, [pc, #264]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 80010b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010b6:	4b41      	ldr	r3, [pc, #260]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	430a      	orrs	r2, r1
 80010bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010be:	f7ff fc97 	bl	80009f0 <HAL_GetTick>
 80010c2:	0003      	movs	r3, r0
 80010c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc92 	bl	80009f0 <HAL_GetTick>
 80010cc:	0002      	movs	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e0aa      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80010da:	4b38      	ldr	r3, [pc, #224]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010de:	2202      	movs	r2, #2
 80010e0:	4013      	ands	r3, r2
 80010e2:	d0f1      	beq.n	80010c8 <HAL_RCC_OscConfig+0x24c>
 80010e4:	e018      	b.n	8001118 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80010e6:	4b35      	ldr	r3, [pc, #212]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 80010e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010ea:	4b34      	ldr	r3, [pc, #208]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	438a      	bics	r2, r1
 80010f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f2:	f7ff fc7d 	bl	80009f0 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80010fc:	f7ff fc78 	bl	80009f0 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e090      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800110e:	4b2b      	ldr	r3, [pc, #172]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d1f1      	bne.n	80010fc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2204      	movs	r2, #4
 800111e:	4013      	ands	r3, r2
 8001120:	d100      	bne.n	8001124 <HAL_RCC_OscConfig+0x2a8>
 8001122:	e084      	b.n	800122e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001124:	230f      	movs	r3, #15
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800112c:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2238      	movs	r2, #56	@ 0x38
 8001132:	4013      	ands	r3, r2
 8001134:	2b20      	cmp	r3, #32
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d000      	beq.n	8001142 <HAL_RCC_OscConfig+0x2c6>
 8001140:	e075      	b.n	800122e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e074      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x2e0>
 800114e:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001150:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001154:	2101      	movs	r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	65da      	str	r2, [r3, #92]	@ 0x5c
 800115a:	e01c      	b.n	8001196 <HAL_RCC_OscConfig+0x31a>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b05      	cmp	r3, #5
 8001162:	d10c      	bne.n	800117e <HAL_RCC_OscConfig+0x302>
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001166:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 800116a:	2104      	movs	r1, #4
 800116c:	430a      	orrs	r2, r1
 800116e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001172:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001176:	2101      	movs	r1, #1
 8001178:	430a      	orrs	r2, r1
 800117a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800117c:	e00b      	b.n	8001196 <HAL_RCC_OscConfig+0x31a>
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001180:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001184:	2101      	movs	r1, #1
 8001186:	438a      	bics	r2, r1
 8001188:	65da      	str	r2, [r3, #92]	@ 0x5c
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 800118c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_RCC_OscConfig+0x340>)
 8001190:	2104      	movs	r1, #4
 8001192:	438a      	bics	r2, r1
 8001194:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d028      	beq.n	80011f0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119e:	f7ff fc27 	bl	80009f0 <HAL_GetTick>
 80011a2:	0003      	movs	r3, r0
 80011a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80011a6:	e01d      	b.n	80011e4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a8:	f7ff fc22 	bl	80009f0 <HAL_GetTick>
 80011ac:	0002      	movs	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_RCC_OscConfig+0x364>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d915      	bls.n	80011e4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e039      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
 80011bc:	40021000 	.word	0x40021000
 80011c0:	fffeffff 	.word	0xfffeffff
 80011c4:	fffbffff 	.word	0xfffbffff
 80011c8:	ffff80ff 	.word	0xffff80ff
 80011cc:	ffffc7ff 	.word	0xffffc7ff
 80011d0:	02dc6c00 	.word	0x02dc6c00
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004
 80011dc:	fffffeff 	.word	0xfffffeff
 80011e0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <HAL_RCC_OscConfig+0x3bc>)
 80011e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d0dc      	beq.n	80011a8 <HAL_RCC_OscConfig+0x32c>
 80011ee:	e013      	b.n	8001218 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fbfe 	bl	80009f0 <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80011f8:	e009      	b.n	800120e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fbf9 	bl	80009f0 <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <HAL_RCC_OscConfig+0x3c0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e010      	b.n	8001230 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_RCC_OscConfig+0x3bc>)
 8001210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001212:	2202      	movs	r2, #2
 8001214:	4013      	ands	r3, r2
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001218:	230f      	movs	r3, #15
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d105      	bne.n	800122e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001222:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_RCC_OscConfig+0x3bc>)
 8001224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <HAL_RCC_OscConfig+0x3bc>)
 8001228:	4905      	ldr	r1, [pc, #20]	@ (8001240 <HAL_RCC_OscConfig+0x3c4>)
 800122a:	400a      	ands	r2, r1
 800122c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	b006      	add	sp, #24
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	00001388 	.word	0x00001388
 8001240:	efffffff 	.word	0xefffffff

08001244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0e9      	b.n	800142c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001258:	4b76      	ldr	r3, [pc, #472]	@ (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2207      	movs	r2, #7
 800125e:	4013      	ands	r3, r2
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d91e      	bls.n	80012a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b73      	ldr	r3, [pc, #460]	@ (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2207      	movs	r2, #7
 800126c:	4393      	bics	r3, r2
 800126e:	0019      	movs	r1, r3
 8001270:	4b70      	ldr	r3, [pc, #448]	@ (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001278:	f7ff fbba 	bl	80009f0 <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001280:	e009      	b.n	8001296 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001282:	f7ff fbb5 	bl	80009f0 <HAL_GetTick>
 8001286:	0002      	movs	r2, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4a6a      	ldr	r2, [pc, #424]	@ (8001438 <HAL_RCC_ClockConfig+0x1f4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e0ca      	b.n	800142c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001296:	4b67      	ldr	r3, [pc, #412]	@ (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2207      	movs	r2, #7
 800129c:	4013      	ands	r3, r2
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d1ee      	bne.n	8001282 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2202      	movs	r2, #2
 80012aa:	4013      	ands	r3, r2
 80012ac:	d017      	beq.n	80012de <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	4013      	ands	r3, r2
 80012b6:	d008      	beq.n	80012ca <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012b8:	4b60      	ldr	r3, [pc, #384]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a60      	ldr	r2, [pc, #384]	@ (8001440 <HAL_RCC_ClockConfig+0x1fc>)
 80012be:	401a      	ands	r2, r3
 80012c0:	4b5e      	ldr	r3, [pc, #376]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 80012c2:	21b0      	movs	r1, #176	@ 0xb0
 80012c4:	0109      	lsls	r1, r1, #4
 80012c6:	430a      	orrs	r2, r1
 80012c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ca:	4b5c      	ldr	r3, [pc, #368]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	4a5d      	ldr	r2, [pc, #372]	@ (8001444 <HAL_RCC_ClockConfig+0x200>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	4b58      	ldr	r3, [pc, #352]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4013      	ands	r3, r2
 80012e6:	d055      	beq.n	8001394 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80012e8:	4b54      	ldr	r3, [pc, #336]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	221c      	movs	r2, #28
 80012ee:	4393      	bics	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	4b51      	ldr	r3, [pc, #324]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d107      	bne.n	8001314 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001304:	4b4d      	ldr	r3, [pc, #308]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	4013      	ands	r3, r2
 800130e:	d11f      	bne.n	8001350 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e08b      	b.n	800142c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d107      	bne.n	800132c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800131c:	4b47      	ldr	r3, [pc, #284]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4013      	ands	r3, r2
 8001326:	d113      	bne.n	8001350 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e07f      	b.n	800142c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d106      	bne.n	8001342 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001334:	4b41      	ldr	r3, [pc, #260]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 8001336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d108      	bne.n	8001350 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e074      	b.n	800142c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001342:	4b3e      	ldr	r3, [pc, #248]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 8001344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001346:	2202      	movs	r2, #2
 8001348:	4013      	ands	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e06d      	b.n	800142c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001350:	4b3a      	ldr	r3, [pc, #232]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2207      	movs	r2, #7
 8001356:	4393      	bics	r3, r2
 8001358:	0019      	movs	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4b37      	ldr	r3, [pc, #220]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 8001360:	430a      	orrs	r2, r1
 8001362:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001364:	f7ff fb44 	bl	80009f0 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136c:	e009      	b.n	8001382 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800136e:	f7ff fb3f 	bl	80009f0 <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	4a2f      	ldr	r2, [pc, #188]	@ (8001438 <HAL_RCC_ClockConfig+0x1f4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e054      	b.n	800142c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001382:	4b2e      	ldr	r3, [pc, #184]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2238      	movs	r2, #56	@ 0x38
 8001388:	401a      	ands	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	429a      	cmp	r2, r3
 8001392:	d1ec      	bne.n	800136e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2207      	movs	r2, #7
 800139a:	4013      	ands	r3, r2
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d21e      	bcs.n	80013e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2207      	movs	r2, #7
 80013a8:	4393      	bics	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013b4:	f7ff fb1c 	bl	80009f0 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013bc:	e009      	b.n	80013d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013be:	f7ff fb17 	bl	80009f0 <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <HAL_RCC_ClockConfig+0x1f4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e02c      	b.n	800142c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <HAL_RCC_ClockConfig+0x1f0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2207      	movs	r2, #7
 80013d8:	4013      	ands	r3, r2
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1ee      	bne.n	80013be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2204      	movs	r2, #4
 80013e6:	4013      	ands	r3, r2
 80013e8:	d009      	beq.n	80013fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <HAL_RCC_ClockConfig+0x204>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80013fe:	f000 f82b 	bl	8001458 <HAL_RCC_GetSysClockFreq>
 8001402:	0001      	movs	r1, r0
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_RCC_ClockConfig+0x1f8>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	220f      	movs	r2, #15
 800140c:	401a      	ands	r2, r3
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_RCC_ClockConfig+0x208>)
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	58d3      	ldr	r3, [r2, r3]
 8001414:	221f      	movs	r2, #31
 8001416:	4013      	ands	r3, r2
 8001418:	000a      	movs	r2, r1
 800141a:	40da      	lsrs	r2, r3
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <HAL_RCC_ClockConfig+0x20c>)
 800141e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_RCC_ClockConfig+0x210>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff fa87 	bl	8000938 <HAL_InitTick>
 800142a:	0003      	movs	r3, r0
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b004      	add	sp, #16
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40022000 	.word	0x40022000
 8001438:	00001388 	.word	0x00001388
 800143c:	40021000 	.word	0x40021000
 8001440:	ffff84ff 	.word	0xffff84ff
 8001444:	fffff0ff 	.word	0xfffff0ff
 8001448:	ffff8fff 	.word	0xffff8fff
 800144c:	080027f0 	.word	0x080027f0
 8001450:	20000000 	.word	0x20000000
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2238      	movs	r2, #56	@ 0x38
 8001464:	4013      	ands	r3, r2
 8001466:	d10f      	bne.n	8001488 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x78>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0adb      	lsrs	r3, r3, #11
 800146e:	2207      	movs	r2, #7
 8001470:	4013      	ands	r3, r2
 8001472:	2201      	movs	r2, #1
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	4815      	ldr	r0, [pc, #84]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800147e:	f7fe fe43 	bl	8000108 <__udivsi3>
 8001482:	0003      	movs	r3, r0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	e01e      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x78>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2238      	movs	r2, #56	@ 0x38
 800148e:	4013      	ands	r3, r2
 8001490:	2b08      	cmp	r3, #8
 8001492:	d102      	bne.n	800149a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001494:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	e015      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x78>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2238      	movs	r2, #56	@ 0x38
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	d103      	bne.n	80014ae <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	e00b      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x78>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2238      	movs	r2, #56	@ 0x38
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b18      	cmp	r3, #24
 80014b8:	d103      	bne.n	80014c2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80014ba:	23fa      	movs	r3, #250	@ 0xfa
 80014bc:	01db      	lsls	r3, r3, #7
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	e001      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80014c6:	687b      	ldr	r3, [r7, #4]
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	02dc6c00 	.word	0x02dc6c00
 80014d8:	007a1200 	.word	0x007a1200

080014dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e04a      	b.n	8001584 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	223d      	movs	r2, #61	@ 0x3d
 80014f2:	5c9b      	ldrb	r3, [r3, r2]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d107      	bne.n	800150a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	223c      	movs	r2, #60	@ 0x3c
 80014fe:	2100      	movs	r1, #0
 8001500:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	0018      	movs	r0, r3
 8001506:	f7ff f915 	bl	8000734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	223d      	movs	r2, #61	@ 0x3d
 800150e:	2102      	movs	r1, #2
 8001510:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3304      	adds	r3, #4
 800151a:	0019      	movs	r1, r3
 800151c:	0010      	movs	r0, r2
 800151e:	f000 fc2f 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2248      	movs	r2, #72	@ 0x48
 8001526:	2101      	movs	r1, #1
 8001528:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	223e      	movs	r2, #62	@ 0x3e
 800152e:	2101      	movs	r1, #1
 8001530:	5499      	strb	r1, [r3, r2]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	223f      	movs	r2, #63	@ 0x3f
 8001536:	2101      	movs	r1, #1
 8001538:	5499      	strb	r1, [r3, r2]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2240      	movs	r2, #64	@ 0x40
 800153e:	2101      	movs	r1, #1
 8001540:	5499      	strb	r1, [r3, r2]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2241      	movs	r2, #65	@ 0x41
 8001546:	2101      	movs	r1, #1
 8001548:	5499      	strb	r1, [r3, r2]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2242      	movs	r2, #66	@ 0x42
 800154e:	2101      	movs	r1, #1
 8001550:	5499      	strb	r1, [r3, r2]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2243      	movs	r2, #67	@ 0x43
 8001556:	2101      	movs	r1, #1
 8001558:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2244      	movs	r2, #68	@ 0x44
 800155e:	2101      	movs	r1, #1
 8001560:	5499      	strb	r1, [r3, r2]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2245      	movs	r2, #69	@ 0x45
 8001566:	2101      	movs	r1, #1
 8001568:	5499      	strb	r1, [r3, r2]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2246      	movs	r2, #70	@ 0x46
 800156e:	2101      	movs	r1, #1
 8001570:	5499      	strb	r1, [r3, r2]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2247      	movs	r2, #71	@ 0x47
 8001576:	2101      	movs	r1, #1
 8001578:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	223d      	movs	r2, #61	@ 0x3d
 800157e:	2101      	movs	r1, #1
 8001580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b002      	add	sp, #8
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e04a      	b.n	8001634 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	223d      	movs	r2, #61	@ 0x3d
 80015a2:	5c9b      	ldrb	r3, [r3, r2]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d107      	bne.n	80015ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	223c      	movs	r2, #60	@ 0x3c
 80015ae:	2100      	movs	r1, #0
 80015b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 f89f 	bl	80016f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	223d      	movs	r2, #61	@ 0x3d
 80015be:	2102      	movs	r1, #2
 80015c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3304      	adds	r3, #4
 80015ca:	0019      	movs	r1, r3
 80015cc:	0010      	movs	r0, r2
 80015ce:	f000 fbd7 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2248      	movs	r2, #72	@ 0x48
 80015d6:	2101      	movs	r1, #1
 80015d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	223e      	movs	r2, #62	@ 0x3e
 80015de:	2101      	movs	r1, #1
 80015e0:	5499      	strb	r1, [r3, r2]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	223f      	movs	r2, #63	@ 0x3f
 80015e6:	2101      	movs	r1, #1
 80015e8:	5499      	strb	r1, [r3, r2]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2240      	movs	r2, #64	@ 0x40
 80015ee:	2101      	movs	r1, #1
 80015f0:	5499      	strb	r1, [r3, r2]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2241      	movs	r2, #65	@ 0x41
 80015f6:	2101      	movs	r1, #1
 80015f8:	5499      	strb	r1, [r3, r2]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2242      	movs	r2, #66	@ 0x42
 80015fe:	2101      	movs	r1, #1
 8001600:	5499      	strb	r1, [r3, r2]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2243      	movs	r2, #67	@ 0x43
 8001606:	2101      	movs	r1, #1
 8001608:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2244      	movs	r2, #68	@ 0x44
 800160e:	2101      	movs	r1, #1
 8001610:	5499      	strb	r1, [r3, r2]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2245      	movs	r2, #69	@ 0x45
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2246      	movs	r2, #70	@ 0x46
 800161e:	2101      	movs	r1, #1
 8001620:	5499      	strb	r1, [r3, r2]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2247      	movs	r2, #71	@ 0x47
 8001626:	2101      	movs	r1, #1
 8001628:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	223d      	movs	r2, #61	@ 0x3d
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	223d      	movs	r2, #61	@ 0x3d
 8001648:	2102      	movs	r1, #2
 800164a:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a27      	ldr	r2, [pc, #156]	@ (80016f0 <HAL_TIM_PWM_DeInit+0xb4>)
 8001654:	4013      	ands	r3, r2
 8001656:	d10d      	bne.n	8001674 <HAL_TIM_PWM_DeInit+0x38>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a25      	ldr	r2, [pc, #148]	@ (80016f4 <HAL_TIM_PWM_DeInit+0xb8>)
 8001660:	4013      	ands	r3, r2
 8001662:	d107      	bne.n	8001674 <HAL_TIM_PWM_DeInit+0x38>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2101      	movs	r1, #1
 8001670:	438a      	bics	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f846 	bl	8001708 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2248      	movs	r2, #72	@ 0x48
 8001680:	2100      	movs	r1, #0
 8001682:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	223e      	movs	r2, #62	@ 0x3e
 8001688:	2100      	movs	r1, #0
 800168a:	5499      	strb	r1, [r3, r2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	223f      	movs	r2, #63	@ 0x3f
 8001690:	2100      	movs	r1, #0
 8001692:	5499      	strb	r1, [r3, r2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2240      	movs	r2, #64	@ 0x40
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2241      	movs	r2, #65	@ 0x41
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2242      	movs	r2, #66	@ 0x42
 80016a8:	2100      	movs	r1, #0
 80016aa:	5499      	strb	r1, [r3, r2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2243      	movs	r2, #67	@ 0x43
 80016b0:	2100      	movs	r1, #0
 80016b2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2244      	movs	r2, #68	@ 0x44
 80016b8:	2100      	movs	r1, #0
 80016ba:	5499      	strb	r1, [r3, r2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2245      	movs	r2, #69	@ 0x45
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2246      	movs	r2, #70	@ 0x46
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2247      	movs	r2, #71	@ 0x47
 80016d0:	2100      	movs	r1, #0
 80016d2:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	223d      	movs	r2, #61	@ 0x3d
 80016d8:	2100      	movs	r1, #0
 80016da:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	223c      	movs	r2, #60	@ 0x3c
 80016e0:	2100      	movs	r1, #0
 80016e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	00001111 	.word	0x00001111
 80016f4:	00000444 	.word	0x00000444

080016f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d108      	bne.n	800173a <HAL_TIM_PWM_Start+0x22>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	223e      	movs	r2, #62	@ 0x3e
 800172c:	5c9b      	ldrb	r3, [r3, r2]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	1e5a      	subs	r2, r3, #1
 8001734:	4193      	sbcs	r3, r2
 8001736:	b2db      	uxtb	r3, r3
 8001738:	e037      	b.n	80017aa <HAL_TIM_PWM_Start+0x92>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d108      	bne.n	8001752 <HAL_TIM_PWM_Start+0x3a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	223f      	movs	r2, #63	@ 0x3f
 8001744:	5c9b      	ldrb	r3, [r3, r2]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	4193      	sbcs	r3, r2
 800174e:	b2db      	uxtb	r3, r3
 8001750:	e02b      	b.n	80017aa <HAL_TIM_PWM_Start+0x92>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b08      	cmp	r3, #8
 8001756:	d108      	bne.n	800176a <HAL_TIM_PWM_Start+0x52>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2240      	movs	r2, #64	@ 0x40
 800175c:	5c9b      	ldrb	r3, [r3, r2]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	1e5a      	subs	r2, r3, #1
 8001764:	4193      	sbcs	r3, r2
 8001766:	b2db      	uxtb	r3, r3
 8001768:	e01f      	b.n	80017aa <HAL_TIM_PWM_Start+0x92>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	d108      	bne.n	8001782 <HAL_TIM_PWM_Start+0x6a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2241      	movs	r2, #65	@ 0x41
 8001774:	5c9b      	ldrb	r3, [r3, r2]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	4193      	sbcs	r3, r2
 800177e:	b2db      	uxtb	r3, r3
 8001780:	e013      	b.n	80017aa <HAL_TIM_PWM_Start+0x92>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b10      	cmp	r3, #16
 8001786:	d108      	bne.n	800179a <HAL_TIM_PWM_Start+0x82>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2242      	movs	r2, #66	@ 0x42
 800178c:	5c9b      	ldrb	r3, [r3, r2]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	1e5a      	subs	r2, r3, #1
 8001794:	4193      	sbcs	r3, r2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	e007      	b.n	80017aa <HAL_TIM_PWM_Start+0x92>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2243      	movs	r2, #67	@ 0x43
 800179e:	5c9b      	ldrb	r3, [r3, r2]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3b01      	subs	r3, #1
 80017a4:	1e5a      	subs	r2, r3, #1
 80017a6:	4193      	sbcs	r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e07b      	b.n	80018aa <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d104      	bne.n	80017c2 <HAL_TIM_PWM_Start+0xaa>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	223e      	movs	r2, #62	@ 0x3e
 80017bc:	2102      	movs	r1, #2
 80017be:	5499      	strb	r1, [r3, r2]
 80017c0:	e023      	b.n	800180a <HAL_TIM_PWM_Start+0xf2>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d104      	bne.n	80017d2 <HAL_TIM_PWM_Start+0xba>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	223f      	movs	r2, #63	@ 0x3f
 80017cc:	2102      	movs	r1, #2
 80017ce:	5499      	strb	r1, [r3, r2]
 80017d0:	e01b      	b.n	800180a <HAL_TIM_PWM_Start+0xf2>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d104      	bne.n	80017e2 <HAL_TIM_PWM_Start+0xca>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2240      	movs	r2, #64	@ 0x40
 80017dc:	2102      	movs	r1, #2
 80017de:	5499      	strb	r1, [r3, r2]
 80017e0:	e013      	b.n	800180a <HAL_TIM_PWM_Start+0xf2>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d104      	bne.n	80017f2 <HAL_TIM_PWM_Start+0xda>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2241      	movs	r2, #65	@ 0x41
 80017ec:	2102      	movs	r1, #2
 80017ee:	5499      	strb	r1, [r3, r2]
 80017f0:	e00b      	b.n	800180a <HAL_TIM_PWM_Start+0xf2>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d104      	bne.n	8001802 <HAL_TIM_PWM_Start+0xea>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2242      	movs	r2, #66	@ 0x42
 80017fc:	2102      	movs	r1, #2
 80017fe:	5499      	strb	r1, [r3, r2]
 8001800:	e003      	b.n	800180a <HAL_TIM_PWM_Start+0xf2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2243      	movs	r2, #67	@ 0x43
 8001806:	2102      	movs	r1, #2
 8001808:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	0018      	movs	r0, r3
 8001814:	f000 fe58 	bl	80024c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_TIM_PWM_Start+0x19c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d009      	beq.n	8001836 <HAL_TIM_PWM_Start+0x11e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a24      	ldr	r2, [pc, #144]	@ (80018b8 <HAL_TIM_PWM_Start+0x1a0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d004      	beq.n	8001836 <HAL_TIM_PWM_Start+0x11e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <HAL_TIM_PWM_Start+0x1a4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_TIM_PWM_Start+0x122>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_TIM_PWM_Start+0x124>
 800183a:	2300      	movs	r3, #0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2180      	movs	r1, #128	@ 0x80
 800184c:	0209      	lsls	r1, r1, #8
 800184e:	430a      	orrs	r2, r1
 8001850:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <HAL_TIM_PWM_Start+0x19c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d004      	beq.n	8001866 <HAL_TIM_PWM_Start+0x14e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a17      	ldr	r2, [pc, #92]	@ (80018c0 <HAL_TIM_PWM_Start+0x1a8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d116      	bne.n	8001894 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4a15      	ldr	r2, [pc, #84]	@ (80018c4 <HAL_TIM_PWM_Start+0x1ac>)
 800186e:	4013      	ands	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b06      	cmp	r3, #6
 8001876:	d016      	beq.n	80018a6 <HAL_TIM_PWM_Start+0x18e>
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	025b      	lsls	r3, r3, #9
 800187e:	429a      	cmp	r2, r3
 8001880:	d011      	beq.n	80018a6 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001892:	e008      	b.n	80018a6 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2101      	movs	r1, #1
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e000      	b.n	80018a8 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018a6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b004      	add	sp, #16
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	40012c00 	.word	0x40012c00
 80018b8:	40014400 	.word	0x40014400
 80018bc:	40014800 	.word	0x40014800
 80018c0:	40000400 	.word	0x40000400
 80018c4:	00010007 	.word	0x00010007

080018c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 fdf4 	bl	80024c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a35      	ldr	r2, [pc, #212]	@ (80019bc <HAL_TIM_PWM_Stop+0xf4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d009      	beq.n	80018fe <HAL_TIM_PWM_Stop+0x36>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a34      	ldr	r2, [pc, #208]	@ (80019c0 <HAL_TIM_PWM_Stop+0xf8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d004      	beq.n	80018fe <HAL_TIM_PWM_Stop+0x36>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a32      	ldr	r2, [pc, #200]	@ (80019c4 <HAL_TIM_PWM_Stop+0xfc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_TIM_PWM_Stop+0x3a>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_TIM_PWM_Stop+0x3c>
 8001902:	2300      	movs	r3, #0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a2e      	ldr	r2, [pc, #184]	@ (80019c8 <HAL_TIM_PWM_Stop+0x100>)
 8001910:	4013      	ands	r3, r2
 8001912:	d10d      	bne.n	8001930 <HAL_TIM_PWM_Stop+0x68>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a2c      	ldr	r2, [pc, #176]	@ (80019cc <HAL_TIM_PWM_Stop+0x104>)
 800191c:	4013      	ands	r3, r2
 800191e:	d107      	bne.n	8001930 <HAL_TIM_PWM_Stop+0x68>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4929      	ldr	r1, [pc, #164]	@ (80019d0 <HAL_TIM_PWM_Stop+0x108>)
 800192c:	400a      	ands	r2, r1
 800192e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a24      	ldr	r2, [pc, #144]	@ (80019c8 <HAL_TIM_PWM_Stop+0x100>)
 8001938:	4013      	ands	r3, r2
 800193a:	d10d      	bne.n	8001958 <HAL_TIM_PWM_Stop+0x90>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a22      	ldr	r2, [pc, #136]	@ (80019cc <HAL_TIM_PWM_Stop+0x104>)
 8001944:	4013      	ands	r3, r2
 8001946:	d107      	bne.n	8001958 <HAL_TIM_PWM_Stop+0x90>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2101      	movs	r1, #1
 8001954:	438a      	bics	r2, r1
 8001956:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d104      	bne.n	8001968 <HAL_TIM_PWM_Stop+0xa0>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	223e      	movs	r2, #62	@ 0x3e
 8001962:	2101      	movs	r1, #1
 8001964:	5499      	strb	r1, [r3, r2]
 8001966:	e023      	b.n	80019b0 <HAL_TIM_PWM_Stop+0xe8>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b04      	cmp	r3, #4
 800196c:	d104      	bne.n	8001978 <HAL_TIM_PWM_Stop+0xb0>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	223f      	movs	r2, #63	@ 0x3f
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]
 8001976:	e01b      	b.n	80019b0 <HAL_TIM_PWM_Stop+0xe8>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b08      	cmp	r3, #8
 800197c:	d104      	bne.n	8001988 <HAL_TIM_PWM_Stop+0xc0>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2240      	movs	r2, #64	@ 0x40
 8001982:	2101      	movs	r1, #1
 8001984:	5499      	strb	r1, [r3, r2]
 8001986:	e013      	b.n	80019b0 <HAL_TIM_PWM_Stop+0xe8>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d104      	bne.n	8001998 <HAL_TIM_PWM_Stop+0xd0>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2241      	movs	r2, #65	@ 0x41
 8001992:	2101      	movs	r1, #1
 8001994:	5499      	strb	r1, [r3, r2]
 8001996:	e00b      	b.n	80019b0 <HAL_TIM_PWM_Stop+0xe8>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d104      	bne.n	80019a8 <HAL_TIM_PWM_Stop+0xe0>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2242      	movs	r2, #66	@ 0x42
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]
 80019a6:	e003      	b.n	80019b0 <HAL_TIM_PWM_Stop+0xe8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2243      	movs	r2, #67	@ 0x43
 80019ac:	2101      	movs	r1, #1
 80019ae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40014400 	.word	0x40014400
 80019c4:	40014800 	.word	0x40014800
 80019c8:	00001111 	.word	0x00001111
 80019cc:	00000444 	.word	0x00000444
 80019d0:	ffff7fff 	.word	0xffff7fff

080019d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e0:	2317      	movs	r3, #23
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	223c      	movs	r2, #60	@ 0x3c
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e0e5      	b.n	8001bc2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	223c      	movs	r2, #60	@ 0x3c
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b14      	cmp	r3, #20
 8001a02:	d900      	bls.n	8001a06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001a04:	e0d1      	b.n	8001baa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	009a      	lsls	r2, r3, #2
 8001a0a:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001a0c:	18d3      	adds	r3, r2, r3
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	0011      	movs	r1, r2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 fa1c 	bl	8001e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2108      	movs	r1, #8
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6999      	ldr	r1, [r3, #24]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	619a      	str	r2, [r3, #24]
      break;
 8001a52:	e0af      	b.n	8001bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 fa7b 	bl	8001f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	0109      	lsls	r1, r1, #4
 8001a70:	430a      	orrs	r2, r1
 8001a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4954      	ldr	r1, [pc, #336]	@ (8001bd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6999      	ldr	r1, [r3, #24]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	021a      	lsls	r2, r3, #8
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	619a      	str	r2, [r3, #24]
      break;
 8001a98:	e08c      	b.n	8001bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	0011      	movs	r1, r2
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 fad6 	bl	8002054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69da      	ldr	r2, [r3, #28]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69d9      	ldr	r1, [r3, #28]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	61da      	str	r2, [r3, #28]
      break;
 8001ada:	e06b      	b.n	8001bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 fb37 	bl	8002158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69da      	ldr	r2, [r3, #28]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	0109      	lsls	r1, r1, #4
 8001af8:	430a      	orrs	r2, r1
 8001afa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4932      	ldr	r1, [pc, #200]	@ (8001bd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69d9      	ldr	r1, [r3, #28]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	021a      	lsls	r2, r3, #8
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	61da      	str	r2, [r3, #28]
      break;
 8001b20:	e048      	b.n	8001bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	0011      	movs	r1, r2
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fb78 	bl	8002220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2108      	movs	r1, #8
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001b62:	e027      	b.n	8001bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 fbb1 	bl	80022d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	0109      	lsls	r1, r1, #4
 8001b80:	430a      	orrs	r2, r1
 8001b82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4910      	ldr	r1, [pc, #64]	@ (8001bd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	021a      	lsls	r2, r3, #8
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001ba8:	e004      	b.n	8001bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001baa:	2317      	movs	r3, #23
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
      break;
 8001bb2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	223c      	movs	r2, #60	@ 0x3c
 8001bb8:	2100      	movs	r1, #0
 8001bba:	5499      	strb	r1, [r3, r2]

  return status;
 8001bbc:	2317      	movs	r3, #23
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	781b      	ldrb	r3, [r3, #0]
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b006      	add	sp, #24
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	08002830 	.word	0x08002830
 8001bd0:	fffffbff 	.word	0xfffffbff

08001bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bde:	230f      	movs	r3, #15
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	223c      	movs	r2, #60	@ 0x3c
 8001bea:	5c9b      	ldrb	r3, [r3, r2]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_TIM_ConfigClockSource+0x20>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e0bc      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	223c      	movs	r2, #60	@ 0x3c
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	223d      	movs	r2, #61	@ 0x3d
 8001c00:	2102      	movs	r1, #2
 8001c02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001d78 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4a59      	ldr	r2, [pc, #356]	@ (8001d7c <HAL_TIM_ConfigClockSource+0x1a8>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2280      	movs	r2, #128	@ 0x80
 8001c2a:	0192      	lsls	r2, r2, #6
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d040      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0xde>
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	0192      	lsls	r2, r2, #6
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d900      	bls.n	8001c3a <HAL_TIM_ConfigClockSource+0x66>
 8001c38:	e088      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x178>
 8001c3a:	2280      	movs	r2, #128	@ 0x80
 8001c3c:	0152      	lsls	r2, r2, #5
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d100      	bne.n	8001c44 <HAL_TIM_ConfigClockSource+0x70>
 8001c42:	e088      	b.n	8001d56 <HAL_TIM_ConfigClockSource+0x182>
 8001c44:	2280      	movs	r2, #128	@ 0x80
 8001c46:	0152      	lsls	r2, r2, #5
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d900      	bls.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
 8001c4c:	e07e      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x178>
 8001c4e:	2b70      	cmp	r3, #112	@ 0x70
 8001c50:	d018      	beq.n	8001c84 <HAL_TIM_ConfigClockSource+0xb0>
 8001c52:	d900      	bls.n	8001c56 <HAL_TIM_ConfigClockSource+0x82>
 8001c54:	e07a      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x178>
 8001c56:	2b60      	cmp	r3, #96	@ 0x60
 8001c58:	d04f      	beq.n	8001cfa <HAL_TIM_ConfigClockSource+0x126>
 8001c5a:	d900      	bls.n	8001c5e <HAL_TIM_ConfigClockSource+0x8a>
 8001c5c:	e076      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x178>
 8001c5e:	2b50      	cmp	r3, #80	@ 0x50
 8001c60:	d03b      	beq.n	8001cda <HAL_TIM_ConfigClockSource+0x106>
 8001c62:	d900      	bls.n	8001c66 <HAL_TIM_ConfigClockSource+0x92>
 8001c64:	e072      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x178>
 8001c66:	2b40      	cmp	r3, #64	@ 0x40
 8001c68:	d057      	beq.n	8001d1a <HAL_TIM_ConfigClockSource+0x146>
 8001c6a:	d900      	bls.n	8001c6e <HAL_TIM_ConfigClockSource+0x9a>
 8001c6c:	e06e      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x178>
 8001c6e:	2b30      	cmp	r3, #48	@ 0x30
 8001c70:	d063      	beq.n	8001d3a <HAL_TIM_ConfigClockSource+0x166>
 8001c72:	d86b      	bhi.n	8001d4c <HAL_TIM_ConfigClockSource+0x178>
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d060      	beq.n	8001d3a <HAL_TIM_ConfigClockSource+0x166>
 8001c78:	d868      	bhi.n	8001d4c <HAL_TIM_ConfigClockSource+0x178>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d05d      	beq.n	8001d3a <HAL_TIM_ConfigClockSource+0x166>
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d05b      	beq.n	8001d3a <HAL_TIM_ConfigClockSource+0x166>
 8001c82:	e063      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c94:	f000 fbf8 	bl	8002488 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2277      	movs	r2, #119	@ 0x77
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	609a      	str	r2, [r3, #8]
      break;
 8001cb0:	e052      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cc2:	f000 fbe1 	bl	8002488 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2180      	movs	r1, #128	@ 0x80
 8001cd2:	01c9      	lsls	r1, r1, #7
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
      break;
 8001cd8:	e03e      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ce6:	001a      	movs	r2, r3
 8001ce8:	f000 fb52 	bl	8002390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2150      	movs	r1, #80	@ 0x50
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 fbac 	bl	8002450 <TIM_ITRx_SetConfig>
      break;
 8001cf8:	e02e      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d06:	001a      	movs	r2, r3
 8001d08:	f000 fb70 	bl	80023ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2160      	movs	r1, #96	@ 0x60
 8001d12:	0018      	movs	r0, r3
 8001d14:	f000 fb9c 	bl	8002450 <TIM_ITRx_SetConfig>
      break;
 8001d18:	e01e      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d26:	001a      	movs	r2, r3
 8001d28:	f000 fb32 	bl	8002390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2140      	movs	r1, #64	@ 0x40
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 fb8c 	bl	8002450 <TIM_ITRx_SetConfig>
      break;
 8001d38:	e00e      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0019      	movs	r1, r3
 8001d44:	0010      	movs	r0, r2
 8001d46:	f000 fb83 	bl	8002450 <TIM_ITRx_SetConfig>
      break;
 8001d4a:	e005      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
      break;
 8001d54:	e000      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001d56:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	223d      	movs	r2, #61	@ 0x3d
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	223c      	movs	r2, #60	@ 0x3c
 8001d64:	2100      	movs	r1, #0
 8001d66:	5499      	strb	r1, [r3, r2]

  return status;
 8001d68:	230f      	movs	r3, #15
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	ffceff88 	.word	0xffceff88
 8001d7c:	ffff00ff 	.word	0xffff00ff

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a2b      	ldr	r2, [pc, #172]	@ (8001e40 <TIM_Base_SetConfig+0xc0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d003      	beq.n	8001da0 <TIM_Base_SetConfig+0x20>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001e44 <TIM_Base_SetConfig+0xc4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d108      	bne.n	8001db2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2270      	movs	r2, #112	@ 0x70
 8001da4:	4393      	bics	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a22      	ldr	r2, [pc, #136]	@ (8001e40 <TIM_Base_SetConfig+0xc0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00f      	beq.n	8001dda <TIM_Base_SetConfig+0x5a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a21      	ldr	r2, [pc, #132]	@ (8001e44 <TIM_Base_SetConfig+0xc4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00b      	beq.n	8001dda <TIM_Base_SetConfig+0x5a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a20      	ldr	r2, [pc, #128]	@ (8001e48 <TIM_Base_SetConfig+0xc8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <TIM_Base_SetConfig+0x5a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <TIM_Base_SetConfig+0xcc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d003      	beq.n	8001dda <TIM_Base_SetConfig+0x5a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e50 <TIM_Base_SetConfig+0xd0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d108      	bne.n	8001dec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e54 <TIM_Base_SetConfig+0xd4>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2280      	movs	r2, #128	@ 0x80
 8001df0:	4393      	bics	r3, r2
 8001df2:	001a      	movs	r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <TIM_Base_SetConfig+0xc0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <TIM_Base_SetConfig+0xaa>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e4c <TIM_Base_SetConfig+0xcc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d003      	beq.n	8001e2a <TIM_Base_SetConfig+0xaa>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <TIM_Base_SetConfig+0xd0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d103      	bne.n	8001e32 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	615a      	str	r2, [r3, #20]
}
 8001e38:	46c0      	nop			@ (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b004      	add	sp, #16
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40002000 	.word	0x40002000
 8001e4c:	40014400 	.word	0x40014400
 8001e50:	40014800 	.word	0x40014800
 8001e54:	fffffcff 	.word	0xfffffcff

08001e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4393      	bics	r3, r2
 8001e70:	001a      	movs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4a2e      	ldr	r2, [pc, #184]	@ (8001f40 <TIM_OC1_SetConfig+0xe8>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	4393      	bics	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	4393      	bics	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	@ (8001f44 <TIM_OC1_SetConfig+0xec>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <TIM_OC1_SetConfig+0x6e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a23      	ldr	r2, [pc, #140]	@ (8001f48 <TIM_OC1_SetConfig+0xf0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d003      	beq.n	8001ec6 <TIM_OC1_SetConfig+0x6e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	@ (8001f4c <TIM_OC1_SetConfig+0xf4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10c      	bne.n	8001ee0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4393      	bics	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2204      	movs	r2, #4
 8001edc:	4393      	bics	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a18      	ldr	r2, [pc, #96]	@ (8001f44 <TIM_OC1_SetConfig+0xec>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d007      	beq.n	8001ef8 <TIM_OC1_SetConfig+0xa0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a17      	ldr	r2, [pc, #92]	@ (8001f48 <TIM_OC1_SetConfig+0xf0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <TIM_OC1_SetConfig+0xa0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a16      	ldr	r2, [pc, #88]	@ (8001f4c <TIM_OC1_SetConfig+0xf4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d111      	bne.n	8001f1c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4a15      	ldr	r2, [pc, #84]	@ (8001f50 <TIM_OC1_SetConfig+0xf8>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4a14      	ldr	r2, [pc, #80]	@ (8001f54 <TIM_OC1_SetConfig+0xfc>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	621a      	str	r2, [r3, #32]
}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b006      	add	sp, #24
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	fffeff8f 	.word	0xfffeff8f
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40014400 	.word	0x40014400
 8001f4c:	40014800 	.word	0x40014800
 8001f50:	fffffeff 	.word	0xfffffeff
 8001f54:	fffffdff 	.word	0xfffffdff

08001f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	4393      	bics	r3, r2
 8001f70:	001a      	movs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a2c      	ldr	r2, [pc, #176]	@ (8002038 <TIM_OC2_SetConfig+0xe0>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800203c <TIM_OC2_SetConfig+0xe4>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a22      	ldr	r2, [pc, #136]	@ (8002040 <TIM_OC2_SetConfig+0xe8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d10d      	bne.n	8001fd6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2280      	movs	r2, #128	@ 0x80
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2240      	movs	r2, #64	@ 0x40
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	@ (8002040 <TIM_OC2_SetConfig+0xe8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_OC2_SetConfig+0x96>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <TIM_OC2_SetConfig+0xec>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_OC2_SetConfig+0x96>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a17      	ldr	r2, [pc, #92]	@ (8002048 <TIM_OC2_SetConfig+0xf0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d113      	bne.n	8002016 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a16      	ldr	r2, [pc, #88]	@ (800204c <TIM_OC2_SetConfig+0xf4>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4a15      	ldr	r2, [pc, #84]	@ (8002050 <TIM_OC2_SetConfig+0xf8>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	621a      	str	r2, [r3, #32]
}
 8002030:	46c0      	nop			@ (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b006      	add	sp, #24
 8002036:	bd80      	pop	{r7, pc}
 8002038:	feff8fff 	.word	0xfeff8fff
 800203c:	fffffcff 	.word	0xfffffcff
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40014400 	.word	0x40014400
 8002048:	40014800 	.word	0x40014800
 800204c:	fffffbff 	.word	0xfffffbff
 8002050:	fffff7ff 	.word	0xfffff7ff

08002054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a31      	ldr	r2, [pc, #196]	@ (8002130 <TIM_OC3_SetConfig+0xdc>)
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a2d      	ldr	r2, [pc, #180]	@ (8002134 <TIM_OC3_SetConfig+0xe0>)
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2203      	movs	r2, #3
 8002088:	4393      	bics	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	4a27      	ldr	r2, [pc, #156]	@ (8002138 <TIM_OC3_SetConfig+0xe4>)
 800209a:	4013      	ands	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a23      	ldr	r2, [pc, #140]	@ (800213c <TIM_OC3_SetConfig+0xe8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10d      	bne.n	80020ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	4a22      	ldr	r2, [pc, #136]	@ (8002140 <TIM_OC3_SetConfig+0xec>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002144 <TIM_OC3_SetConfig+0xf0>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <TIM_OC3_SetConfig+0xe8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <TIM_OC3_SetConfig+0x92>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <TIM_OC3_SetConfig+0xf4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d003      	beq.n	80020e6 <TIM_OC3_SetConfig+0x92>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1a      	ldr	r2, [pc, #104]	@ (800214c <TIM_OC3_SetConfig+0xf8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d113      	bne.n	800210e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4a19      	ldr	r2, [pc, #100]	@ (8002150 <TIM_OC3_SetConfig+0xfc>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <TIM_OC3_SetConfig+0x100>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	621a      	str	r2, [r3, #32]
}
 8002128:	46c0      	nop			@ (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b006      	add	sp, #24
 800212e:	bd80      	pop	{r7, pc}
 8002130:	fffffeff 	.word	0xfffffeff
 8002134:	fffeff8f 	.word	0xfffeff8f
 8002138:	fffffdff 	.word	0xfffffdff
 800213c:	40012c00 	.word	0x40012c00
 8002140:	fffff7ff 	.word	0xfffff7ff
 8002144:	fffffbff 	.word	0xfffffbff
 8002148:	40014400 	.word	0x40014400
 800214c:	40014800 	.word	0x40014800
 8002150:	ffffefff 	.word	0xffffefff
 8002154:	ffffdfff 	.word	0xffffdfff

08002158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a24      	ldr	r2, [pc, #144]	@ (8002200 <TIM_OC4_SetConfig+0xa8>)
 800216e:	401a      	ands	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a20      	ldr	r2, [pc, #128]	@ (8002204 <TIM_OC4_SetConfig+0xac>)
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a1f      	ldr	r2, [pc, #124]	@ (8002208 <TIM_OC4_SetConfig+0xb0>)
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4a1b      	ldr	r2, [pc, #108]	@ (800220c <TIM_OC4_SetConfig+0xb4>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	031b      	lsls	r3, r3, #12
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <TIM_OC4_SetConfig+0xb8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d007      	beq.n	80021c8 <TIM_OC4_SetConfig+0x70>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a16      	ldr	r2, [pc, #88]	@ (8002214 <TIM_OC4_SetConfig+0xbc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <TIM_OC4_SetConfig+0x70>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a15      	ldr	r2, [pc, #84]	@ (8002218 <TIM_OC4_SetConfig+0xc0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d109      	bne.n	80021dc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4a14      	ldr	r2, [pc, #80]	@ (800221c <TIM_OC4_SetConfig+0xc4>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	621a      	str	r2, [r3, #32]
}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b006      	add	sp, #24
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	ffffefff 	.word	0xffffefff
 8002204:	feff8fff 	.word	0xfeff8fff
 8002208:	fffffcff 	.word	0xfffffcff
 800220c:	ffffdfff 	.word	0xffffdfff
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40014400 	.word	0x40014400
 8002218:	40014800 	.word	0x40014800
 800221c:	ffffbfff 	.word	0xffffbfff

08002220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a21      	ldr	r2, [pc, #132]	@ (80022bc <TIM_OC5_SetConfig+0x9c>)
 8002236:	401a      	ands	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a1d      	ldr	r2, [pc, #116]	@ (80022c0 <TIM_OC5_SetConfig+0xa0>)
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4a19      	ldr	r2, [pc, #100]	@ (80022c4 <TIM_OC5_SetConfig+0xa4>)
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	041b      	lsls	r3, r3, #16
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <TIM_OC5_SetConfig+0xa8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <TIM_OC5_SetConfig+0x66>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <TIM_OC5_SetConfig+0xac>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_OC5_SetConfig+0x66>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a13      	ldr	r2, [pc, #76]	@ (80022d0 <TIM_OC5_SetConfig+0xb0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d109      	bne.n	800229a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4a0c      	ldr	r2, [pc, #48]	@ (80022bc <TIM_OC5_SetConfig+0x9c>)
 800228a:	4013      	ands	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	621a      	str	r2, [r3, #32]
}
 80022b4:	46c0      	nop			@ (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b006      	add	sp, #24
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	fffeffff 	.word	0xfffeffff
 80022c0:	fffeff8f 	.word	0xfffeff8f
 80022c4:	fffdffff 	.word	0xfffdffff
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40014400 	.word	0x40014400
 80022d0:	40014800 	.word	0x40014800

080022d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <TIM_OC6_SetConfig+0xa0>)
 80022ea:	401a      	ands	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002378 <TIM_OC6_SetConfig+0xa4>)
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <TIM_OC6_SetConfig+0xa8>)
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	051b      	lsls	r3, r3, #20
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <TIM_OC6_SetConfig+0xac>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d007      	beq.n	800233c <TIM_OC6_SetConfig+0x68>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a15      	ldr	r2, [pc, #84]	@ (8002384 <TIM_OC6_SetConfig+0xb0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d003      	beq.n	800233c <TIM_OC6_SetConfig+0x68>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a14      	ldr	r2, [pc, #80]	@ (8002388 <TIM_OC6_SetConfig+0xb4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d109      	bne.n	8002350 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	4a13      	ldr	r2, [pc, #76]	@ (800238c <TIM_OC6_SetConfig+0xb8>)
 8002340:	4013      	ands	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	621a      	str	r2, [r3, #32]
}
 800236a:	46c0      	nop			@ (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b006      	add	sp, #24
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	ffefffff 	.word	0xffefffff
 8002378:	feff8fff 	.word	0xfeff8fff
 800237c:	ffdfffff 	.word	0xffdfffff
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40014400 	.word	0x40014400
 8002388:	40014800 	.word	0x40014800
 800238c:	fffbffff 	.word	0xfffbffff

08002390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4393      	bics	r3, r2
 80023aa:	001a      	movs	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	22f0      	movs	r2, #240	@ 0xf0
 80023ba:	4393      	bics	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	220a      	movs	r2, #10
 80023cc:	4393      	bics	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	621a      	str	r2, [r3, #32]
}
 80023e4:	46c0      	nop			@ (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b006      	add	sp, #24
 80023ea:	bd80      	pop	{r7, pc}

080023ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	2210      	movs	r2, #16
 8002404:	4393      	bics	r3, r2
 8002406:	001a      	movs	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <TIM_TI2_ConfigInputStage+0x60>)
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	031b      	lsls	r3, r3, #12
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	22a0      	movs	r2, #160	@ 0xa0
 8002428:	4393      	bics	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	621a      	str	r2, [r3, #32]
}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b006      	add	sp, #24
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	ffff0fff 	.word	0xffff0fff

08002450 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a08      	ldr	r2, [pc, #32]	@ (8002484 <TIM_ITRx_SetConfig+0x34>)
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	2207      	movs	r2, #7
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	609a      	str	r2, [r3, #8]
}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	ffcfff8f 	.word	0xffcfff8f

08002488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <TIM_ETR_SetConfig+0x3c>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	021a      	lsls	r2, r3, #8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	609a      	str	r2, [r3, #8]
}
 80024bc:	46c0      	nop			@ (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b006      	add	sp, #24
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	ffff00ff 	.word	0xffff00ff

080024c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	221f      	movs	r2, #31
 80024d8:	4013      	ands	r3, r2
 80024da:	2201      	movs	r2, #1
 80024dc:	409a      	lsls	r2, r3
 80024de:	0013      	movs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	43d2      	mvns	r2, r2
 80024ea:	401a      	ands	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	211f      	movs	r1, #31
 80024f8:	400b      	ands	r3, r1
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4099      	lsls	r1, r3
 80024fe:	000b      	movs	r3, r1
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	621a      	str	r2, [r3, #32]
}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b006      	add	sp, #24
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	223c      	movs	r2, #60	@ 0x3c
 800251e:	5c9b      	ldrb	r3, [r3, r2]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002524:	2302      	movs	r3, #2
 8002526:	e04a      	b.n	80025be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	223c      	movs	r2, #60	@ 0x3c
 800252c:	2101      	movs	r1, #1
 800252e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	223d      	movs	r2, #61	@ 0x3d
 8002534:	2102      	movs	r1, #2
 8002536:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1e      	ldr	r2, [pc, #120]	@ (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2270      	movs	r2, #112	@ 0x70
 8002568:	4393      	bics	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a11      	ldr	r2, [pc, #68]	@ (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a10      	ldr	r2, [pc, #64]	@ (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d10c      	bne.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2280      	movs	r2, #128	@ 0x80
 8002596:	4393      	bics	r3, r2
 8002598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	223d      	movs	r2, #61	@ 0x3d
 80025b0:	2101      	movs	r1, #1
 80025b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	223c      	movs	r2, #60	@ 0x3c
 80025b8:	2100      	movs	r1, #0
 80025ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b004      	add	sp, #16
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	ff0fffff 	.word	0xff0fffff
 80025d0:	40000400 	.word	0x40000400

080025d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	223c      	movs	r2, #60	@ 0x3c
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e079      	b.n	80026e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223c      	movs	r2, #60	@ 0x3c
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	22ff      	movs	r2, #255	@ 0xff
 80025fc:	4393      	bics	r3, r2
 80025fe:	001a      	movs	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a38      	ldr	r2, [pc, #224]	@ (80026ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800260c:	401a      	ands	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a35      	ldr	r2, [pc, #212]	@ (80026f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800261a:	401a      	ands	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a33      	ldr	r2, [pc, #204]	@ (80026f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002628:	401a      	ands	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4a30      	ldr	r2, [pc, #192]	@ (80026f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002636:	401a      	ands	r2, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a2e      	ldr	r2, [pc, #184]	@ (80026fc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002644:	401a      	ands	r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a2b      	ldr	r2, [pc, #172]	@ (8002700 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002652:	401a      	ands	r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002658:	4313      	orrs	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4a29      	ldr	r2, [pc, #164]	@ (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002660:	401a      	ands	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a25      	ldr	r2, [pc, #148]	@ (8002708 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d106      	bne.n	8002684 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a24      	ldr	r2, [pc, #144]	@ (800270c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800267a:	401a      	ands	r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1f      	ldr	r2, [pc, #124]	@ (8002708 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d121      	bne.n	80026d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002692:	401a      	ands	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	051b      	lsls	r3, r3, #20
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002714 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80026a2:	401a      	ands	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002718 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80026b0:	401a      	ands	r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d106      	bne.n	80026d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a15      	ldr	r2, [pc, #84]	@ (800271c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80026c8:	401a      	ands	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223c      	movs	r2, #60	@ 0x3c
 80026de:	2100      	movs	r1, #0
 80026e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b004      	add	sp, #16
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	fffffcff 	.word	0xfffffcff
 80026f0:	fffffbff 	.word	0xfffffbff
 80026f4:	fffff7ff 	.word	0xfffff7ff
 80026f8:	ffffefff 	.word	0xffffefff
 80026fc:	ffffdfff 	.word	0xffffdfff
 8002700:	ffffbfff 	.word	0xffffbfff
 8002704:	fff0ffff 	.word	0xfff0ffff
 8002708:	40012c00 	.word	0x40012c00
 800270c:	efffffff 	.word	0xefffffff
 8002710:	ff0fffff 	.word	0xff0fffff
 8002714:	feffffff 	.word	0xfeffffff
 8002718:	fdffffff 	.word	0xfdffffff
 800271c:	dfffffff 	.word	0xdfffffff

08002720 <memset>:
 8002720:	0003      	movs	r3, r0
 8002722:	1882      	adds	r2, r0, r2
 8002724:	4293      	cmp	r3, r2
 8002726:	d100      	bne.n	800272a <memset+0xa>
 8002728:	4770      	bx	lr
 800272a:	7019      	strb	r1, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	e7f9      	b.n	8002724 <memset+0x4>

08002730 <__libc_init_array>:
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	2600      	movs	r6, #0
 8002734:	4c0c      	ldr	r4, [pc, #48]	@ (8002768 <__libc_init_array+0x38>)
 8002736:	4d0d      	ldr	r5, [pc, #52]	@ (800276c <__libc_init_array+0x3c>)
 8002738:	1b64      	subs	r4, r4, r5
 800273a:	10a4      	asrs	r4, r4, #2
 800273c:	42a6      	cmp	r6, r4
 800273e:	d109      	bne.n	8002754 <__libc_init_array+0x24>
 8002740:	2600      	movs	r6, #0
 8002742:	f000 f819 	bl	8002778 <_init>
 8002746:	4c0a      	ldr	r4, [pc, #40]	@ (8002770 <__libc_init_array+0x40>)
 8002748:	4d0a      	ldr	r5, [pc, #40]	@ (8002774 <__libc_init_array+0x44>)
 800274a:	1b64      	subs	r4, r4, r5
 800274c:	10a4      	asrs	r4, r4, #2
 800274e:	42a6      	cmp	r6, r4
 8002750:	d105      	bne.n	800275e <__libc_init_array+0x2e>
 8002752:	bd70      	pop	{r4, r5, r6, pc}
 8002754:	00b3      	lsls	r3, r6, #2
 8002756:	58eb      	ldr	r3, [r5, r3]
 8002758:	4798      	blx	r3
 800275a:	3601      	adds	r6, #1
 800275c:	e7ee      	b.n	800273c <__libc_init_array+0xc>
 800275e:	00b3      	lsls	r3, r6, #2
 8002760:	58eb      	ldr	r3, [r5, r3]
 8002762:	4798      	blx	r3
 8002764:	3601      	adds	r6, #1
 8002766:	e7f2      	b.n	800274e <__libc_init_array+0x1e>
 8002768:	08002884 	.word	0x08002884
 800276c:	08002884 	.word	0x08002884
 8002770:	08002888 	.word	0x08002888
 8002774:	08002884 	.word	0x08002884

08002778 <_init>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr

08002784 <_fini>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr
