
Xmas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002914  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080029d4  080029d4  000039d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af8  08002af8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002af8  08002af8  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002af8  08002af8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af8  08002af8  00003af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002afc  08002afc  00003afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  08002b0c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08002b0c  000041ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ff1  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c4  00000000  00000000  0001b025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000bde2  00000000  00000000  0001d9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  000297d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128f  00000000  00000000  0002a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000131a2  00000000  00000000  0002b69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019220  00000000  00000000  0003e841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ae44  00000000  00000000  00057a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d28a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021cc  00000000  00000000  000d28e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000d4ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029bc 	.word	0x080029bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080029bc 	.word	0x080029bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b500      	push	{lr}
 80003f6:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f8:	2218      	movs	r2, #24
 80003fa:	2100      	movs	r1, #0
 80003fc:	a806      	add	r0, sp, #24
 80003fe:	f002 fab1 	bl	8002964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000402:	2214      	movs	r2, #20
 8000404:	2100      	movs	r1, #0
 8000406:	4668      	mov	r0, sp
 8000408:	f002 faac 	bl	8002964 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040c:	2302      	movs	r3, #2
 800040e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	33fe      	adds	r3, #254	@ 0xfe
 8000412:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	3bc0      	subs	r3, #192	@ 0xc0
 8000418:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f000 fe7d 	bl	8001118 <HAL_RCC_OscConfig>
 800041e:	2800      	cmp	r0, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000422:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	2207      	movs	r2, #7
 8000428:	2300      	movs	r3, #0
 800042a:	9200      	str	r2, [sp, #0]
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2200      	movs	r2, #0
 8000430:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000432:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000434:	2101      	movs	r1, #1
 8000436:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	9202      	str	r2, [sp, #8]
 800043a:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800043c:	f000 ffb4 	bl	80013a8 <HAL_RCC_ClockConfig>
 8000440:	2800      	cmp	r0, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x54>
 8000444:	b672      	cpsid	i
  while (1)
 8000446:	e7fe      	b.n	8000446 <SystemClock_Config+0x52>
}
 8000448:	b00d      	add	sp, #52	@ 0x34
 800044a:	bd00      	pop	{pc}

0800044c <begin>:
{
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	4645      	mov	r5, r8
 8000450:	4690      	mov	r8, r2
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 8000452:	220c      	movs	r2, #12
{
 8000454:	46de      	mov	lr, fp
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 800045a:	4693      	mov	fp, r2
 800045c:	4a23      	ldr	r2, [pc, #140]	@ (80004ec <begin+0xa0>)
{
 800045e:	4689      	mov	r9, r1
 8000460:	4692      	mov	sl, r2
			buffer[i + 2] = 6;
 8000462:	2406      	movs	r4, #6
{
 8000464:	b5e0      	push	{r5, r6, r7, lr}
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 8000466:	6803      	ldr	r3, [r0, #0]
{
 8000468:	b083      	sub	sp, #12
 800046a:	9001      	str	r0, [sp, #4]
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 800046c:	2205      	movs	r2, #5
	__HAL_TIM_SET_AUTORELOAD(_htim, 9);
 800046e:	9901      	ldr	r1, [sp, #4]
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 8000470:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(_htim, 9);
 8000472:	3204      	adds	r2, #4
 8000474:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000476:	60ca      	str	r2, [r1, #12]
	__HAL_TIM_ENABLE_DMA(_htim, TIM_DMA_CC1);
 8000478:	68d9      	ldr	r1, [r3, #12]
 800047a:	32f8      	adds	r2, #248	@ 0xf8
 800047c:	32ff      	adds	r2, #255	@ 0xff
 800047e:	430a      	orrs	r2, r1
 8000480:	4656      	mov	r6, sl
 8000482:	60da      	str	r2, [r3, #12]
		uint8_t bit = (colorRGB >> (23-i) & 1);
 8000484:	2001      	movs	r0, #1
 8000486:	4653      	mov	r3, sl
	__HAL_TIM_ENABLE_DMA(_htim, TIM_DMA_CC1);
 8000488:	2217      	movs	r2, #23
			buffer[i + 2] = 6;
 800048a:	2703      	movs	r7, #3
		uint8_t bit = (colorRGB >> (23-i) & 1);
 800048c:	4d18      	ldr	r5, [pc, #96]	@ (80004f0 <begin+0xa4>)
 800048e:	3630      	adds	r6, #48	@ 0x30
 8000490:	0029      	movs	r1, r5
 8000492:	40d1      	lsrs	r1, r2
		if(bit == 1)
 8000494:	4208      	tst	r0, r1
 8000496:	d123      	bne.n	80004e0 <begin+0x94>
			buffer[i + 2] = 6;
 8000498:	801f      	strh	r7, [r3, #0]
	for(int i = 0; i < 24 ; i++)
 800049a:	3302      	adds	r3, #2
 800049c:	3a01      	subs	r2, #1
 800049e:	429e      	cmp	r6, r3
 80004a0:	d1f6      	bne.n	8000490 <begin+0x44>
	HAL_TIM_PWM_Start_DMA(_htim, channel, (uint32_t*)buffer, 28);
 80004a2:	9d01      	ldr	r5, [sp, #4]
 80004a4:	231c      	movs	r3, #28
 80004a6:	4641      	mov	r1, r8
 80004a8:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <begin+0xa8>)
 80004aa:	0028      	movs	r0, r5
 80004ac:	f001 fa78 	bl	80019a0 <HAL_TIM_PWM_Start_DMA>
	HAL_DMA_PollForTransfer(_dmahtim, HAL_DMA_FULL_TRANSFER  , 2);
 80004b0:	2202      	movs	r2, #2
 80004b2:	2100      	movs	r1, #0
 80004b4:	4648      	mov	r0, r9
 80004b6:	f000 fc25 	bl	8000d04 <HAL_DMA_PollForTransfer>
	__HAL_TIM_DISABLE_DMA(_htim, TIM_DMA_CC1);
 80004ba:	682b      	ldr	r3, [r5, #0]
 80004bc:	490e      	ldr	r1, [pc, #56]	@ (80004f8 <begin+0xac>)
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	400a      	ands	r2, r1
 80004c2:	60da      	str	r2, [r3, #12]
	for(int j = 0; j < 12; j ++)
 80004c4:	2201      	movs	r2, #1
 80004c6:	4252      	negs	r2, r2
 80004c8:	4694      	mov	ip, r2
 80004ca:	44e3      	add	fp, ip
 80004cc:	465a      	mov	r2, fp
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	d1cc      	bne.n	800046c <begin+0x20>
}
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			buffer[i + 2] = 6;
 80004e0:	801c      	strh	r4, [r3, #0]
	for(int i = 0; i < 24 ; i++)
 80004e2:	3302      	adds	r3, #2
 80004e4:	3a01      	subs	r2, #1
 80004e6:	429e      	cmp	r6, r3
 80004e8:	d1d2      	bne.n	8000490 <begin+0x44>
 80004ea:	e7da      	b.n	80004a2 <begin+0x56>
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	00150515 	.word	0x00150515
 80004f4:	20000028 	.word	0x20000028
 80004f8:	fffffdff 	.word	0xfffffdff

080004fc <main>:
{
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	46c6      	mov	lr, r8
 8000500:	b500      	push	{lr}
 8000502:	b0a0      	sub	sp, #128	@ 0x80
  HAL_Init();
 8000504:	f000 fab0 	bl	8000a68 <HAL_Init>
  HAL_TIM_PWM_DeInit(&htim1);
 8000508:	4f9a      	ldr	r7, [pc, #616]	@ (8000774 <main+0x278>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4c9b      	ldr	r4, [pc, #620]	@ (8000778 <main+0x27c>)
  HAL_TIM_PWM_DeInit(&htim1);
 800050c:	0038      	movs	r0, r7
 800050e:	f001 fa11 	bl	8001934 <HAL_TIM_PWM_DeInit>
  SystemClock_Config();
 8000512:	f7ff ff6f 	bl	80003f4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	2214      	movs	r2, #20
 8000518:	2100      	movs	r1, #0
 800051a:	a813      	add	r0, sp, #76	@ 0x4c
 800051c:	f002 fa22 	bl	8002964 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	2302      	movs	r3, #2
 8000522:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	431a      	orrs	r2, r3
 8000528:	6362      	str	r2, [r4, #52]	@ 0x34
 800052a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 800052c:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	4013      	ands	r3, r2
 8000530:	9302      	str	r3, [sp, #8]
 8000532:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000534:	2304      	movs	r3, #4
 8000536:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 8000538:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	431a      	orrs	r2, r3
 800053c:	6362      	str	r2, [r4, #52]	@ 0x34
 800053e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 8000540:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	4013      	ands	r3, r2
 8000544:	9303      	str	r3, [sp, #12]
 8000546:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	432b      	orrs	r3, r5
 800054e:	6363      	str	r3, [r4, #52]	@ 0x34
 8000550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	402b      	ands	r3, r5
 8000556:	9304      	str	r3, [sp, #16]
 8000558:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 800055a:	f000 fdd7 	bl	800110c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PERIPH_SUPLLY_Pin;
 800055e:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 8000560:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = PERIPH_SUPLLY_Pin;
 8000562:	9313      	str	r3, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 8000564:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000566:	3b6f      	subs	r3, #111	@ 0x6f
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 8000568:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800056a:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800056c:	9515      	str	r5, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	9616      	str	r6, [sp, #88]	@ 0x58
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 8000570:	f000 fcca 	bl	8000f08 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000574:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000578:	432b      	orrs	r3, r5
 800057a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800057c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800057e:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000580:	401d      	ands	r5, r3
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000582:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000584:	9501      	str	r5, [sp, #4]
 8000586:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000588:	f000 fa8c 	bl	8000aa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800058c:	2009      	movs	r0, #9
 800058e:	f000 fab3 	bl	8000af8 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	2210      	movs	r2, #16
 8000594:	2100      	movs	r1, #0
 8000596:	a80c      	add	r0, sp, #48	@ 0x30
 8000598:	f002 f9e4 	bl	8002964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059c:	220c      	movs	r2, #12
 800059e:	2100      	movs	r1, #0
 80005a0:	a808      	add	r0, sp, #32
 80005a2:	f002 f9df 	bl	8002964 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a6:	221c      	movs	r2, #28
 80005a8:	2100      	movs	r1, #0
 80005aa:	a813      	add	r0, sp, #76	@ 0x4c
 80005ac:	f002 f9da 	bl	8002964 <memset>
  htim3.Instance = TIM3;
 80005b0:	4c72      	ldr	r4, [pc, #456]	@ (800077c <main+0x280>)
 80005b2:	4b73      	ldr	r3, [pc, #460]	@ (8000780 <main+0x284>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005b4:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 80005b6:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 5;
 80005b8:	2305      	movs	r3, #5
 80005ba:	6063      	str	r3, [r4, #4]
  htim3.Init.Period = 9;
 80005bc:	3304      	adds	r3, #4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005be:	60a6      	str	r6, [r4, #8]
  htim3.Init.Period = 9;
 80005c0:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c2:	6126      	str	r6, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005c6:	f001 f8bd 	bl	8001744 <HAL_TIM_Base_Init>
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d001      	beq.n	80005d2 <main+0xd6>
 80005ce:	b672      	cpsid	i
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0xd4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d2:	2680      	movs	r6, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005d4:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d6:	0176      	lsls	r6, r6, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005d8:	a90c      	add	r1, sp, #48	@ 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005da:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005dc:	f001 fc7c 	bl	8001ed8 <HAL_TIM_ConfigClockSource>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d001      	beq.n	80005e8 <main+0xec>
 80005e4:	b672      	cpsid	i
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <main+0xea>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005e8:	0020      	movs	r0, r4
 80005ea:	f001 f927 	bl	800183c <HAL_TIM_PWM_Init>
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d001      	beq.n	80005f6 <main+0xfa>
 80005f2:	b672      	cpsid	i
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0xf8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f6:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f8:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005fa:	a908      	add	r1, sp, #32
 80005fc:	0020      	movs	r0, r4
 80005fe:	f001 fdaf 	bl	8002160 <HAL_TIMEx_MasterConfigSynchronization>
 8000602:	1e02      	subs	r2, r0, #0
 8000604:	d001      	beq.n	800060a <main+0x10e>
 8000606:	b672      	cpsid	i
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x10c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060a:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 800060c:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800060e:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000610:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000612:	a913      	add	r1, sp, #76	@ 0x4c
 8000614:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000616:	4698      	mov	r8, r3
 8000618:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800061a:	f001 fab9 	bl	8001b90 <HAL_TIM_PWM_ConfigChannel>
 800061e:	1e05      	subs	r5, r0, #0
 8000620:	d001      	beq.n	8000626 <main+0x12a>
 8000622:	b672      	cpsid	i
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x128>
  HAL_TIM_MspPostInit(&htim3);
 8000626:	0020      	movs	r0, r4
 8000628:	f000 f91a 	bl	8000860 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062c:	2210      	movs	r2, #16
 800062e:	0029      	movs	r1, r5
 8000630:	a808      	add	r0, sp, #32
 8000632:	f002 f997 	bl	8002964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000636:	220c      	movs	r2, #12
 8000638:	0029      	movs	r1, r5
 800063a:	a805      	add	r0, sp, #20
 800063c:	f002 f992 	bl	8002964 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000640:	221c      	movs	r2, #28
 8000642:	0029      	movs	r1, r5
 8000644:	a80c      	add	r0, sp, #48	@ 0x30
 8000646:	f002 f98d 	bl	8002964 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800064a:	2234      	movs	r2, #52	@ 0x34
 800064c:	0029      	movs	r1, r5
 800064e:	a813      	add	r0, sp, #76	@ 0x4c
 8000650:	f002 f988 	bl	8002964 <memset>
  htim1.Instance = TIM1;
 8000654:	4b4b      	ldr	r3, [pc, #300]	@ (8000784 <main+0x288>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000656:	0038      	movs	r0, r7
  htim1.Instance = TIM1;
 8000658:	603b      	str	r3, [r7, #0]
  htim1.Init.Prescaler = 479;
 800065a:	23e0      	movs	r3, #224	@ 0xe0
 800065c:	33ff      	adds	r3, #255	@ 0xff
 800065e:	607b      	str	r3, [r7, #4]
  htim1.Init.Period = 50;
 8000660:	3bae      	subs	r3, #174	@ 0xae
 8000662:	3bff      	subs	r3, #255	@ 0xff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000664:	60bd      	str	r5, [r7, #8]
  htim1.Init.Period = 50;
 8000666:	60fb      	str	r3, [r7, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	613d      	str	r5, [r7, #16]
  htim1.Init.RepetitionCounter = 0;
 800066a:	617d      	str	r5, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066c:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800066e:	f001 f869 	bl	8001744 <HAL_TIM_Base_Init>
 8000672:	2800      	cmp	r0, #0
 8000674:	d001      	beq.n	800067a <main+0x17e>
 8000676:	b672      	cpsid	i
  while (1)
 8000678:	e7fe      	b.n	8000678 <main+0x17c>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800067a:	0038      	movs	r0, r7
 800067c:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067e:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000680:	f001 fc2a 	bl	8001ed8 <HAL_TIM_ConfigClockSource>
 8000684:	2800      	cmp	r0, #0
 8000686:	d001      	beq.n	800068c <main+0x190>
 8000688:	b672      	cpsid	i
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x18e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800068c:	0038      	movs	r0, r7
 800068e:	f001 f8d5 	bl	800183c <HAL_TIM_PWM_Init>
 8000692:	2800      	cmp	r0, #0
 8000694:	d001      	beq.n	800069a <main+0x19e>
 8000696:	b672      	cpsid	i
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x19c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800069c:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a0:	a905      	add	r1, sp, #20
 80006a2:	0038      	movs	r0, r7
 80006a4:	f001 fd5c 	bl	8002160 <HAL_TIMEx_MasterConfigSynchronization>
 80006a8:	1e02      	subs	r2, r0, #0
 80006aa:	d001      	beq.n	80006b0 <main+0x1b4>
 80006ac:	b672      	cpsid	i
  while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0x1b2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b0:	4643      	mov	r3, r8
  sConfigOC.Pulse = 0;
 80006b2:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b4:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b6:	900f      	str	r0, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b8:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ba:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006bc:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006be:	a90c      	add	r1, sp, #48	@ 0x30
 80006c0:	0038      	movs	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c2:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c4:	f001 fa64 	bl	8001b90 <HAL_TIM_PWM_ConfigChannel>
 80006c8:	2800      	cmp	r0, #0
 80006ca:	d001      	beq.n	80006d0 <main+0x1d4>
 80006cc:	b672      	cpsid	i
  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0x1d2>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	9218      	str	r2, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006d6:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d8:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006da:	0492      	lsls	r2, r2, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006dc:	0038      	movs	r0, r7
 80006de:	a913      	add	r1, sp, #76	@ 0x4c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e0:	9313      	str	r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e2:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006e4:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 80006e6:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e8:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ea:	9319      	str	r3, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006ec:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006ee:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006f0:	921c      	str	r2, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006f2:	931d      	str	r3, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006f4:	931e      	str	r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006f6:	931f      	str	r3, [sp, #124]	@ 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006f8:	f001 fd66 	bl	80021c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80006fc:	1e06      	subs	r6, r0, #0
 80006fe:	d001      	beq.n	8000704 <main+0x208>
 8000700:	b672      	cpsid	i
  while (1)
 8000702:	e7fe      	b.n	8000702 <main+0x206>
  HAL_TIM_MspPostInit(&htim1);
 8000704:	0038      	movs	r0, r7
 8000706:	f000 f8ab 	bl	8000860 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 800070a:	4d1f      	ldr	r5, [pc, #124]	@ (8000788 <main+0x28c>)
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <main+0x290>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070e:	0028      	movs	r0, r5
  huart1.Instance = USART1;
 8000710:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 8000712:	23e1      	movs	r3, #225	@ 0xe1
 8000714:	025b      	lsls	r3, r3, #9
 8000716:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000718:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	60ae      	str	r6, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	60ee      	str	r6, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	612e      	str	r6, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	61ae      	str	r6, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	61ee      	str	r6, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	622e      	str	r6, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000728:	626e      	str	r6, [r5, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	62ae      	str	r6, [r5, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072c:	f001 ff6a 	bl	8002604 <HAL_UART_Init>
 8000730:	1e01      	subs	r1, r0, #0
 8000732:	d001      	beq.n	8000738 <main+0x23c>
 8000734:	b672      	cpsid	i
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x23a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000738:	0028      	movs	r0, r5
 800073a:	f002 f871 	bl	8002820 <HAL_UARTEx_SetTxFifoThreshold>
 800073e:	1e01      	subs	r1, r0, #0
 8000740:	d001      	beq.n	8000746 <main+0x24a>
 8000742:	b672      	cpsid	i
  while (1)
 8000744:	e7fe      	b.n	8000744 <main+0x248>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000746:	0028      	movs	r0, r5
 8000748:	f002 f8ba 	bl	80028c0 <HAL_UARTEx_SetRxFifoThreshold>
 800074c:	2800      	cmp	r0, #0
 800074e:	d001      	beq.n	8000754 <main+0x258>
 8000750:	b672      	cpsid	i
  while (1)
 8000752:	e7fe      	b.n	8000752 <main+0x256>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000754:	0028      	movs	r0, r5
 8000756:	f002 f847 	bl	80027e8 <HAL_UARTEx_DisableFifoMode>
 800075a:	1e02      	subs	r2, r0, #0
 800075c:	d001      	beq.n	8000762 <main+0x266>
 800075e:	b672      	cpsid	i
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x264>
  buffer[0] = 0;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <main+0x294>)
  begin(&htim3, &hdma_tim3_ch1 ,TIM_CHANNEL_1, RED);
 8000764:	490b      	ldr	r1, [pc, #44]	@ (8000794 <main+0x298>)
  buffer[0] = 0;
 8000766:	6018      	str	r0, [r3, #0]
  begin(&htim3, &hdma_tim3_ch1 ,TIM_CHANNEL_1, RED);
 8000768:	0003      	movs	r3, r0
 800076a:	0020      	movs	r0, r4
 800076c:	f7ff fe6e 	bl	800044c <begin>
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x274>
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	2000019c 	.word	0x2000019c
 8000778:	40021000 	.word	0x40021000
 800077c:	20000150 	.word	0x20000150
 8000780:	40000400 	.word	0x40000400
 8000784:	40012c00 	.word	0x40012c00
 8000788:	20000060 	.word	0x20000060
 800078c:	40013800 	.word	0x40013800
 8000790:	20000028 	.word	0x20000028
 8000794:	200000f4 	.word	0x200000f4

08000798 <Error_Handler>:
 8000798:	b672      	cpsid	i
  while (1)
 800079a:	e7fe      	b.n	800079a <Error_Handler+0x2>

0800079c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079c:	2201      	movs	r2, #1
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <HAL_MspInit+0x2c>)
{
 80007a0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80007a4:	4311      	orrs	r1, r2
 80007a6:	6419      	str	r1, [r3, #64]	@ 0x40
 80007a8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80007aa:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	9200      	str	r2, [sp, #0]
 80007b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007b4:	0549      	lsls	r1, r1, #21
 80007b6:	430a      	orrs	r2, r1
 80007b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007bc:	400b      	ands	r3, r1
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	b002      	add	sp, #8
 80007c4:	4770      	bx	lr
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007cc:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM1)
 80007ce:	6803      	ldr	r3, [r0, #0]
 80007d0:	4a1e      	ldr	r2, [pc, #120]	@ (800084c <HAL_TIM_Base_MspInit+0x80>)
{
 80007d2:	0004      	movs	r4, r0
 80007d4:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d004      	beq.n	80007e4 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80007da:	4a1d      	ldr	r2, [pc, #116]	@ (8000850 <HAL_TIM_Base_MspInit+0x84>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d00c      	beq.n	80007fa <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007e0:	b003      	add	sp, #12
 80007e2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_TIM_Base_MspInit+0x88>)
 80007e8:	0109      	lsls	r1, r1, #4
 80007ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ec:	430a      	orrs	r2, r1
 80007ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	400b      	ands	r3, r1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	9b00      	ldr	r3, [sp, #0]
 80007f8:	e7f2      	b.n	80007e0 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007fa:	2302      	movs	r3, #2
 80007fc:	4a15      	ldr	r2, [pc, #84]	@ (8000854 <HAL_TIM_Base_MspInit+0x88>)
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 80007fe:	4d16      	ldr	r5, [pc, #88]	@ (8000858 <HAL_TIM_Base_MspInit+0x8c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000800:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000802:	0028      	movs	r0, r5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000804:	4319      	orrs	r1, r3
 8000806:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8000808:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800080a:	4013      	ands	r3, r2
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	9b01      	ldr	r3, [sp, #4]
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_TIM_Base_MspInit+0x90>)
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000812:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8000814:	602b      	str	r3, [r5, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000816:	2320      	movs	r3, #32
 8000818:	606b      	str	r3, [r5, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800081a:	3b10      	subs	r3, #16
 800081c:	60ab      	str	r3, [r5, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800081e:	2300      	movs	r3, #0
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000820:	612a      	str	r2, [r5, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000822:	3280      	adds	r2, #128	@ 0x80
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000824:	60eb      	str	r3, [r5, #12]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000826:	616a      	str	r2, [r5, #20]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8000828:	61eb      	str	r3, [r5, #28]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800082a:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800082c:	23c0      	movs	r3, #192	@ 0xc0
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800082e:	00d2      	lsls	r2, r2, #3
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000830:	019b      	lsls	r3, r3, #6
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000832:	61aa      	str	r2, [r5, #24]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000834:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000836:	f000 f985 	bl	8000b44 <HAL_DMA_Init>
 800083a:	2800      	cmp	r0, #0
 800083c:	d102      	bne.n	8000844 <HAL_TIM_Base_MspInit+0x78>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800083e:	6265      	str	r5, [r4, #36]	@ 0x24
 8000840:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8000842:	e7cd      	b.n	80007e0 <HAL_TIM_Base_MspInit+0x14>
      Error_Handler();
 8000844:	f7ff ffa8 	bl	8000798 <Error_Handler>
 8000848:	e7f9      	b.n	800083e <HAL_TIM_Base_MspInit+0x72>
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	40012c00 	.word	0x40012c00
 8000850:	40000400 	.word	0x40000400
 8000854:	40021000 	.word	0x40021000
 8000858:	200000f4 	.word	0x200000f4
 800085c:	40020008 	.word	0x40020008

08000860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000860:	b510      	push	{r4, lr}
 8000862:	0004      	movs	r4, r0
 8000864:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	2214      	movs	r2, #20
 8000868:	2100      	movs	r1, #0
 800086a:	a802      	add	r0, sp, #8
 800086c:	f002 f87a 	bl	8002964 <memset>
  if(htim->Instance==TIM1)
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <HAL_TIM_MspPostInit+0x70>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d004      	beq.n	8000882 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8000878:	4a16      	ldr	r2, [pc, #88]	@ (80008d4 <HAL_TIM_MspPostInit+0x74>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d018      	beq.n	80008b0 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800087e:	b008      	add	sp, #32
 8000880:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2301      	movs	r3, #1
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <HAL_TIM_MspPostInit+0x78>)
 8000886:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000888:	4319      	orrs	r1, r3
 800088a:	6351      	str	r1, [r2, #52]	@ 0x34
 800088c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800088e:	4013      	ands	r3, r2
 8000890:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000892:	2220      	movs	r2, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000896:	2302      	movs	r3, #2
 8000898:	9202      	str	r2, [sp, #8]
 800089a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089c:	2302      	movs	r3, #2
 800089e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 80008a0:	3303      	adds	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	20a0      	movs	r0, #160	@ 0xa0
 80008a4:	a902      	add	r1, sp, #8
 80008a6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008a8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f000 fb2d 	bl	8000f08 <HAL_GPIO_Init>
}
 80008ae:	e7e6      	b.n	800087e <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	2301      	movs	r3, #1
 80008b2:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008b4:	2040      	movs	r0, #64	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80008b8:	4319      	orrs	r1, r3
 80008ba:	6351      	str	r1, [r2, #52]	@ 0x34
 80008bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008be:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	401a      	ands	r2, r3
 80008c2:	9201      	str	r2, [sp, #4]
 80008c4:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c6:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c8:	9002      	str	r0, [sp, #8]
 80008ca:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008cc:	9205      	str	r2, [sp, #20]
 80008ce:	e7e8      	b.n	80008a2 <HAL_TIM_MspPostInit+0x42>
 80008d0:	40012c00 	.word	0x40012c00
 80008d4:	40000400 	.word	0x40000400
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b5d0      	push	{r4, r6, r7, lr}
 80008de:	0004      	movs	r4, r0
 80008e0:	b090      	sub	sp, #64	@ 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	2214      	movs	r2, #20
 80008e4:	2100      	movs	r1, #0
 80008e6:	a804      	add	r0, sp, #16
 80008e8:	f002 f83c 	bl	8002964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	221c      	movs	r2, #28
 80008ee:	2100      	movs	r1, #0
 80008f0:	a809      	add	r0, sp, #36	@ 0x24
 80008f2:	f002 f837 	bl	8002964 <memset>
  if(huart->Instance==USART1)
 80008f6:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <HAL_UART_MspInit+0xa4>)
 80008f8:	6822      	ldr	r2, [r4, #0]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d001      	beq.n	8000902 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008fe:	b010      	add	sp, #64	@ 0x40
 8000900:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000902:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000904:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000906:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	f000 fe82 	bl	8001610 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	2800      	cmp	r0, #0
 800090e:	d134      	bne.n	800097a <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000910:	2180      	movs	r1, #128	@ 0x80
 8000912:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <HAL_UART_MspInit+0xa8>)
 8000914:	01c9      	lsls	r1, r1, #7
 8000916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000918:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800091a:	430a      	orrs	r2, r1
 800091c:	641a      	str	r2, [r3, #64]	@ 0x40
 800091e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000920:	2700      	movs	r7, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000922:	400a      	ands	r2, r1
 8000924:	9201      	str	r2, [sp, #4]
 8000926:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	2202      	movs	r2, #2
 800092a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800092c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4311      	orrs	r1, r2
 8000930:	6359      	str	r1, [r3, #52]	@ 0x34
 8000932:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	4814      	ldr	r0, [pc, #80]	@ (8000988 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	400a      	ands	r2, r1
 8000938:	9202      	str	r2, [sp, #8]
 800093a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	2204      	movs	r2, #4
 800093e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000940:	4311      	orrs	r1, r2
 8000942:	6359      	str	r1, [r3, #52]	@ 0x34
 8000944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000948:	401a      	ands	r2, r3
 800094a:	9203      	str	r2, [sp, #12]
 800094c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800094e:	2280      	movs	r2, #128	@ 0x80
 8000950:	2302      	movs	r3, #2
 8000952:	9606      	str	r6, [sp, #24]
 8000954:	9707      	str	r7, [sp, #28]
 8000956:	9204      	str	r2, [sp, #16]
 8000958:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800095a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f000 fad4 	bl	8000f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000960:	2280      	movs	r2, #128	@ 0x80
 8000962:	2302      	movs	r3, #2
 8000964:	01d2      	lsls	r2, r2, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	4809      	ldr	r0, [pc, #36]	@ (800098c <HAL_UART_MspInit+0xb0>)
 8000968:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800096a:	9204      	str	r2, [sp, #16]
 800096c:	9305      	str	r3, [sp, #20]
 800096e:	9606      	str	r6, [sp, #24]
 8000970:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000972:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f000 fac8 	bl	8000f08 <HAL_GPIO_Init>
}
 8000978:	e7c1      	b.n	80008fe <HAL_UART_MspInit+0x22>
      Error_Handler();
 800097a:	f7ff ff0d 	bl	8000798 <Error_Handler>
 800097e:	e7c7      	b.n	8000910 <HAL_UART_MspInit+0x34>
 8000980:	40013800 	.word	0x40013800
 8000984:	40021000 	.word	0x40021000
 8000988:	50000400 	.word	0x50000400
 800098c:	50000800 	.word	0x50000800

08000990 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler>
 8000992:	46c0      	nop			@ (mov r8, r8)

08000994 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <HardFault_Handler>
 8000996:	46c0      	nop			@ (mov r8, r8)

08000998 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000998:	4770      	bx	lr
 800099a:	46c0      	nop			@ (mov r8, r8)

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800099c:	4770      	bx	lr
 800099e:	46c0      	nop			@ (mov r8, r8)

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f000 f86d 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bd10      	pop	{r4, pc}

080009a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80009aa:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <DMA1_Channel1_IRQHandler+0xc>)
 80009ac:	f000 fa50 	bl	8000e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	200000f4 	.word	0x200000f4

080009b8 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b8:	2280      	movs	r2, #128	@ 0x80
 80009ba:	4b02      	ldr	r3, [pc, #8]	@ (80009c4 <SystemInit+0xc>)
 80009bc:	0512      	lsls	r2, r2, #20
 80009be:	609a      	str	r2, [r3, #8]
#endif
}
 80009c0:	4770      	bx	lr
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c8:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009cc:	f7ff fff4 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009d2:	e003      	b.n	80009dc <LoopCopyDataInit>

080009d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009da:	3104      	adds	r1, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009dc:	480a      	ldr	r0, [pc, #40]	@ (8000a08 <LoopForever+0xa>)
  ldr r3, =_edata
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <LoopForever+0xe>)
  adds r2, r0, r1
 80009e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009e4:	d3f6      	bcc.n	80009d4 <CopyDataInit>
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <LoopForever+0x12>)
  b LoopFillZerobss
 80009e8:	e002      	b.n	80009f0 <LoopFillZerobss>

080009ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  str  r3, [r2]
 80009ec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ee:	3204      	adds	r2, #4

080009f0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <LoopForever+0x16>)
  cmp r2, r3
 80009f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009f4:	d3f9      	bcc.n	80009ea <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80009f6:	f001 ffbd 	bl	8002974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fa:	f7ff fd7f 	bl	80004fc <main>

080009fe <LoopForever>:

LoopForever:
    b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000a04:	08002b00 	.word	0x08002b00
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a10:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a14:	200001ec 	.word	0x200001ec

08000a18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_IRQHandler>
	...

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <HAL_InitTick+0x40>)
{
 8000a20:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0UL)
 8000a22:	7819      	ldrb	r1, [r3, #0]
 8000a24:	2900      	cmp	r1, #0
 8000a26:	d101      	bne.n	8000a2c <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a28:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000a2c:	20fa      	movs	r0, #250	@ 0xfa
 8000a2e:	0080      	lsls	r0, r0, #2
 8000a30:	f7ff fb6a 	bl	8000108 <__udivsi3>
 8000a34:	4d0a      	ldr	r5, [pc, #40]	@ (8000a60 <HAL_InitTick+0x44>)
 8000a36:	0001      	movs	r1, r0
 8000a38:	6828      	ldr	r0, [r5, #0]
 8000a3a:	f7ff fb65 	bl	8000108 <__udivsi3>
 8000a3e:	f000 f867 	bl	8000b10 <HAL_SYSTICK_Config>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d1f0      	bne.n	8000a28 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	2c03      	cmp	r4, #3
 8000a48:	d8ee      	bhi.n	8000a28 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	0021      	movs	r1, r4
 8000a50:	f000 f828 	bl	8000aa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <HAL_InitTick+0x48>)
 8000a56:	2000      	movs	r0, #0
 8000a58:	601c      	str	r4, [r3, #0]
  return status;
 8000a5a:	e7e6      	b.n	8000a2a <HAL_InitTick+0xe>
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008

08000a68 <HAL_Init>:
{
 8000a68:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f7ff ffd6 	bl	8000a1c <HAL_InitTick>
 8000a70:	1e04      	subs	r4, r0, #0
 8000a72:	d002      	beq.n	8000a7a <HAL_Init+0x12>
    status = HAL_ERROR;
 8000a74:	2401      	movs	r4, #1
}
 8000a76:	0020      	movs	r0, r4
 8000a78:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000a7a:	f7ff fe8f 	bl	800079c <HAL_MspInit>
 8000a7e:	e7fa      	b.n	8000a76 <HAL_Init+0xe>

08000a80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a80:	4a03      	ldr	r2, [pc, #12]	@ (8000a90 <HAL_IncTick+0x10>)
 8000a82:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <HAL_IncTick+0x14>)
 8000a84:	6811      	ldr	r1, [r2, #0]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	185b      	adds	r3, r3, r1
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	4770      	bx	lr
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	200001e8 	.word	0x200001e8
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a98:	4b01      	ldr	r3, [pc, #4]	@ (8000aa0 <HAL_GetTick+0x8>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
}
 8000a9c:	4770      	bx	lr
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	200001e8 	.word	0x200001e8

08000aa4 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa4:	22ff      	movs	r2, #255	@ 0xff
 8000aa6:	2303      	movs	r3, #3
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b510      	push	{r4, lr}
 8000aaa:	0014      	movs	r4, r2
 8000aac:	4003      	ands	r3, r0
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ab2:	0189      	lsls	r1, r1, #6
 8000ab4:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab6:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ab8:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8000aba:	2800      	cmp	r0, #0
 8000abc:	db0b      	blt.n	8000ad6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_NVIC_SetPriority+0x4c>)
 8000ac0:	21c0      	movs	r1, #192	@ 0xc0
 8000ac2:	469c      	mov	ip, r3
 8000ac4:	0880      	lsrs	r0, r0, #2
 8000ac6:	0080      	lsls	r0, r0, #2
 8000ac8:	4460      	add	r0, ip
 8000aca:	0089      	lsls	r1, r1, #2
 8000acc:	5843      	ldr	r3, [r0, r1]
 8000ace:	4023      	ands	r3, r4
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	5043      	str	r3, [r0, r1]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000ad4:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	4906      	ldr	r1, [pc, #24]	@ (8000af4 <HAL_NVIC_SetPriority+0x50>)
 8000ada:	4003      	ands	r3, r0
 8000adc:	468c      	mov	ip, r1
 8000ade:	3b08      	subs	r3, #8
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4463      	add	r3, ip
 8000ae6:	69d9      	ldr	r1, [r3, #28]
 8000ae8:	400c      	ands	r4, r1
 8000aea:	4314      	orrs	r4, r2
 8000aec:	61dc      	str	r4, [r3, #28]
 8000aee:	e7f1      	b.n	8000ad4 <HAL_NVIC_SetPriority+0x30>
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000af8:	2800      	cmp	r0, #0
 8000afa:	db05      	blt.n	8000b08 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afc:	221f      	movs	r2, #31
 8000afe:	2301      	movs	r3, #1
 8000b00:	4002      	ands	r2, r0
 8000b02:	4093      	lsls	r3, r2
 8000b04:	4a01      	ldr	r2, [pc, #4]	@ (8000b0c <HAL_NVIC_EnableIRQ+0x14>)
 8000b06:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b08:	4770      	bx	lr
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	1e43      	subs	r3, r0, #1
 8000b14:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d20e      	bcs.n	8000b3a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a07      	ldr	r2, [pc, #28]	@ (8000b3c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b24:	6a03      	ldr	r3, [r0, #32]
 8000b26:	0609      	lsls	r1, r1, #24
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	0a1b      	lsrs	r3, r3, #8
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b32:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	3307      	adds	r3, #7
 8000b38:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e010 	.word	0xe000e010
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b46:	46ce      	mov	lr, r9
 8000b48:	4647      	mov	r7, r8
 8000b4a:	0004      	movs	r4, r0
 8000b4c:	b580      	push	{r7, lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	d063      	beq.n	8000c1a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000b52:	6805      	ldr	r5, [r0, #0]
 8000b54:	4b32      	ldr	r3, [pc, #200]	@ (8000c20 <HAL_DMA_Init+0xdc>)
 8000b56:	2114      	movs	r1, #20
 8000b58:	18e8      	adds	r0, r5, r3
 8000b5a:	f7ff fad5 	bl	8000108 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000b5e:	0083      	lsls	r3, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000b60:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b62:	2202      	movs	r2, #2
 8000b64:	2325      	movs	r3, #37	@ 0x25
 8000b66:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000c24 <HAL_DMA_Init+0xe0>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000b6c:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b6e:	4013      	ands	r3, r2
 8000b70:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000b72:	68e3      	ldr	r3, [r4, #12]
 8000b74:	6921      	ldr	r1, [r4, #16]
 8000b76:	4333      	orrs	r3, r6
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6961      	ldr	r1, [r4, #20]
 8000b7c:	682a      	ldr	r2, [r5, #0]
 8000b7e:	430b      	orrs	r3, r1
 8000b80:	69a1      	ldr	r1, [r4, #24]
 8000b82:	430b      	orrs	r3, r1
 8000b84:	69e1      	ldr	r1, [r4, #28]
 8000b86:	430b      	orrs	r3, r1
 8000b88:	6a21      	ldr	r1, [r4, #32]
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	602b      	str	r3, [r5, #0]
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000b90:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000b92:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000b94:	469c      	mov	ip, r3
                                                             ((hdma->ChannelIndex >> 2U) * \
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000b96:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000b98:	4460      	add	r0, ip
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000b9a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000b9c:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000b9e:	23ff      	movs	r3, #255	@ 0xff
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000ba0:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	4028      	ands	r0, r5
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000ba6:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000ba8:	3808      	subs	r0, #8
 8000baa:	4699      	mov	r9, r3
 8000bac:	f7ff faac 	bl	8000108 <__udivsi3>
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000bb0:	231c      	movs	r3, #28
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4003      	ands	r3, r0
 8000bb6:	0010      	movs	r0, r2
 8000bb8:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000bba:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000bbc:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000bbe:	01db      	lsls	r3, r3, #7
 8000bc0:	429e      	cmp	r6, r3
 8000bc2:	d020      	beq.n	8000c06 <HAL_DMA_Init+0xc2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bc4:	464b      	mov	r3, r9
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bc6:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bc8:	6861      	ldr	r1, [r4, #4]
 8000bca:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000bcc:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bce:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bd0:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000bd2:	2903      	cmp	r1, #3
 8000bd4:	d81c      	bhi.n	8000c10 <HAL_DMA_Init+0xcc>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000bd6:	4916      	ldr	r1, [pc, #88]	@ (8000c30 <HAL_DMA_Init+0xec>)
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000bd8:	4816      	ldr	r0, [pc, #88]	@ (8000c34 <HAL_DMA_Init+0xf0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000bda:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000be0:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000be2:	0089      	lsls	r1, r1, #2
 8000be4:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000be6:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000be8:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000bea:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bec:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bee:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8000bf0:	2225      	movs	r2, #37	@ 0x25
 8000bf2:	2101      	movs	r1, #1
  return HAL_OK;
 8000bf4:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bf6:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8000bf8:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8000bfa:	3a01      	subs	r2, #1
 8000bfc:	54a3      	strb	r3, [r4, r2]
}
 8000bfe:	bcc0      	pop	{r6, r7}
 8000c00:	46b9      	mov	r9, r7
 8000c02:	46b0      	mov	r8, r6
 8000c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000c06:	2300      	movs	r3, #0
 8000c08:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000c0a:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000c14:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000c16:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000c18:	e7e9      	b.n	8000bee <HAL_DMA_Init+0xaa>
    return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e7ef      	b.n	8000bfe <HAL_DMA_Init+0xba>
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	bffdfff8 	.word	0xbffdfff8
 8000c24:	ffff800f 	.word	0xffff800f
 8000c28:	10008200 	.word	0x10008200
 8000c2c:	40020880 	.word	0x40020880
 8000c30:	1000823f 	.word	0x1000823f
 8000c34:	40020940 	.word	0x40020940

08000c38 <HAL_DMA_Start_IT>:
{
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	46c6      	mov	lr, r8
 8000c3c:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000c3e:	2024      	movs	r0, #36	@ 0x24
{
 8000c40:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 8000c42:	5c25      	ldrb	r5, [r4, r0]
 8000c44:	2d01      	cmp	r5, #1
 8000c46:	d04d      	beq.n	8000ce4 <HAL_DMA_Start_IT+0xac>
 8000c48:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8000c4a:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 8000c4c:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8000c4e:	5da5      	ldrb	r5, [r4, r6]
    status = HAL_BUSY;
 8000c50:	3822      	subs	r0, #34	@ 0x22
  if (HAL_DMA_STATE_READY == hdma->State)
 8000c52:	b2ef      	uxtb	r7, r5
 8000c54:	2d01      	cmp	r5, #1
 8000c56:	d005      	beq.n	8000c64 <HAL_DMA_Start_IT+0x2c>
  __HAL_UNLOCK(hdma);
 8000c58:	2324      	movs	r3, #36	@ 0x24
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	54e2      	strb	r2, [r4, r3]
}
 8000c5e:	bc80      	pop	{r7}
 8000c60:	46b8      	mov	r8, r7
 8000c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c64:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c66:	2000      	movs	r0, #0
 8000c68:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000c6a:	6820      	ldr	r0, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c6c:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 8000c6e:	6805      	ldr	r5, [r0, #0]
 8000c70:	43bd      	bics	r5, r7
 8000c72:	6005      	str	r5, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c74:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8000c76:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8000c78:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d002      	beq.n	8000c84 <HAL_DMA_Start_IT+0x4c>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c7e:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8000c80:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8000c82:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000c84:	4d1e      	ldr	r5, [pc, #120]	@ (8000d00 <HAL_DMA_Start_IT+0xc8>)
 8000c86:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 8000c88:	46ac      	mov	ip, r5
 8000c8a:	686d      	ldr	r5, [r5, #4]
 8000c8c:	46a8      	mov	r8, r5
 8000c8e:	251c      	movs	r5, #28
 8000c90:	402f      	ands	r7, r5
 8000c92:	3d1b      	subs	r5, #27
 8000c94:	40bd      	lsls	r5, r7
 8000c96:	4647      	mov	r7, r8
 8000c98:	433d      	orrs	r5, r7
 8000c9a:	4667      	mov	r7, ip
 8000c9c:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8000c9e:	6043      	str	r3, [r0, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ca0:	68a3      	ldr	r3, [r4, #8]
 8000ca2:	2b10      	cmp	r3, #16
 8000ca4:	d020      	beq.n	8000ce8 <HAL_DMA_Start_IT+0xb0>
    hdma->Instance->CPAR = SrcAddress;
 8000ca6:	6081      	str	r1, [r0, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ca8:	60c2      	str	r2, [r0, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8000caa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d01e      	beq.n	8000cee <HAL_DMA_Start_IT+0xb6>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb0:	220e      	movs	r2, #14
 8000cb2:	6803      	ldr	r3, [r0, #0]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	6003      	str	r3, [r0, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000cb8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000cba:	6813      	ldr	r3, [r2, #0]
 8000cbc:	03db      	lsls	r3, r3, #15
 8000cbe:	d504      	bpl.n	8000cca <HAL_DMA_Start_IT+0x92>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000cc0:	2380      	movs	r3, #128	@ 0x80
 8000cc2:	6811      	ldr	r1, [r2, #0]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d004      	beq.n	8000cd8 <HAL_DMA_Start_IT+0xa0>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000cce:	2380      	movs	r3, #128	@ 0x80
 8000cd0:	6832      	ldr	r2, [r6, #0]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	6803      	ldr	r3, [r0, #0]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	e7b9      	b.n	8000c58 <HAL_DMA_Start_IT+0x20>
  __HAL_LOCK(hdma);
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	e7ba      	b.n	8000c5e <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8000ce8:	6082      	str	r2, [r0, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000cea:	60c1      	str	r1, [r0, #12]
 8000cec:	e7dd      	b.n	8000caa <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cee:	2204      	movs	r2, #4
 8000cf0:	6803      	ldr	r3, [r0, #0]
 8000cf2:	4393      	bics	r3, r2
 8000cf4:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cf6:	6803      	ldr	r3, [r0, #0]
 8000cf8:	3206      	adds	r2, #6
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	6003      	str	r3, [r0, #0]
 8000cfe:	e7db      	b.n	8000cb8 <HAL_DMA_Start_IT+0x80>
 8000d00:	40020000 	.word	0x40020000

08000d04 <HAL_DMA_PollForTransfer>:
{
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	4657      	mov	r7, sl
 8000d08:	464e      	mov	r6, r9
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	46de      	mov	lr, fp
  __HAL_UNLOCK(hdma);
 8000d0e:	2324      	movs	r3, #36	@ 0x24
{
 8000d10:	b5e0      	push	{r5, r6, r7, lr}
 8000d12:	0016      	movs	r6, r2
  __HAL_UNLOCK(hdma);
 8000d14:	2200      	movs	r2, #0
 8000d16:	54c2      	strb	r2, [r0, r3]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d18:	3301      	adds	r3, #1
 8000d1a:	5cc3      	ldrb	r3, [r0, r3]
{
 8000d1c:	0004      	movs	r4, r0
 8000d1e:	000f      	movs	r7, r1
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d20:	b2dd      	uxtb	r5, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d008      	beq.n	8000d38 <HAL_DMA_PollForTransfer+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d26:	2304      	movs	r3, #4
 8000d28:	63c3      	str	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1
}
 8000d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d2e:	46bb      	mov	fp, r7
 8000d30:	46b2      	mov	sl, r6
 8000d32:	46a9      	mov	r9, r5
 8000d34:	46a0      	mov	r8, r4
 8000d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 8000d38:	6803      	ldr	r3, [r0, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	069b      	lsls	r3, r3, #26
 8000d3e:	d445      	bmi.n	8000dcc <HAL_DMA_PollForTransfer+0xc8>
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU);
 8000d40:	221c      	movs	r2, #28
 8000d42:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000d44:	4013      	ands	r3, r2
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d144      	bne.n	8000dd4 <HAL_DMA_PollForTransfer+0xd0>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex  & 0x1cU);
 8000d4a:	409d      	lsls	r5, r3
  tickstart = HAL_GetTick();
 8000d4c:	f7ff fea4 	bl	8000a98 <HAL_GetTick>
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000d50:	231c      	movs	r3, #28
 8000d52:	6c21      	ldr	r1, [r4, #64]	@ 0x40
  tickstart = HAL_GetTick();
 8000d54:	4680      	mov	r8, r0
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000d56:	4019      	ands	r1, r3
 8000d58:	1c73      	adds	r3, r6, #1
 8000d5a:	d150      	bne.n	8000dfe <HAL_DMA_PollForTransfer+0xfa>
 8000d5c:	2008      	movs	r0, #8
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e4c <HAL_DMA_PollForTransfer+0x148>)
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000d60:	4088      	lsls	r0, r1
 8000d62:	e002      	b.n	8000d6a <HAL_DMA_PollForTransfer+0x66>
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4202      	tst	r2, r0
 8000d68:	d136      	bne.n	8000dd8 <HAL_DMA_PollForTransfer+0xd4>
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4215      	tst	r5, r2
 8000d6e:	d0f9      	beq.n	8000d64 <HAL_DMA_PollForTransfer+0x60>
  if (hdma->DMAmuxRequestGen != 0U)
 8000d70:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00f      	beq.n	8000d96 <HAL_DMA_PollForTransfer+0x92>
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8000d76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d7a:	6815      	ldr	r5, [r2, #0]
 8000d7c:	4228      	tst	r0, r5
 8000d7e:	d00a      	beq.n	8000d96 <HAL_DMA_PollForTransfer+0x92>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000d80:	2580      	movs	r5, #128	@ 0x80
 8000d82:	681e      	ldr	r6, [r3, #0]
 8000d84:	006d      	lsls	r5, r5, #1
 8000d86:	4335      	orrs	r5, r6
 8000d88:	601d      	str	r5, [r3, #0]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8000d8a:	2380      	movs	r3, #128	@ 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d8c:	6050      	str	r0, [r2, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8000d8e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8000d96:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000d98:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	4202      	tst	r2, r0
 8000d9e:	d005      	beq.n	8000dac <HAL_DMA_PollForTransfer+0xa8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000da0:	605a      	str	r2, [r3, #4]
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8000da2:	2380      	movs	r3, #128	@ 0x80
 8000da4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4313      	orrs	r3, r2
 8000daa:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000dac:	4a27      	ldr	r2, [pc, #156]	@ (8000e4c <HAL_DMA_PollForTransfer+0x148>)
 8000dae:	6850      	ldr	r0, [r2, #4]
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000db0:	2f00      	cmp	r7, #0
 8000db2:	d11f      	bne.n	8000df4 <HAL_DMA_PollForTransfer+0xf0>
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000db4:	2302      	movs	r3, #2
 8000db6:	408b      	lsls	r3, r1
 8000db8:	4303      	orrs	r3, r0
 8000dba:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000dbc:	2325      	movs	r3, #37	@ 0x25
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8000dc2:	2324      	movs	r3, #36	@ 0x24
 8000dc4:	2200      	movs	r2, #0
  return HAL_OK;
 8000dc6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 8000dc8:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8000dca:	e7af      	b.n	8000d2c <HAL_DMA_PollForTransfer+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8000dd2:	e7aa      	b.n	8000d2a <HAL_DMA_PollForTransfer+0x26>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex  & 0x1cU);
 8000dd4:	2504      	movs	r5, #4
 8000dd6:	e7b8      	b.n	8000d4a <HAL_DMA_PollForTransfer+0x46>
      __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000dd8:	2301      	movs	r3, #1
 8000dda:	001a      	movs	r2, r3
 8000ddc:	408a      	lsls	r2, r1
 8000dde:	481b      	ldr	r0, [pc, #108]	@ (8000e4c <HAL_DMA_PollForTransfer+0x148>)
 8000de0:	6845      	ldr	r5, [r0, #4]
 8000de2:	432a      	orrs	r2, r5
 8000de4:	6042      	str	r2, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8000de6:	2225      	movs	r2, #37	@ 0x25
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000de8:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma->State = HAL_DMA_STATE_READY;
 8000dea:	54a3      	strb	r3, [r4, r2]
      __HAL_UNLOCK(hdma);
 8000dec:	2200      	movs	r2, #0
 8000dee:	3323      	adds	r3, #35	@ 0x23
 8000df0:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8000df2:	e79a      	b.n	8000d2a <HAL_DMA_PollForTransfer+0x26>
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000df4:	2304      	movs	r3, #4
 8000df6:	408b      	lsls	r3, r1
 8000df8:	4303      	orrs	r3, r0
 8000dfa:	6053      	str	r3, [r2, #4]
 8000dfc:	e7e1      	b.n	8000dc2 <HAL_DMA_PollForTransfer+0xbe>
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_DMA_PollForTransfer+0x148>)
 8000e00:	4699      	mov	r9, r3
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000e02:	2308      	movs	r3, #8
 8000e04:	469a      	mov	sl, r3
 8000e06:	3314      	adds	r3, #20
 8000e08:	469b      	mov	fp, r3
 8000e0a:	e010      	b.n	8000e2e <HAL_DMA_PollForTransfer+0x12a>
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4653      	mov	r3, sl
 8000e12:	408b      	lsls	r3, r1
 8000e14:	421a      	tst	r2, r3
 8000e16:	d1df      	bne.n	8000dd8 <HAL_DMA_PollForTransfer+0xd4>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000e18:	f7ff fe3e 	bl	8000a98 <HAL_GetTick>
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	1ac0      	subs	r0, r0, r3
 8000e20:	42b0      	cmp	r0, r6
 8000e22:	d809      	bhi.n	8000e38 <HAL_DMA_PollForTransfer+0x134>
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	d007      	beq.n	8000e38 <HAL_DMA_PollForTransfer+0x134>
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000e28:	465b      	mov	r3, fp
 8000e2a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8000e2c:	4019      	ands	r1, r3
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000e2e:	464b      	mov	r3, r9
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	421d      	tst	r5, r3
 8000e34:	d0ea      	beq.n	8000e0c <HAL_DMA_PollForTransfer+0x108>
 8000e36:	e79b      	b.n	8000d70 <HAL_DMA_PollForTransfer+0x6c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e38:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	2201      	movs	r2, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e3c:	63e3      	str	r3, [r4, #60]	@ 0x3c
        hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	3305      	adds	r3, #5
 8000e40:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hdma);
 8000e42:	2200      	movs	r2, #0
 8000e44:	3b01      	subs	r3, #1
 8000e46:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8000e48:	e76f      	b.n	8000d2a <HAL_DMA_PollForTransfer+0x26>
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	40020000 	.word	0x40020000

08000e50 <HAL_DMA_IRQHandler>:
{
 8000e50:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e52:	211c      	movs	r1, #28
 8000e54:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8000e58:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8000e5a:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e5c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000e5e:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e60:	400b      	ands	r3, r1
 8000e62:	0021      	movs	r1, r4
 8000e64:	4099      	lsls	r1, r3
 8000e66:	420a      	tst	r2, r1
 8000e68:	d010      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x3c>
 8000e6a:	422c      	tst	r4, r5
 8000e6c:	d00e      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x3c>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e6e:	6833      	ldr	r3, [r6, #0]
 8000e70:	069b      	lsls	r3, r3, #26
 8000e72:	d402      	bmi.n	8000e7a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e74:	6833      	ldr	r3, [r6, #0]
 8000e76:	43a3      	bics	r3, r4
 8000e78:	6033      	str	r3, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000e7a:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <HAL_DMA_IRQHandler+0xb4>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4311      	orrs	r1, r2
 8000e80:	6059      	str	r1, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8000e82:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000e88:	4798      	blx	r3
}
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000e8c:	2402      	movs	r4, #2
 8000e8e:	0021      	movs	r1, r4
 8000e90:	4099      	lsls	r1, r3
 8000e92:	420a      	tst	r2, r1
 8000e94:	d017      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x76>
 8000e96:	422c      	tst	r4, r5
 8000e98:	d015      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x76>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e9a:	6833      	ldr	r3, [r6, #0]
 8000e9c:	069b      	lsls	r3, r3, #26
 8000e9e:	d406      	bmi.n	8000eae <HAL_DMA_IRQHandler+0x5e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ea0:	220a      	movs	r2, #10
 8000ea2:	6833      	ldr	r3, [r6, #0]
 8000ea4:	4393      	bics	r3, r2
 8000ea6:	6033      	str	r3, [r6, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000ea8:	2325      	movs	r3, #37	@ 0x25
 8000eaa:	3a09      	subs	r2, #9
 8000eac:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <HAL_DMA_IRQHandler+0xb4>)
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4311      	orrs	r1, r2
 8000eb4:	6059      	str	r1, [r3, #4]
    __HAL_UNLOCK(hdma);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2324      	movs	r3, #36	@ 0x24
 8000eba:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8000ebc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0e3      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000ec2:	4798      	blx	r3
  return;
 8000ec4:	e7e1      	b.n	8000e8a <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	000c      	movs	r4, r1
 8000eca:	409c      	lsls	r4, r3
 8000ecc:	4222      	tst	r2, r4
 8000ece:	d0dc      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x3a>
 8000ed0:	4229      	tst	r1, r5
 8000ed2:	d0da      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed4:	6832      	ldr	r2, [r6, #0]
 8000ed6:	3106      	adds	r1, #6
 8000ed8:	438a      	bics	r2, r1
 8000eda:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000edc:	2201      	movs	r2, #1
 8000ede:	0015      	movs	r5, r2
 8000ee0:	409d      	lsls	r5, r3
 8000ee2:	002b      	movs	r3, r5
 8000ee4:	4907      	ldr	r1, [pc, #28]	@ (8000f04 <HAL_DMA_IRQHandler+0xb4>)
 8000ee6:	684c      	ldr	r4, [r1, #4]
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000eec:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eee:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000ef0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8000ef8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0c5      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000efe:	4798      	blx	r3
  return;
 8000f00:	e7c3      	b.n	8000e8a <HAL_DMA_IRQHandler+0x3a>
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	4645      	mov	r5, r8
 8000f0c:	46de      	mov	lr, fp
 8000f0e:	4657      	mov	r7, sl
 8000f10:	464e      	mov	r6, r9
 8000f12:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f14:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0U;
 8000f16:	2300      	movs	r3, #0
{
 8000f18:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d07d      	beq.n	800101a <HAL_GPIO_Init+0x112>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000f1e:	4688      	mov	r8, r1
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f20:	2401      	movs	r4, #1
 8000f22:	002a      	movs	r2, r5
 8000f24:	409c      	lsls	r4, r3
 8000f26:	4022      	ands	r2, r4
 8000f28:	4694      	mov	ip, r2
    if (iocurrent != 0U)
 8000f2a:	4225      	tst	r5, r4
 8000f2c:	d071      	beq.n	8001012 <HAL_GPIO_Init+0x10a>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2e:	4642      	mov	r2, r8
 8000f30:	6852      	ldr	r2, [r2, #4]
 8000f32:	2610      	movs	r6, #16
 8000f34:	0011      	movs	r1, r2
 8000f36:	43b1      	bics	r1, r6
 8000f38:	4689      	mov	r9, r1
 8000f3a:	2902      	cmp	r1, #2
 8000f3c:	d100      	bne.n	8000f40 <HAL_GPIO_Init+0x38>
 8000f3e:	e073      	b.n	8001028 <HAL_GPIO_Init+0x120>
      tmp = GPIOx->MODER;
 8000f40:	6801      	ldr	r1, [r0, #0]
 8000f42:	005e      	lsls	r6, r3, #1
 8000f44:	468b      	mov	fp, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f46:	2103      	movs	r1, #3
 8000f48:	40b1      	lsls	r1, r6
 8000f4a:	468a      	mov	sl, r1
 8000f4c:	43c9      	mvns	r1, r1
 8000f4e:	465f      	mov	r7, fp
 8000f50:	9101      	str	r1, [sp, #4]
 8000f52:	4651      	mov	r1, sl
 8000f54:	438f      	bics	r7, r1
 8000f56:	46bb      	mov	fp, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	2703      	movs	r7, #3
 8000f5a:	4017      	ands	r7, r2
 8000f5c:	40b7      	lsls	r7, r6
 8000f5e:	46ba      	mov	sl, r7
 8000f60:	465f      	mov	r7, fp
 8000f62:	4651      	mov	r1, sl
 8000f64:	430f      	orrs	r7, r1
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f66:	2101      	movs	r1, #1
 8000f68:	4249      	negs	r1, r1
 8000f6a:	468a      	mov	sl, r1
 8000f6c:	44d1      	add	r9, sl
 8000f6e:	4649      	mov	r1, r9
      GPIOx->MODER = tmp;
 8000f70:	6007      	str	r7, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f72:	2901      	cmp	r1, #1
 8000f74:	d800      	bhi.n	8000f78 <HAL_GPIO_Init+0x70>
 8000f76:	e083      	b.n	8001080 <HAL_GPIO_Init+0x178>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f78:	2a03      	cmp	r2, #3
 8000f7a:	d04a      	beq.n	8001012 <HAL_GPIO_Init+0x10a>
        tmp = GPIOx->PUPDR;
 8000f7c:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7e:	9901      	ldr	r1, [sp, #4]
 8000f80:	400c      	ands	r4, r1
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000f82:	4641      	mov	r1, r8
 8000f84:	6889      	ldr	r1, [r1, #8]
 8000f86:	40b1      	lsls	r1, r6
 8000f88:	4321      	orrs	r1, r4
        GPIOx->PUPDR = tmp;
 8000f8a:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f8c:	2180      	movs	r1, #128	@ 0x80
 8000f8e:	0549      	lsls	r1, r1, #21
 8000f90:	420a      	tst	r2, r1
 8000f92:	d03e      	beq.n	8001012 <HAL_GPIO_Init+0x10a>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000f94:	2603      	movs	r6, #3
 8000f96:	270f      	movs	r7, #15
 8000f98:	4c58      	ldr	r4, [pc, #352]	@ (80010fc <HAL_GPIO_Init+0x1f4>)
 8000f9a:	401e      	ands	r6, r3
 8000f9c:	46a1      	mov	r9, r4
 8000f9e:	00f6      	lsls	r6, r6, #3
 8000fa0:	40b7      	lsls	r7, r6
        tmp = EXTI->EXTICR[position >> 2U];
 8000fa2:	0899      	lsrs	r1, r3, #2
 8000fa4:	0089      	lsls	r1, r1, #2
 8000fa6:	4449      	add	r1, r9
 8000fa8:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000faa:	43bc      	bics	r4, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000fac:	27a0      	movs	r7, #160	@ 0xa0
 8000fae:	05ff      	lsls	r7, r7, #23
 8000fb0:	42b8      	cmp	r0, r7
 8000fb2:	d00e      	beq.n	8000fd2 <HAL_GPIO_Init+0xca>
 8000fb4:	4f52      	ldr	r7, [pc, #328]	@ (8001100 <HAL_GPIO_Init+0x1f8>)
 8000fb6:	42b8      	cmp	r0, r7
 8000fb8:	d100      	bne.n	8000fbc <HAL_GPIO_Init+0xb4>
 8000fba:	e097      	b.n	80010ec <HAL_GPIO_Init+0x1e4>
 8000fbc:	4f51      	ldr	r7, [pc, #324]	@ (8001104 <HAL_GPIO_Init+0x1fc>)
 8000fbe:	42b8      	cmp	r0, r7
 8000fc0:	d100      	bne.n	8000fc4 <HAL_GPIO_Init+0xbc>
 8000fc2:	e097      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 8000fc4:	4f50      	ldr	r7, [pc, #320]	@ (8001108 <HAL_GPIO_Init+0x200>)
 8000fc6:	42b8      	cmp	r0, r7
 8000fc8:	d100      	bne.n	8000fcc <HAL_GPIO_Init+0xc4>
 8000fca:	e08b      	b.n	80010e4 <HAL_GPIO_Init+0x1dc>
 8000fcc:	2706      	movs	r7, #6
 8000fce:	40b7      	lsls	r7, r6
 8000fd0:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8000fd2:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp = EXTI->IMR1;
 8000fd4:	2180      	movs	r1, #128	@ 0x80
 8000fd6:	4c49      	ldr	r4, [pc, #292]	@ (80010fc <HAL_GPIO_Init+0x1f4>)
 8000fd8:	5861      	ldr	r1, [r4, r1]
        tmp &= ~((uint32_t)iocurrent);
 8000fda:	4664      	mov	r4, ip
 8000fdc:	43e4      	mvns	r4, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fde:	03d6      	lsls	r6, r2, #15
 8000fe0:	d464      	bmi.n	80010ac <HAL_GPIO_Init+0x1a4>
        {
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
 8000fe2:	2680      	movs	r6, #128	@ 0x80
 8000fe4:	4f45      	ldr	r7, [pc, #276]	@ (80010fc <HAL_GPIO_Init+0x1f4>)
        tmp &= ~((uint32_t)iocurrent);
 8000fe6:	4021      	ands	r1, r4
        EXTI->IMR1 = tmp;
 8000fe8:	51b9      	str	r1, [r7, r6]

        tmp = EXTI->EMR1;
 8000fea:	2184      	movs	r1, #132	@ 0x84
 8000fec:	5879      	ldr	r1, [r7, r1]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fee:	0396      	lsls	r6, r2, #14
 8000ff0:	d465      	bmi.n	80010be <HAL_GPIO_Init+0x1b6>
        {
          tmp |= iocurrent;
        }
        EXTI->EMR1 = tmp;
 8000ff2:	2684      	movs	r6, #132	@ 0x84
 8000ff4:	4f41      	ldr	r7, [pc, #260]	@ (80010fc <HAL_GPIO_Init+0x1f4>)
        tmp &= ~((uint32_t)iocurrent);
 8000ff6:	4021      	ands	r1, r4
        EXTI->EMR1 = tmp;
 8000ff8:	51b9      	str	r1, [r7, r6]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000ffa:	6839      	ldr	r1, [r7, #0]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffc:	02d6      	lsls	r6, r2, #11
 8000ffe:	d466      	bmi.n	80010ce <HAL_GPIO_Init+0x1c6>
        {
          tmp |= iocurrent;
        }
        EXTI->RTSR1 = tmp;
 8001000:	4e3e      	ldr	r6, [pc, #248]	@ (80010fc <HAL_GPIO_Init+0x1f4>)
        tmp &= ~((uint32_t)iocurrent);
 8001002:	4021      	ands	r1, r4
        EXTI->RTSR1 = tmp;
 8001004:	6031      	str	r1, [r6, #0]

        tmp = EXTI->FTSR1;
 8001006:	6871      	ldr	r1, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	0292      	lsls	r2, r2, #10
 800100a:	d467      	bmi.n	80010dc <HAL_GPIO_Init+0x1d4>
        tmp &= ~((uint32_t)iocurrent);
 800100c:	4021      	ands	r1, r4
        {
          tmp |= iocurrent;
        }
        EXTI->FTSR1 = tmp;
 800100e:	4a3b      	ldr	r2, [pc, #236]	@ (80010fc <HAL_GPIO_Init+0x1f4>)
 8001010:	6051      	str	r1, [r2, #4]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001012:	002a      	movs	r2, r5
      }
    }

    position++;
 8001014:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001016:	40da      	lsrs	r2, r3
 8001018:	d182      	bne.n	8000f20 <HAL_GPIO_Init+0x18>
  }
}
 800101a:	b003      	add	sp, #12
 800101c:	bcf0      	pop	{r4, r5, r6, r7}
 800101e:	46bb      	mov	fp, r7
 8001020:	46b2      	mov	sl, r6
 8001022:	46a9      	mov	r9, r5
 8001024:	46a0      	mov	r8, r4
 8001026:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp = GPIOx->AFR[position >> 3U];
 8001028:	08de      	lsrs	r6, r3, #3
 800102a:	00b6      	lsls	r6, r6, #2
 800102c:	1986      	adds	r6, r0, r6
 800102e:	6a31      	ldr	r1, [r6, #32]
 8001030:	4689      	mov	r9, r1
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001032:	2107      	movs	r1, #7
 8001034:	4019      	ands	r1, r3
 8001036:	0089      	lsls	r1, r1, #2
 8001038:	468a      	mov	sl, r1
 800103a:	210f      	movs	r1, #15
 800103c:	4657      	mov	r7, sl
 800103e:	40b9      	lsls	r1, r7
 8001040:	464f      	mov	r7, r9
 8001042:	438f      	bics	r7, r1
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001044:	4641      	mov	r1, r8
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001046:	46b9      	mov	r9, r7
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001048:	270f      	movs	r7, #15
 800104a:	6909      	ldr	r1, [r1, #16]
 800104c:	4039      	ands	r1, r7
 800104e:	4657      	mov	r7, sl
 8001050:	40b9      	lsls	r1, r7
 8001052:	464f      	mov	r7, r9
 8001054:	4339      	orrs	r1, r7
        GPIOx->AFR[position >> 3U] = tmp;
 8001056:	6231      	str	r1, [r6, #32]
      tmp = GPIOx->MODER;
 8001058:	6801      	ldr	r1, [r0, #0]
 800105a:	005e      	lsls	r6, r3, #1
 800105c:	468a      	mov	sl, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800105e:	2103      	movs	r1, #3
 8001060:	40b1      	lsls	r1, r6
 8001062:	4689      	mov	r9, r1
 8001064:	43c9      	mvns	r1, r1
 8001066:	4657      	mov	r7, sl
 8001068:	9101      	str	r1, [sp, #4]
 800106a:	4649      	mov	r1, r9
 800106c:	438f      	bics	r7, r1
 800106e:	46ba      	mov	sl, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	2703      	movs	r7, #3
 8001072:	4017      	ands	r7, r2
 8001074:	40b7      	lsls	r7, r6
 8001076:	46b9      	mov	r9, r7
 8001078:	4657      	mov	r7, sl
 800107a:	4649      	mov	r1, r9
 800107c:	430f      	orrs	r7, r1
      GPIOx->MODER = tmp;
 800107e:	6007      	str	r7, [r0, #0]
        tmp = GPIOx->OSPEEDR;
 8001080:	6887      	ldr	r7, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001082:	9901      	ldr	r1, [sp, #4]
 8001084:	400f      	ands	r7, r1
 8001086:	46ba      	mov	sl, r7
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001088:	4647      	mov	r7, r8
 800108a:	68ff      	ldr	r7, [r7, #12]
 800108c:	40b7      	lsls	r7, r6
 800108e:	46b9      	mov	r9, r7
 8001090:	4657      	mov	r7, sl
 8001092:	4649      	mov	r1, r9
 8001094:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = tmp;
 8001096:	6087      	str	r7, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001098:	6841      	ldr	r1, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109a:	000f      	movs	r7, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800109c:	2101      	movs	r1, #1
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109e:	43a7      	bics	r7, r4
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010a0:	0914      	lsrs	r4, r2, #4
 80010a2:	400c      	ands	r4, r1
 80010a4:	409c      	lsls	r4, r3
 80010a6:	433c      	orrs	r4, r7
        GPIOx->OTYPER = tmp;
 80010a8:	6044      	str	r4, [r0, #4]
 80010aa:	e765      	b.n	8000f78 <HAL_GPIO_Init+0x70>
          tmp |= iocurrent;
 80010ac:	4666      	mov	r6, ip
 80010ae:	4331      	orrs	r1, r6
        EXTI->IMR1 = tmp;
 80010b0:	2680      	movs	r6, #128	@ 0x80
 80010b2:	4f12      	ldr	r7, [pc, #72]	@ (80010fc <HAL_GPIO_Init+0x1f4>)
 80010b4:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->EMR1;
 80010b6:	2184      	movs	r1, #132	@ 0x84
 80010b8:	5879      	ldr	r1, [r7, r1]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ba:	0396      	lsls	r6, r2, #14
 80010bc:	d599      	bpl.n	8000ff2 <HAL_GPIO_Init+0xea>
          tmp |= iocurrent;
 80010be:	4666      	mov	r6, ip
 80010c0:	4331      	orrs	r1, r6
        EXTI->EMR1 = tmp;
 80010c2:	2684      	movs	r6, #132	@ 0x84
 80010c4:	4f0d      	ldr	r7, [pc, #52]	@ (80010fc <HAL_GPIO_Init+0x1f4>)
 80010c6:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->RTSR1;
 80010c8:	6839      	ldr	r1, [r7, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ca:	02d6      	lsls	r6, r2, #11
 80010cc:	d598      	bpl.n	8001000 <HAL_GPIO_Init+0xf8>
          tmp |= iocurrent;
 80010ce:	4666      	mov	r6, ip
 80010d0:	4331      	orrs	r1, r6
        EXTI->RTSR1 = tmp;
 80010d2:	4e0a      	ldr	r6, [pc, #40]	@ (80010fc <HAL_GPIO_Init+0x1f4>)
 80010d4:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 80010d6:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d8:	0292      	lsls	r2, r2, #10
 80010da:	d597      	bpl.n	800100c <HAL_GPIO_Init+0x104>
          tmp |= iocurrent;
 80010dc:	4662      	mov	r2, ip
 80010de:	430a      	orrs	r2, r1
 80010e0:	0011      	movs	r1, r2
 80010e2:	e794      	b.n	800100e <HAL_GPIO_Init+0x106>
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80010e4:	2705      	movs	r7, #5
 80010e6:	40b7      	lsls	r7, r6
 80010e8:	433c      	orrs	r4, r7
 80010ea:	e772      	b.n	8000fd2 <HAL_GPIO_Init+0xca>
 80010ec:	2701      	movs	r7, #1
 80010ee:	40b7      	lsls	r7, r6
 80010f0:	433c      	orrs	r4, r7
 80010f2:	e76e      	b.n	8000fd2 <HAL_GPIO_Init+0xca>
 80010f4:	2702      	movs	r7, #2
 80010f6:	40b7      	lsls	r7, r6
 80010f8:	433c      	orrs	r4, r7
 80010fa:	e76a      	b.n	8000fd2 <HAL_GPIO_Init+0xca>
 80010fc:	40021800 	.word	0x40021800
 8001100:	50000400 	.word	0x50000400
 8001104:	50000800 	.word	0x50000800
 8001108:	50001400 	.word	0x50001400

0800110c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800110c:	2a00      	cmp	r2, #0
 800110e:	d001      	beq.n	8001114 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001110:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001112:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001114:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001116:	e7fc      	b.n	8001112 <HAL_GPIO_WritePin+0x6>

08001118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800111c:	d100      	bne.n	8001120 <HAL_RCC_OscConfig+0x8>
 800111e:	e0aa      	b.n	8001276 <HAL_RCC_OscConfig+0x15e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001120:	6803      	ldr	r3, [r0, #0]
 8001122:	07da      	lsls	r2, r3, #31
 8001124:	d52c      	bpl.n	8001180 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001126:	2238      	movs	r2, #56	@ 0x38
 8001128:	4d95      	ldr	r5, [pc, #596]	@ (8001380 <HAL_RCC_OscConfig+0x268>)

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800112a:	6861      	ldr	r1, [r4, #4]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112c:	68a8      	ldr	r0, [r5, #8]
 800112e:	4002      	ands	r2, r0
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001130:	2a08      	cmp	r2, #8
 8001132:	d100      	bne.n	8001136 <HAL_RCC_OscConfig+0x1e>
 8001134:	e09d      	b.n	8001272 <HAL_RCC_OscConfig+0x15a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	4299      	cmp	r1, r3
 800113c:	d100      	bne.n	8001140 <HAL_RCC_OscConfig+0x28>
 800113e:	e0ba      	b.n	80012b6 <HAL_RCC_OscConfig+0x19e>
 8001140:	22a0      	movs	r2, #160	@ 0xa0
 8001142:	02d2      	lsls	r2, r2, #11
 8001144:	4291      	cmp	r1, r2
 8001146:	d100      	bne.n	800114a <HAL_RCC_OscConfig+0x32>
 8001148:	e106      	b.n	8001358 <HAL_RCC_OscConfig+0x240>
 800114a:	682b      	ldr	r3, [r5, #0]
 800114c:	4a8d      	ldr	r2, [pc, #564]	@ (8001384 <HAL_RCC_OscConfig+0x26c>)
 800114e:	4013      	ands	r3, r2
 8001150:	602b      	str	r3, [r5, #0]
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	4a8c      	ldr	r2, [pc, #560]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001156:	4013      	ands	r3, r2
 8001158:	602b      	str	r3, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800115a:	2900      	cmp	r1, #0
 800115c:	d000      	beq.n	8001160 <HAL_RCC_OscConfig+0x48>
 800115e:	e0ad      	b.n	80012bc <HAL_RCC_OscConfig+0x1a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fc9a 	bl	8000a98 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001164:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001166:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001168:	02bf      	lsls	r7, r7, #10
 800116a:	e005      	b.n	8001178 <HAL_RCC_OscConfig+0x60>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800116c:	f7ff fc94 	bl	8000a98 <HAL_GetTick>
 8001170:	1b80      	subs	r0, r0, r6
 8001172:	2864      	cmp	r0, #100	@ 0x64
 8001174:	d900      	bls.n	8001178 <HAL_RCC_OscConfig+0x60>
 8001176:	e0c9      	b.n	800130c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	423b      	tst	r3, r7
 800117c:	d1f6      	bne.n	800116c <HAL_RCC_OscConfig+0x54>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	079a      	lsls	r2, r3, #30
 8001182:	d44b      	bmi.n	800121c <HAL_RCC_OscConfig+0x104>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001184:	071a      	lsls	r2, r3, #28
 8001186:	d51d      	bpl.n	80011c4 <HAL_RCC_OscConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001188:	2238      	movs	r2, #56	@ 0x38
 800118a:	4d7d      	ldr	r5, [pc, #500]	@ (8001380 <HAL_RCC_OscConfig+0x268>)
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800118c:	69a1      	ldr	r1, [r4, #24]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800118e:	68a8      	ldr	r0, [r5, #8]
 8001190:	4002      	ands	r2, r0
 8001192:	2a18      	cmp	r2, #24
 8001194:	d100      	bne.n	8001198 <HAL_RCC_OscConfig+0x80>
 8001196:	e0a2      	b.n	80012de <HAL_RCC_OscConfig+0x1c6>
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001198:	2201      	movs	r2, #1
 800119a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119c:	2900      	cmp	r1, #0
 800119e:	d100      	bne.n	80011a2 <HAL_RCC_OscConfig+0x8a>
 80011a0:	e0c9      	b.n	8001336 <HAL_RCC_OscConfig+0x21e>
        __HAL_RCC_LSI_ENABLE();
 80011a2:	4313      	orrs	r3, r2
 80011a4:	662b      	str	r3, [r5, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fc77 	bl	8000a98 <HAL_GetTick>

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80011aa:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80011ac:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80011ae:	e005      	b.n	80011bc <HAL_RCC_OscConfig+0xa4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc72 	bl	8000a98 <HAL_GetTick>
 80011b4:	1b80      	subs	r0, r0, r6
 80011b6:	2802      	cmp	r0, #2
 80011b8:	d900      	bls.n	80011bc <HAL_RCC_OscConfig+0xa4>
 80011ba:	e0a7      	b.n	800130c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80011bc:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80011be:	421f      	tst	r7, r3
 80011c0:	d0f6      	beq.n	80011b0 <HAL_RCC_OscConfig+0x98>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	2204      	movs	r2, #4
 80011c6:	421a      	tst	r2, r3
 80011c8:	d026      	beq.n	8001218 <HAL_RCC_OscConfig+0x100>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80011ca:	2338      	movs	r3, #56	@ 0x38
 80011cc:	4d6c      	ldr	r5, [pc, #432]	@ (8001380 <HAL_RCC_OscConfig+0x268>)
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80011ce:	68a0      	ldr	r0, [r4, #8]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80011d0:	68a9      	ldr	r1, [r5, #8]
 80011d2:	400b      	ands	r3, r1
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	d100      	bne.n	80011da <HAL_RCC_OscConfig+0xc2>
 80011d8:	e0c7      	b.n	800136a <HAL_RCC_OscConfig+0x252>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011da:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80011dc:	2801      	cmp	r0, #1
 80011de:	d100      	bne.n	80011e2 <HAL_RCC_OscConfig+0xca>
 80011e0:	e081      	b.n	80012e6 <HAL_RCC_OscConfig+0x1ce>
 80011e2:	2805      	cmp	r0, #5
 80011e4:	d100      	bne.n	80011e8 <HAL_RCC_OscConfig+0xd0>
 80011e6:	e0c4      	b.n	8001372 <HAL_RCC_OscConfig+0x25a>
 80011e8:	2101      	movs	r1, #1
 80011ea:	438b      	bics	r3, r1
 80011ec:	65eb      	str	r3, [r5, #92]	@ 0x5c
 80011ee:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80011f0:	4393      	bics	r3, r2
 80011f2:	65eb      	str	r3, [r5, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d000      	beq.n	80011fa <HAL_RCC_OscConfig+0xe2>
 80011f8:	e077      	b.n	80012ea <HAL_RCC_OscConfig+0x1d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fa:	f7ff fc4d 	bl	8000a98 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80011fe:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8001200:	0004      	movs	r4, r0
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001202:	4f62      	ldr	r7, [pc, #392]	@ (800138c <HAL_RCC_OscConfig+0x274>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001204:	e005      	b.n	8001212 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff fc47 	bl	8000a98 <HAL_GetTick>
 800120a:	1b00      	subs	r0, r0, r4
 800120c:	42b8      	cmp	r0, r7
 800120e:	d900      	bls.n	8001212 <HAL_RCC_OscConfig+0xfa>
 8001210:	e07c      	b.n	800130c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001212:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001214:	421e      	tst	r6, r3
 8001216:	d1f6      	bne.n	8001206 <HAL_RCC_OscConfig+0xee>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
 8001218:	2000      	movs	r0, #0
 800121a:	e02d      	b.n	8001278 <HAL_RCC_OscConfig+0x160>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121c:	2238      	movs	r2, #56	@ 0x38
 800121e:	4d58      	ldr	r5, [pc, #352]	@ (8001380 <HAL_RCC_OscConfig+0x268>)
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001220:	68e1      	ldr	r1, [r4, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001222:	68ab      	ldr	r3, [r5, #8]
    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001224:	421a      	tst	r2, r3
 8001226:	d028      	beq.n	800127a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001228:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122a:	2900      	cmp	r1, #0
 800122c:	d100      	bne.n	8001230 <HAL_RCC_OscConfig+0x118>
 800122e:	e06f      	b.n	8001310 <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001230:	4a57      	ldr	r2, [pc, #348]	@ (8001390 <HAL_RCC_OscConfig+0x278>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001232:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001234:	4013      	ands	r3, r2
 8001236:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001238:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800123a:	4313      	orrs	r3, r2
 800123c:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	682a      	ldr	r2, [r5, #0]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4313      	orrs	r3, r2
 8001246:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001248:	f7ff fc26 	bl	8000a98 <HAL_GetTick>
 800124c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800124e:	e004      	b.n	800125a <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001250:	f7ff fc22 	bl	8000a98 <HAL_GetTick>
 8001254:	1b80      	subs	r0, r0, r6
 8001256:	2802      	cmp	r0, #2
 8001258:	d858      	bhi.n	800130c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800125a:	682b      	ldr	r3, [r5, #0]
 800125c:	423b      	tst	r3, r7
 800125e:	d0f7      	beq.n	8001250 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	686a      	ldr	r2, [r5, #4]
 8001262:	6963      	ldr	r3, [r4, #20]
 8001264:	494b      	ldr	r1, [pc, #300]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	400a      	ands	r2, r1
 800126a:	4313      	orrs	r3, r2
 800126c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	e788      	b.n	8001184 <HAL_RCC_OscConfig+0x6c>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001272:	2900      	cmp	r1, #0
 8001274:	d184      	bne.n	8001180 <HAL_RCC_OscConfig+0x68>
    return HAL_ERROR;
 8001276:	2001      	movs	r0, #1
}
 8001278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800127a:	2900      	cmp	r1, #0
 800127c:	d0fb      	beq.n	8001276 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127e:	686a      	ldr	r2, [r5, #4]
 8001280:	6963      	ldr	r3, [r4, #20]
 8001282:	4944      	ldr	r1, [pc, #272]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	400a      	ands	r2, r1
 8001288:	4313      	orrs	r3, r2
 800128a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	4a40      	ldr	r2, [pc, #256]	@ (8001390 <HAL_RCC_OscConfig+0x278>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001290:	4941      	ldr	r1, [pc, #260]	@ (8001398 <HAL_RCC_OscConfig+0x280>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001292:	4013      	ands	r3, r2
 8001294:	6922      	ldr	r2, [r4, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800129a:	682b      	ldr	r3, [r5, #0]
 800129c:	4a3f      	ldr	r2, [pc, #252]	@ (800139c <HAL_RCC_OscConfig+0x284>)
 800129e:	049b      	lsls	r3, r3, #18
 80012a0:	0f5b      	lsrs	r3, r3, #29
 80012a2:	40da      	lsrs	r2, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012a4:	4b3e      	ldr	r3, [pc, #248]	@ (80013a0 <HAL_RCC_OscConfig+0x288>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012a6:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	f7ff fbb7 	bl	8000a1c <HAL_InitTick>
 80012ae:	2800      	cmp	r0, #0
 80012b0:	d1e1      	bne.n	8001276 <HAL_RCC_OscConfig+0x15e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	e766      	b.n	8001184 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012bc:	f7ff fbec 	bl	8000a98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c0:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 80012c2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c4:	4f2e      	ldr	r7, [pc, #184]	@ (8001380 <HAL_RCC_OscConfig+0x268>)
 80012c6:	02b6      	lsls	r6, r6, #10
 80012c8:	e004      	b.n	80012d4 <HAL_RCC_OscConfig+0x1bc>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80012ca:	f7ff fbe5 	bl	8000a98 <HAL_GetTick>
 80012ce:	1b40      	subs	r0, r0, r5
 80012d0:	2864      	cmp	r0, #100	@ 0x64
 80012d2:	d81b      	bhi.n	800130c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	4233      	tst	r3, r6
 80012d8:	d0f7      	beq.n	80012ca <HAL_RCC_OscConfig+0x1b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	e750      	b.n	8001180 <HAL_RCC_OscConfig+0x68>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80012de:	2900      	cmp	r1, #0
 80012e0:	d000      	beq.n	80012e4 <HAL_RCC_OscConfig+0x1cc>
 80012e2:	e76f      	b.n	80011c4 <HAL_RCC_OscConfig+0xac>
 80012e4:	e7c7      	b.n	8001276 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e6:	4303      	orrs	r3, r0
 80012e8:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80012ea:	f7ff fbd5 	bl	8000a98 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80012ee:	2502      	movs	r5, #2
        tickstart = HAL_GetTick();
 80012f0:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80012f2:	4e23      	ldr	r6, [pc, #140]	@ (8001380 <HAL_RCC_OscConfig+0x268>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	4f25      	ldr	r7, [pc, #148]	@ (800138c <HAL_RCC_OscConfig+0x274>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80012f6:	e004      	b.n	8001302 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f8:	f7ff fbce 	bl	8000a98 <HAL_GetTick>
 80012fc:	1b00      	subs	r0, r0, r4
 80012fe:	42b8      	cmp	r0, r7
 8001300:	d804      	bhi.n	800130c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001302:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8001304:	421d      	tst	r5, r3
 8001306:	d0f7      	beq.n	80012f8 <HAL_RCC_OscConfig+0x1e0>
  return HAL_OK;
 8001308:	2000      	movs	r0, #0
 800130a:	e7b5      	b.n	8001278 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 800130c:	2003      	movs	r0, #3
 800130e:	e7b3      	b.n	8001278 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 8001310:	4a24      	ldr	r2, [pc, #144]	@ (80013a4 <HAL_RCC_OscConfig+0x28c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001312:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8001314:	4013      	ands	r3, r2
 8001316:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001318:	f7ff fbbe 	bl	8000a98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800131c:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 800131e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001320:	e004      	b.n	800132c <HAL_RCC_OscConfig+0x214>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001322:	f7ff fbb9 	bl	8000a98 <HAL_GetTick>
 8001326:	1b80      	subs	r0, r0, r6
 8001328:	2802      	cmp	r0, #2
 800132a:	d8ef      	bhi.n	800130c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	423b      	tst	r3, r7
 8001330:	d1f7      	bne.n	8001322 <HAL_RCC_OscConfig+0x20a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	e726      	b.n	8001184 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_LSI_DISABLE();
 8001336:	4393      	bics	r3, r2
 8001338:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800133a:	f7ff fbad 	bl	8000a98 <HAL_GetTick>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800133e:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001340:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001342:	e004      	b.n	800134e <HAL_RCC_OscConfig+0x236>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001344:	f7ff fba8 	bl	8000a98 <HAL_GetTick>
 8001348:	1b80      	subs	r0, r0, r6
 800134a:	2802      	cmp	r0, #2
 800134c:	d8de      	bhi.n	800130c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800134e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001350:	421f      	tst	r7, r3
 8001352:	d1f7      	bne.n	8001344 <HAL_RCC_OscConfig+0x22c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	e735      	b.n	80011c4 <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001358:	2280      	movs	r2, #128	@ 0x80
 800135a:	6829      	ldr	r1, [r5, #0]
 800135c:	02d2      	lsls	r2, r2, #11
 800135e:	430a      	orrs	r2, r1
 8001360:	602a      	str	r2, [r5, #0]
 8001362:	682a      	ldr	r2, [r5, #0]
 8001364:	4313      	orrs	r3, r2
 8001366:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001368:	e7a8      	b.n	80012bc <HAL_RCC_OscConfig+0x1a4>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800136a:	4243      	negs	r3, r0
 800136c:	4158      	adcs	r0, r3
 800136e:	b2c0      	uxtb	r0, r0
 8001370:	e782      	b.n	8001278 <HAL_RCC_OscConfig+0x160>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001372:	4313      	orrs	r3, r2
 8001374:	2201      	movs	r2, #1
 8001376:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8001378:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800137a:	4313      	orrs	r3, r2
 800137c:	65eb      	str	r3, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800137e:	e7b4      	b.n	80012ea <HAL_RCC_OscConfig+0x1d2>
 8001380:	40021000 	.word	0x40021000
 8001384:	fffeffff 	.word	0xfffeffff
 8001388:	fffbffff 	.word	0xfffbffff
 800138c:	00001388 	.word	0x00001388
 8001390:	ffffc7ff 	.word	0xffffc7ff
 8001394:	ffff80ff 	.word	0xffff80ff
 8001398:	20000000 	.word	0x20000000
 800139c:	02dc6c00 	.word	0x02dc6c00
 80013a0:	20000008 	.word	0x20000008
 80013a4:	fffffeff 	.word	0xfffffeff

080013a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013aa:	46ce      	mov	lr, r9
 80013ac:	4647      	mov	r7, r8
 80013ae:	0005      	movs	r5, r0
 80013b0:	000c      	movs	r4, r1
 80013b2:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d100      	bne.n	80013ba <HAL_RCC_ClockConfig+0x12>
 80013b8:	e083      	b.n	80014c2 <HAL_RCC_ClockConfig+0x11a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013ba:	2207      	movs	r2, #7
 80013bc:	4e67      	ldr	r6, [pc, #412]	@ (800155c <HAL_RCC_ClockConfig+0x1b4>)
 80013be:	6833      	ldr	r3, [r6, #0]
 80013c0:	4013      	ands	r3, r2
 80013c2:	428b      	cmp	r3, r1
 80013c4:	d200      	bcs.n	80013c8 <HAL_RCC_ClockConfig+0x20>
 80013c6:	e081      	b.n	80014cc <HAL_RCC_ClockConfig+0x124>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	079a      	lsls	r2, r3, #30
 80013cc:	d510      	bpl.n	80013f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ce:	075a      	lsls	r2, r3, #29
 80013d0:	d507      	bpl.n	80013e2 <HAL_RCC_ClockConfig+0x3a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013d2:	4863      	ldr	r0, [pc, #396]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	4a63      	ldr	r2, [pc, #396]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	6881      	ldr	r1, [r0, #8]
 80013d8:	4011      	ands	r1, r2
 80013da:	22b0      	movs	r2, #176	@ 0xb0
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	430a      	orrs	r2, r1
 80013e0:	6082      	str	r2, [r0, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e2:	495f      	ldr	r1, [pc, #380]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013e4:	4860      	ldr	r0, [pc, #384]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013e6:	688a      	ldr	r2, [r1, #8]
 80013e8:	4002      	ands	r2, r0
 80013ea:	68e8      	ldr	r0, [r5, #12]
 80013ec:	4302      	orrs	r2, r0
 80013ee:	608a      	str	r2, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f0:	07db      	lsls	r3, r3, #31
 80013f2:	d529      	bpl.n	8001448 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80013f4:	211c      	movs	r1, #28
 80013f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	6813      	ldr	r3, [r2, #0]
 80013fa:	438b      	bics	r3, r1
 80013fc:	68a9      	ldr	r1, [r5, #8]
 80013fe:	430b      	orrs	r3, r1
 8001400:	6013      	str	r3, [r2, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001402:	6869      	ldr	r1, [r5, #4]
 8001404:	2901      	cmp	r1, #1
 8001406:	d059      	beq.n	80014bc <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001408:	2900      	cmp	r1, #0
 800140a:	d000      	beq.n	800140e <HAL_RCC_ClockConfig+0x66>
 800140c:	e07c      	b.n	8001508 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800140e:	6813      	ldr	r3, [r2, #0]
 8001410:	055b      	lsls	r3, r3, #21
 8001412:	d556      	bpl.n	80014c2 <HAL_RCC_ClockConfig+0x11a>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001414:	2207      	movs	r2, #7
 8001416:	4e52      	ldr	r6, [pc, #328]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 8001418:	68b3      	ldr	r3, [r6, #8]
 800141a:	4393      	bics	r3, r2
 800141c:	430b      	orrs	r3, r1
 800141e:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001420:	f7ff fb3a 	bl	8000a98 <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001424:	2338      	movs	r3, #56	@ 0x38
 8001426:	4698      	mov	r8, r3
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001428:	4b50      	ldr	r3, [pc, #320]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 800142a:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800142c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	e004      	b.n	800143a <HAL_RCC_ClockConfig+0x92>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff fb32 	bl	8000a98 <HAL_GetTick>
 8001434:	1bc0      	subs	r0, r0, r7
 8001436:	4548      	cmp	r0, r9
 8001438:	d85e      	bhi.n	80014f8 <HAL_RCC_ClockConfig+0x150>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143a:	4643      	mov	r3, r8
 800143c:	68b2      	ldr	r2, [r6, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	686b      	ldr	r3, [r5, #4]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	429a      	cmp	r2, r3
 8001446:	d1f3      	bne.n	8001430 <HAL_RCC_ClockConfig+0x88>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001448:	2207      	movs	r2, #7
 800144a:	4e44      	ldr	r6, [pc, #272]	@ (800155c <HAL_RCC_ClockConfig+0x1b4>)
 800144c:	6833      	ldr	r3, [r6, #0]
 800144e:	4013      	ands	r3, r2
 8001450:	42a3      	cmp	r3, r4
 8001452:	d860      	bhi.n	8001516 <HAL_RCC_ClockConfig+0x16e>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	075b      	lsls	r3, r3, #29
 8001458:	d506      	bpl.n	8001468 <HAL_RCC_ClockConfig+0xc0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800145a:	4a41      	ldr	r2, [pc, #260]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	4944      	ldr	r1, [pc, #272]	@ (8001570 <HAL_RCC_ClockConfig+0x1c8>)
 800145e:	6893      	ldr	r3, [r2, #8]
 8001460:	400b      	ands	r3, r1
 8001462:	6929      	ldr	r1, [r5, #16]
 8001464:	430b      	orrs	r3, r1
 8001466:	6093      	str	r3, [r2, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001468:	2338      	movs	r3, #56	@ 0x38
 800146a:	4a3d      	ldr	r2, [pc, #244]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 800146c:	6891      	ldr	r1, [r2, #8]
 800146e:	420b      	tst	r3, r1
 8001470:	d044      	beq.n	80014fc <HAL_RCC_ClockConfig+0x154>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001472:	6891      	ldr	r1, [r2, #8]
 8001474:	4019      	ands	r1, r3
 8001476:	2908      	cmp	r1, #8
 8001478:	d065      	beq.n	8001546 <HAL_RCC_ClockConfig+0x19e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800147a:	6891      	ldr	r1, [r2, #8]
 800147c:	4019      	ands	r1, r3
 800147e:	2920      	cmp	r1, #32
 8001480:	d068      	beq.n	8001554 <HAL_RCC_ClockConfig+0x1ac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001482:	6892      	ldr	r2, [r2, #8]
 8001484:	4013      	ands	r3, r2
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001486:	3b18      	subs	r3, #24
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	4193      	sbcs	r3, r2
 800148c:	4a39      	ldr	r2, [pc, #228]	@ (8001574 <HAL_RCC_ClockConfig+0x1cc>)
 800148e:	425b      	negs	r3, r3
 8001490:	4013      	ands	r3, r2
 8001492:	22fa      	movs	r2, #250	@ 0xfa
 8001494:	01d2      	lsls	r2, r2, #7
 8001496:	4694      	mov	ip, r2
 8001498:	4463      	add	r3, ip
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800149a:	4a31      	ldr	r2, [pc, #196]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	4936      	ldr	r1, [pc, #216]	@ (8001578 <HAL_RCC_ClockConfig+0x1d0>)
 800149e:	6892      	ldr	r2, [r2, #8]
 80014a0:	4836      	ldr	r0, [pc, #216]	@ (800157c <HAL_RCC_ClockConfig+0x1d4>)
 80014a2:	0512      	lsls	r2, r2, #20
 80014a4:	0f12      	lsrs	r2, r2, #28
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	5852      	ldr	r2, [r2, r1]
 80014aa:	211f      	movs	r1, #31
 80014ac:	400a      	ands	r2, r1
 80014ae:	40d3      	lsrs	r3, r2
 80014b0:	6003      	str	r3, [r0, #0]
  return HAL_InitTick(uwTickPrio);
 80014b2:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <HAL_RCC_ClockConfig+0x1d8>)
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	f7ff fab1 	bl	8000a1c <HAL_InitTick>
 80014ba:	e003      	b.n	80014c4 <HAL_RCC_ClockConfig+0x11c>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	039b      	lsls	r3, r3, #14
 80014c0:	d4a8      	bmi.n	8001414 <HAL_RCC_ClockConfig+0x6c>
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
}
 80014c4:	bcc0      	pop	{r6, r7}
 80014c6:	46b9      	mov	r9, r7
 80014c8:	46b0      	mov	r8, r6
 80014ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014cc:	6833      	ldr	r3, [r6, #0]
 80014ce:	4393      	bics	r3, r2
 80014d0:	430b      	orrs	r3, r1
 80014d2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80014d4:	f7ff fae0 	bl	8000a98 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014d8:	2307      	movs	r3, #7
 80014da:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014dc:	4b23      	ldr	r3, [pc, #140]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 80014de:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014e0:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014e2:	4642      	mov	r2, r8
 80014e4:	6833      	ldr	r3, [r6, #0]
 80014e6:	4013      	ands	r3, r2
 80014e8:	42a3      	cmp	r3, r4
 80014ea:	d100      	bne.n	80014ee <HAL_RCC_ClockConfig+0x146>
 80014ec:	e76c      	b.n	80013c8 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014ee:	f7ff fad3 	bl	8000a98 <HAL_GetTick>
 80014f2:	1bc0      	subs	r0, r0, r7
 80014f4:	4548      	cmp	r0, r9
 80014f6:	d9f4      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 80014f8:	2003      	movs	r0, #3
 80014fa:	e7e3      	b.n	80014c4 <HAL_RCC_ClockConfig+0x11c>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014fc:	6812      	ldr	r2, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <HAL_RCC_ClockConfig+0x1dc>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001500:	0492      	lsls	r2, r2, #18
 8001502:	0f52      	lsrs	r2, r2, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001504:	40d3      	lsrs	r3, r2
 8001506:	e7c8      	b.n	800149a <HAL_RCC_ClockConfig+0xf2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001508:	2903      	cmp	r1, #3
 800150a:	d01e      	beq.n	800154a <HAL_RCC_ClockConfig+0x1a2>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800150c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800150e:	079b      	lsls	r3, r3, #30
 8001510:	d500      	bpl.n	8001514 <HAL_RCC_ClockConfig+0x16c>
 8001512:	e77f      	b.n	8001414 <HAL_RCC_ClockConfig+0x6c>
 8001514:	e7d5      	b.n	80014c2 <HAL_RCC_ClockConfig+0x11a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	6833      	ldr	r3, [r6, #0]
 8001518:	4393      	bics	r3, r2
 800151a:	4323      	orrs	r3, r4
 800151c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800151e:	f7ff fabb 	bl	8000a98 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001522:	2307      	movs	r3, #7
 8001524:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8001528:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800152a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800152c:	4642      	mov	r2, r8
 800152e:	6833      	ldr	r3, [r6, #0]
 8001530:	4013      	ands	r3, r2
 8001532:	42a3      	cmp	r3, r4
 8001534:	d100      	bne.n	8001538 <HAL_RCC_ClockConfig+0x190>
 8001536:	e78d      	b.n	8001454 <HAL_RCC_ClockConfig+0xac>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001538:	f7ff faae 	bl	8000a98 <HAL_GetTick>
 800153c:	1bc0      	subs	r0, r0, r7
 800153e:	4548      	cmp	r0, r9
 8001540:	d9f4      	bls.n	800152c <HAL_RCC_ClockConfig+0x184>
        return HAL_TIMEOUT;
 8001542:	2003      	movs	r0, #3
 8001544:	e7be      	b.n	80014c4 <HAL_RCC_ClockConfig+0x11c>
    sysclockfreq = HSE_VALUE;
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_RCC_ClockConfig+0x1e0>)
 8001548:	e7a7      	b.n	800149a <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800154a:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800154c:	079b      	lsls	r3, r3, #30
 800154e:	d500      	bpl.n	8001552 <HAL_RCC_ClockConfig+0x1aa>
 8001550:	e760      	b.n	8001414 <HAL_RCC_ClockConfig+0x6c>
 8001552:	e7b6      	b.n	80014c2 <HAL_RCC_ClockConfig+0x11a>
    sysclockfreq = LSE_VALUE;
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	e79f      	b.n	800149a <HAL_RCC_ClockConfig+0xf2>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	40022000 	.word	0x40022000
 8001560:	40021000 	.word	0x40021000
 8001564:	ffff84ff 	.word	0xffff84ff
 8001568:	fffff0ff 	.word	0xfffff0ff
 800156c:	00001388 	.word	0x00001388
 8001570:	ffff8fff 	.word	0xffff8fff
 8001574:	ffff8300 	.word	0xffff8300
 8001578:	080029f4 	.word	0x080029f4
 800157c:	20000000 	.word	0x20000000
 8001580:	20000008 	.word	0x20000008
 8001584:	02dc6c00 	.word	0x02dc6c00
 8001588:	007a1200 	.word	0x007a1200

0800158c <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800158c:	2038      	movs	r0, #56	@ 0x38
 800158e:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	4210      	tst	r0, r2
 8001594:	d105      	bne.n	80015a2 <HAL_RCC_GetSysClockFreq+0x16>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001596:	681b      	ldr	r3, [r3, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001598:	4810      	ldr	r0, [pc, #64]	@ (80015dc <HAL_RCC_GetSysClockFreq+0x50>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800159a:	049b      	lsls	r3, r3, #18
 800159c:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800159e:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80015a0:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	4002      	ands	r2, r0
 80015a6:	2a08      	cmp	r2, #8
 80015a8:	d010      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x40>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	4002      	ands	r2, r0
 80015ae:	2a20      	cmp	r2, #32
 80015b0:	d00e      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 80015b6:	3818      	subs	r0, #24
 80015b8:	1e43      	subs	r3, r0, #1
 80015ba:	4198      	sbcs	r0, r3
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x54>)
 80015be:	4240      	negs	r0, r0
 80015c0:	4018      	ands	r0, r3
 80015c2:	23fa      	movs	r3, #250	@ 0xfa
 80015c4:	01db      	lsls	r3, r3, #7
 80015c6:	469c      	mov	ip, r3
 80015c8:	4460      	add	r0, ip
 80015ca:	e7e9      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = HSE_VALUE;
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x58>)
 80015ce:	e7e7      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = LSE_VALUE;
 80015d0:	2080      	movs	r0, #128	@ 0x80
 80015d2:	0200      	lsls	r0, r0, #8
 80015d4:	e7e4      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x14>
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	40021000 	.word	0x40021000
 80015dc:	02dc6c00 	.word	0x02dc6c00
 80015e0:	ffff8300 	.word	0xffff8300
 80015e4:	007a1200 	.word	0x007a1200

080015e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015ea:	4907      	ldr	r1, [pc, #28]	@ (8001608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015ec:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80015ee:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_RCC_GetPCLK1Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80015f0:	045b      	lsls	r3, r3, #17
 80015f2:	0f5b      	lsrs	r3, r3, #29
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	585b      	ldr	r3, [r3, r1]
 80015f8:	211f      	movs	r1, #31
 80015fa:	6810      	ldr	r0, [r2, #0]
 80015fc:	400b      	ands	r3, r1
 80015fe:	40d8      	lsrs	r0, r3
}
 8001600:	4770      	bx	lr
 8001602:	46c0      	nop			@ (mov r8, r8)
 8001604:	40021000 	.word	0x40021000
 8001608:	080029d4 	.word	0x080029d4
 800160c:	20000000 	.word	0x20000000

08001610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	46ce      	mov	lr, r9
 8001614:	4647      	mov	r7, r8
 8001616:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001618:	6803      	ldr	r3, [r0, #0]
{
 800161a:	0004      	movs	r4, r0
 800161c:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800161e:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001620:	039a      	lsls	r2, r3, #14
 8001622:	d53c      	bpl.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x8e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001624:	2180      	movs	r1, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2500      	movs	r5, #0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001628:	4a3f      	ldr	r2, [pc, #252]	@ (8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800162a:	0549      	lsls	r1, r1, #21
 800162c:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800162e:	46a8      	mov	r8, r5
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001630:	4208      	tst	r0, r1
 8001632:	d066      	beq.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      pwrclkchanged = SET;
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001634:	4d3c      	ldr	r5, [pc, #240]	@ (8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001636:	22c0      	movs	r2, #192	@ 0xc0
 8001638:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	000e      	movs	r6, r1

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800163e:	69a0      	ldr	r0, [r4, #24]
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001640:	4016      	ands	r6, r2
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001642:	4211      	tst	r1, r2
 8001644:	d021      	beq.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001646:	4286      	cmp	r6, r0
 8001648:	d01f      	beq.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800164a:	2680      	movs	r6, #128	@ 0x80
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800164c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_FORCE();
 800164e:	6def      	ldr	r7, [r5, #92]	@ 0x5c
 8001650:	0276      	lsls	r6, r6, #9
 8001652:	433e      	orrs	r6, r7
 8001654:	65ee      	str	r6, [r5, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001656:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001658:	4934      	ldr	r1, [pc, #208]	@ (800172c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800165a:	4f35      	ldr	r7, [pc, #212]	@ (8001730 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800165c:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 800165e:	403e      	ands	r6, r7
 8001660:	65ee      	str	r6, [r5, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001662:	65e9      	str	r1, [r5, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001664:	07d2      	lsls	r2, r2, #31
 8001666:	d510      	bpl.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fa16 	bl	8000a98 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      tickstart = HAL_GetTick();
 800166e:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001670:	2702      	movs	r7, #2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	4699      	mov	r9, r3
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001674:	e004      	b.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x70>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fa0f 	bl	8000a98 <HAL_GetTick>
 800167a:	1b80      	subs	r0, r0, r6
 800167c:	4548      	cmp	r0, r9
 800167e:	d850      	bhi.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x112>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001680:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001682:	421f      	tst	r7, r3
 8001684:	d0f7      	beq.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001686:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001688:	69a0      	ldr	r0, [r4, #24]
 800168a:	4927      	ldr	r1, [pc, #156]	@ (8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800168c:	4d27      	ldr	r5, [pc, #156]	@ (800172c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800168e:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8001690:	402a      	ands	r2, r5
 8001692:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001694:	2000      	movs	r0, #0
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001696:	65ca      	str	r2, [r1, #92]	@ 0x5c
    if (pwrclkchanged == SET)
 8001698:	4642      	mov	r2, r8
 800169a:	2a01      	cmp	r2, #1
 800169c:	d03b      	beq.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x106>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800169e:	07da      	lsls	r2, r3, #31
 80016a0:	d506      	bpl.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016a2:	2503      	movs	r5, #3
 80016a4:	4920      	ldr	r1, [pc, #128]	@ (8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80016a6:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80016a8:	43aa      	bics	r2, r5
 80016aa:	68a5      	ldr	r5, [r4, #8]
 80016ac:	432a      	orrs	r2, r5
 80016ae:	654a      	str	r2, [r1, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016b0:	065a      	lsls	r2, r3, #25
 80016b2:	d506      	bpl.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016b4:	491c      	ldr	r1, [pc, #112]	@ (8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80016b6:	4d20      	ldr	r5, [pc, #128]	@ (8001738 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80016b8:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80016ba:	402a      	ands	r2, r5
 80016bc:	68e5      	ldr	r5, [r4, #12]
 80016be:	432a      	orrs	r2, r5
 80016c0:	654a      	str	r2, [r1, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80016c2:	045a      	lsls	r2, r3, #17
 80016c4:	d506      	bpl.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016c6:	4918      	ldr	r1, [pc, #96]	@ (8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80016c8:	6965      	ldr	r5, [r4, #20]
 80016ca:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	0892      	lsrs	r2, r2, #2
 80016d0:	432a      	orrs	r2, r5
 80016d2:	654a      	str	r2, [r1, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80016d4:	051a      	lsls	r2, r3, #20
 80016d6:	d506      	bpl.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80016d8:	4913      	ldr	r1, [pc, #76]	@ (8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80016da:	4d18      	ldr	r5, [pc, #96]	@ (800173c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80016dc:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80016de:	402a      	ands	r2, r5
 80016e0:	6925      	ldr	r5, [r4, #16]
 80016e2:	432a      	orrs	r2, r5
 80016e4:	654a      	str	r2, [r1, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da06      	bge.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80016ea:	21e0      	movs	r1, #224	@ 0xe0
 80016ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80016ee:	6813      	ldr	r3, [r2, #0]
 80016f0:	438b      	bics	r3, r1
 80016f2:	6861      	ldr	r1, [r4, #4]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 80016f8:	b003      	add	sp, #12
 80016fa:	bcc0      	pop	{r6, r7}
 80016fc:	46b9      	mov	r9, r7
 80016fe:	46b0      	mov	r8, r6
 8001700:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
 8001704:	4308      	orrs	r0, r1
 8001706:	63d0      	str	r0, [r2, #60]	@ 0x3c
 8001708:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800170a:	400a      	ands	r2, r1
 800170c:	9201      	str	r2, [sp, #4]
 800170e:	9a01      	ldr	r2, [sp, #4]
      pwrclkchanged = SET;
 8001710:	2201      	movs	r2, #1
 8001712:	4690      	mov	r8, r2
 8001714:	e78e      	b.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001716:	4904      	ldr	r1, [pc, #16]	@ (8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001718:	4d09      	ldr	r5, [pc, #36]	@ (8001740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800171a:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800171c:	402a      	ands	r2, r5
 800171e:	63ca      	str	r2, [r1, #60]	@ 0x3c
 8001720:	e7bd      	b.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x8e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001722:	2003      	movs	r0, #3
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	e7b7      	b.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8001728:	40021000 	.word	0x40021000
 800172c:	fffffcff 	.word	0xfffffcff
 8001730:	fffeffff 	.word	0xfffeffff
 8001734:	00001388 	.word	0x00001388
 8001738:	ffffcfff 	.word	0xffffcfff
 800173c:	ffff3fff 	.word	0xffff3fff
 8001740:	efffffff 	.word	0xefffffff

08001744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001744:	b570      	push	{r4, r5, r6, lr}
 8001746:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001748:	d05c      	beq.n	8001804 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800174a:	233d      	movs	r3, #61	@ 0x3d
 800174c:	5cc3      	ldrb	r3, [r0, r3]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d049      	beq.n	80017e8 <HAL_TIM_Base_Init+0xa4>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001754:	233d      	movs	r3, #61	@ 0x3d
 8001756:	2202      	movs	r2, #2
 8001758:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800175c:	4e30      	ldr	r6, [pc, #192]	@ (8001820 <HAL_TIM_Base_Init+0xdc>)
  tmpcr1 = TIMx->CR1;
 800175e:	6813      	ldr	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001760:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001762:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001764:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001766:	42b2      	cmp	r2, r6
 8001768:	d012      	beq.n	8001790 <HAL_TIM_Base_Init+0x4c>
 800176a:	4e2e      	ldr	r6, [pc, #184]	@ (8001824 <HAL_TIM_Base_Init+0xe0>)
 800176c:	42b2      	cmp	r2, r6
 800176e:	d040      	beq.n	80017f2 <HAL_TIM_Base_Init+0xae>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001770:	4e2d      	ldr	r6, [pc, #180]	@ (8001828 <HAL_TIM_Base_Init+0xe4>)
 8001772:	42b2      	cmp	r2, r6
 8001774:	d041      	beq.n	80017fa <HAL_TIM_Base_Init+0xb6>
 8001776:	4e2d      	ldr	r6, [pc, #180]	@ (800182c <HAL_TIM_Base_Init+0xe8>)
 8001778:	42b2      	cmp	r2, r6
 800177a:	d00d      	beq.n	8001798 <HAL_TIM_Base_Init+0x54>
 800177c:	4e2c      	ldr	r6, [pc, #176]	@ (8001830 <HAL_TIM_Base_Init+0xec>)
 800177e:	42b2      	cmp	r2, r6
 8001780:	d042      	beq.n	8001808 <HAL_TIM_Base_Init+0xc4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001782:	2680      	movs	r6, #128	@ 0x80
 8001784:	43b3      	bics	r3, r6
 8001786:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001788:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800178a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800178c:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800178e:	e00f      	b.n	80017b0 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001790:	2670      	movs	r6, #112	@ 0x70
 8001792:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8001794:	68a6      	ldr	r6, [r4, #8]
 8001796:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001798:	4e26      	ldr	r6, [pc, #152]	@ (8001834 <HAL_TIM_Base_Init+0xf0>)
 800179a:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800179c:	6926      	ldr	r6, [r4, #16]
 800179e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017a0:	2680      	movs	r6, #128	@ 0x80
 80017a2:	43b3      	bics	r3, r6
 80017a4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80017a6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017a8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017aa:	6291      	str	r1, [r2, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017ac:	6963      	ldr	r3, [r4, #20]
 80017ae:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017b0:	2301      	movs	r3, #1
 80017b2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017b4:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017b8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ba:	3a0a      	subs	r2, #10
 80017bc:	54a3      	strb	r3, [r4, r2]
 80017be:	3201      	adds	r2, #1
 80017c0:	54a3      	strb	r3, [r4, r2]
 80017c2:	3201      	adds	r2, #1
 80017c4:	54a3      	strb	r3, [r4, r2]
 80017c6:	3201      	adds	r2, #1
 80017c8:	54a3      	strb	r3, [r4, r2]
 80017ca:	3201      	adds	r2, #1
 80017cc:	54a3      	strb	r3, [r4, r2]
 80017ce:	3201      	adds	r2, #1
 80017d0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d2:	3201      	adds	r2, #1
 80017d4:	54a3      	strb	r3, [r4, r2]
 80017d6:	3201      	adds	r2, #1
 80017d8:	54a3      	strb	r3, [r4, r2]
 80017da:	3201      	adds	r2, #1
 80017dc:	54a3      	strb	r3, [r4, r2]
 80017de:	3201      	adds	r2, #1
 80017e0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80017e2:	3a0a      	subs	r2, #10
 80017e4:	54a3      	strb	r3, [r4, r2]
}
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80017e8:	333c      	adds	r3, #60	@ 0x3c
 80017ea:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80017ec:	f7fe ffee 	bl	80007cc <HAL_TIM_Base_MspInit>
 80017f0:	e7b0      	b.n	8001754 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017f2:	2670      	movs	r6, #112	@ 0x70
 80017f4:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 80017f6:	68a6      	ldr	r6, [r4, #8]
 80017f8:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80017fa:	4e0e      	ldr	r6, [pc, #56]	@ (8001834 <HAL_TIM_Base_Init+0xf0>)
 80017fc:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017fe:	6926      	ldr	r6, [r4, #16]
 8001800:	4333      	orrs	r3, r6
 8001802:	e7be      	b.n	8001782 <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8001804:	2001      	movs	r0, #1
 8001806:	e7ee      	b.n	80017e6 <HAL_TIM_Base_Init+0xa2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001808:	4e0a      	ldr	r6, [pc, #40]	@ (8001834 <HAL_TIM_Base_Init+0xf0>)
 800180a:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800180c:	6926      	ldr	r6, [r4, #16]
 800180e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001810:	2680      	movs	r6, #128	@ 0x80
 8001812:	43b3      	bics	r3, r6
 8001814:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8001816:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001818:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800181a:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800181c:	e7c6      	b.n	80017ac <HAL_TIM_Base_Init+0x68>
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	40012c00 	.word	0x40012c00
 8001824:	40000400 	.word	0x40000400
 8001828:	40002000 	.word	0x40002000
 800182c:	40014400 	.word	0x40014400
 8001830:	40014800 	.word	0x40014800
 8001834:	fffffcff 	.word	0xfffffcff

08001838 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8001838:	4770      	bx	lr
 800183a:	46c0      	nop			@ (mov r8, r8)

0800183c <HAL_TIM_PWM_Init>:
{
 800183c:	b570      	push	{r4, r5, r6, lr}
 800183e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001840:	d05c      	beq.n	80018fc <HAL_TIM_PWM_Init+0xc0>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	233d      	movs	r3, #61	@ 0x3d
 8001844:	5cc3      	ldrb	r3, [r0, r3]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d049      	beq.n	80018e0 <HAL_TIM_PWM_Init+0xa4>
  htim->State = HAL_TIM_STATE_BUSY;
 800184c:	233d      	movs	r3, #61	@ 0x3d
 800184e:	2202      	movs	r2, #2
 8001850:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001852:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001854:	4e30      	ldr	r6, [pc, #192]	@ (8001918 <HAL_TIM_PWM_Init+0xdc>)
  tmpcr1 = TIMx->CR1;
 8001856:	6813      	ldr	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8001858:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800185a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800185c:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800185e:	42b2      	cmp	r2, r6
 8001860:	d012      	beq.n	8001888 <HAL_TIM_PWM_Init+0x4c>
 8001862:	4e2e      	ldr	r6, [pc, #184]	@ (800191c <HAL_TIM_PWM_Init+0xe0>)
 8001864:	42b2      	cmp	r2, r6
 8001866:	d040      	beq.n	80018ea <HAL_TIM_PWM_Init+0xae>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001868:	4e2d      	ldr	r6, [pc, #180]	@ (8001920 <HAL_TIM_PWM_Init+0xe4>)
 800186a:	42b2      	cmp	r2, r6
 800186c:	d041      	beq.n	80018f2 <HAL_TIM_PWM_Init+0xb6>
 800186e:	4e2d      	ldr	r6, [pc, #180]	@ (8001924 <HAL_TIM_PWM_Init+0xe8>)
 8001870:	42b2      	cmp	r2, r6
 8001872:	d00d      	beq.n	8001890 <HAL_TIM_PWM_Init+0x54>
 8001874:	4e2c      	ldr	r6, [pc, #176]	@ (8001928 <HAL_TIM_PWM_Init+0xec>)
 8001876:	42b2      	cmp	r2, r6
 8001878:	d042      	beq.n	8001900 <HAL_TIM_PWM_Init+0xc4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800187a:	2680      	movs	r6, #128	@ 0x80
 800187c:	43b3      	bics	r3, r6
 800187e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001880:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001882:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001884:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001886:	e00f      	b.n	80018a8 <HAL_TIM_PWM_Init+0x6c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001888:	2670      	movs	r6, #112	@ 0x70
 800188a:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 800188c:	68a6      	ldr	r6, [r4, #8]
 800188e:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001890:	4e26      	ldr	r6, [pc, #152]	@ (800192c <HAL_TIM_PWM_Init+0xf0>)
 8001892:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001894:	6926      	ldr	r6, [r4, #16]
 8001896:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001898:	2680      	movs	r6, #128	@ 0x80
 800189a:	43b3      	bics	r3, r6
 800189c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800189e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018a0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018a2:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80018a4:	6963      	ldr	r3, [r4, #20]
 80018a6:	6313      	str	r3, [r2, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80018a8:	2301      	movs	r3, #1
 80018aa:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018ac:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 80018ae:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018b0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b2:	3a0a      	subs	r2, #10
 80018b4:	54a3      	strb	r3, [r4, r2]
 80018b6:	3201      	adds	r2, #1
 80018b8:	54a3      	strb	r3, [r4, r2]
 80018ba:	3201      	adds	r2, #1
 80018bc:	54a3      	strb	r3, [r4, r2]
 80018be:	3201      	adds	r2, #1
 80018c0:	54a3      	strb	r3, [r4, r2]
 80018c2:	3201      	adds	r2, #1
 80018c4:	54a3      	strb	r3, [r4, r2]
 80018c6:	3201      	adds	r2, #1
 80018c8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ca:	3201      	adds	r2, #1
 80018cc:	54a3      	strb	r3, [r4, r2]
 80018ce:	3201      	adds	r2, #1
 80018d0:	54a3      	strb	r3, [r4, r2]
 80018d2:	3201      	adds	r2, #1
 80018d4:	54a3      	strb	r3, [r4, r2]
 80018d6:	3201      	adds	r2, #1
 80018d8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80018da:	3a0a      	subs	r2, #10
 80018dc:	54a3      	strb	r3, [r4, r2]
}
 80018de:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80018e0:	333c      	adds	r3, #60	@ 0x3c
 80018e2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80018e4:	f7ff ffa8 	bl	8001838 <HAL_TIM_PWM_MspInit>
 80018e8:	e7b0      	b.n	800184c <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ea:	2670      	movs	r6, #112	@ 0x70
 80018ec:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 80018ee:	68a6      	ldr	r6, [r4, #8]
 80018f0:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80018f2:	4e0e      	ldr	r6, [pc, #56]	@ (800192c <HAL_TIM_PWM_Init+0xf0>)
 80018f4:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018f6:	6926      	ldr	r6, [r4, #16]
 80018f8:	4333      	orrs	r3, r6
 80018fa:	e7be      	b.n	800187a <HAL_TIM_PWM_Init+0x3e>
    return HAL_ERROR;
 80018fc:	2001      	movs	r0, #1
 80018fe:	e7ee      	b.n	80018de <HAL_TIM_PWM_Init+0xa2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001900:	4e0a      	ldr	r6, [pc, #40]	@ (800192c <HAL_TIM_PWM_Init+0xf0>)
 8001902:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001904:	6926      	ldr	r6, [r4, #16]
 8001906:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001908:	2680      	movs	r6, #128	@ 0x80
 800190a:	43b3      	bics	r3, r6
 800190c:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 800190e:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001910:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001912:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001914:	e7c6      	b.n	80018a4 <HAL_TIM_PWM_Init+0x68>
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	40012c00 	.word	0x40012c00
 800191c:	40000400 	.word	0x40000400
 8001920:	40002000 	.word	0x40002000
 8001924:	40014400 	.word	0x40014400
 8001928:	40014800 	.word	0x40014800
 800192c:	fffffcff 	.word	0xfffffcff

08001930 <HAL_TIM_PWM_MspDeInit>:
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
 8001930:	4770      	bx	lr
 8001932:	46c0      	nop			@ (mov r8, r8)

08001934 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001934:	233d      	movs	r3, #61	@ 0x3d
 8001936:	2202      	movs	r2, #2
{
 8001938:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 800193a:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 800193c:	6803      	ldr	r3, [r0, #0]
 800193e:	4a16      	ldr	r2, [pc, #88]	@ (8001998 <HAL_TIM_PWM_DeInit+0x64>)
 8001940:	6a19      	ldr	r1, [r3, #32]
{
 8001942:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 8001944:	4211      	tst	r1, r2
 8001946:	d107      	bne.n	8001958 <HAL_TIM_PWM_DeInit+0x24>
 8001948:	6a19      	ldr	r1, [r3, #32]
 800194a:	4a14      	ldr	r2, [pc, #80]	@ (800199c <HAL_TIM_PWM_DeInit+0x68>)
 800194c:	4211      	tst	r1, r2
 800194e:	d103      	bne.n	8001958 <HAL_TIM_PWM_DeInit+0x24>
 8001950:	2101      	movs	r1, #1
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	438a      	bics	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8001958:	0020      	movs	r0, r4
 800195a:	f7ff ffe9 	bl	8001930 <HAL_TIM_PWM_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	2248      	movs	r2, #72	@ 0x48
 8001962:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001964:	3a0a      	subs	r2, #10
 8001966:	54a3      	strb	r3, [r4, r2]
 8001968:	3201      	adds	r2, #1
 800196a:	54a3      	strb	r3, [r4, r2]
 800196c:	3201      	adds	r2, #1
 800196e:	54a3      	strb	r3, [r4, r2]
 8001970:	3201      	adds	r2, #1
 8001972:	54a3      	strb	r3, [r4, r2]
 8001974:	3201      	adds	r2, #1
 8001976:	54a3      	strb	r3, [r4, r2]
 8001978:	3201      	adds	r2, #1
 800197a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800197c:	3201      	adds	r2, #1
 800197e:	54a3      	strb	r3, [r4, r2]
 8001980:	3201      	adds	r2, #1
 8001982:	54a3      	strb	r3, [r4, r2]
 8001984:	3201      	adds	r2, #1
 8001986:	54a3      	strb	r3, [r4, r2]
 8001988:	3201      	adds	r2, #1
 800198a:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_RESET;
 800198c:	3a0a      	subs	r2, #10
 800198e:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8001990:	3a01      	subs	r2, #1
}
 8001992:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001994:	54a3      	strb	r3, [r4, r2]
}
 8001996:	bd10      	pop	{r4, pc}
 8001998:	00001111 	.word	0x00001111
 800199c:	00000444 	.word	0x00000444

080019a0 <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 80019a0:	b570      	push	{r4, r5, r6, lr}
 80019a2:	000d      	movs	r5, r1
 80019a4:	0004      	movs	r4, r0
 80019a6:	0011      	movs	r1, r2
 80019a8:	2d10      	cmp	r5, #16
 80019aa:	d803      	bhi.n	80019b4 <HAL_TIM_PWM_Start_DMA+0x14>
 80019ac:	4a6f      	ldr	r2, [pc, #444]	@ (8001b6c <HAL_TIM_PWM_Start_DMA+0x1cc>)
 80019ae:	00a8      	lsls	r0, r5, #2
 80019b0:	5812      	ldr	r2, [r2, r0]
 80019b2:	4697      	mov	pc, r2
 80019b4:	2243      	movs	r2, #67	@ 0x43
 80019b6:	5ca6      	ldrb	r6, [r4, r2]
 80019b8:	b2f0      	uxtb	r0, r6
 80019ba:	2e02      	cmp	r6, #2
 80019bc:	d009      	beq.n	80019d2 <HAL_TIM_PWM_Start_DMA+0x32>
 80019be:	5ca0      	ldrb	r0, [r4, r2]
 80019c0:	2801      	cmp	r0, #1
 80019c2:	d105      	bne.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 80019c4:	2900      	cmp	r1, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 80019cc:	2302      	movs	r3, #2
 80019ce:	54a3      	strb	r3, [r4, r2]
 80019d0:	2001      	movs	r0, #1
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
 80019d4:	223e      	movs	r2, #62	@ 0x3e
 80019d6:	5ca6      	ldrb	r6, [r4, r2]
 80019d8:	b2f0      	uxtb	r0, r6
 80019da:	2e02      	cmp	r6, #2
 80019dc:	d0f9      	beq.n	80019d2 <HAL_TIM_PWM_Start_DMA+0x32>
 80019de:	5ca0      	ldrb	r0, [r4, r2]
 80019e0:	2801      	cmp	r0, #1
 80019e2:	d1f5      	bne.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 80019e4:	2900      	cmp	r1, #0
 80019e6:	d0f3      	beq.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f1      	beq.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 80019ec:	2002      	movs	r0, #2
 80019ee:	54a0      	strb	r0, [r4, r2]
 80019f0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80019f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b70 <HAL_TIM_PWM_Start_DMA+0x1d0>)
 80019f4:	62c2      	str	r2, [r0, #44]	@ 0x2c
 80019f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b74 <HAL_TIM_PWM_Start_DMA+0x1d4>)
 80019f8:	6302      	str	r2, [r0, #48]	@ 0x30
 80019fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001b78 <HAL_TIM_PWM_Start_DMA+0x1d8>)
 80019fc:	6342      	str	r2, [r0, #52]	@ 0x34
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	3234      	adds	r2, #52	@ 0x34
 8001a02:	f7ff f919 	bl	8000c38 <HAL_DMA_Start_IT>
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d1e2      	bne.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001a0a:	2280      	movs	r2, #128	@ 0x80
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	68d9      	ldr	r1, [r3, #12]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	211f      	movs	r1, #31
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4029      	ands	r1, r5
 8001a1c:	408a      	lsls	r2, r1
 8001a1e:	6a19      	ldr	r1, [r3, #32]
 8001a20:	4391      	bics	r1, r2
 8001a22:	6219      	str	r1, [r3, #32]
 8001a24:	6a19      	ldr	r1, [r3, #32]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	621a      	str	r2, [r3, #32]
 8001a2a:	4a54      	ldr	r2, [pc, #336]	@ (8001b7c <HAL_TIM_PWM_Start_DMA+0x1dc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <HAL_TIM_PWM_Start_DMA+0x92>
 8001a30:	e095      	b.n	8001b5e <HAL_TIM_PWM_Start_DMA+0x1be>
 8001a32:	4a53      	ldr	r2, [pc, #332]	@ (8001b80 <HAL_TIM_PWM_Start_DMA+0x1e0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d100      	bne.n	8001a3a <HAL_TIM_PWM_Start_DMA+0x9a>
 8001a38:	e08b      	b.n	8001b52 <HAL_TIM_PWM_Start_DMA+0x1b2>
 8001a3a:	4a52      	ldr	r2, [pc, #328]	@ (8001b84 <HAL_TIM_PWM_Start_DMA+0x1e4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001a40:	e087      	b.n	8001b52 <HAL_TIM_PWM_Start_DMA+0x1b2>
 8001a42:	4a51      	ldr	r2, [pc, #324]	@ (8001b88 <HAL_TIM_PWM_Start_DMA+0x1e8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d107      	bne.n	8001a58 <HAL_TIM_PWM_Start_DMA+0xb8>
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	4950      	ldr	r1, [pc, #320]	@ (8001b8c <HAL_TIM_PWM_Start_DMA+0x1ec>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	2a06      	cmp	r2, #6
 8001a50:	d006      	beq.n	8001a60 <HAL_TIM_PWM_Start_DMA+0xc0>
 8001a52:	3907      	subs	r1, #7
 8001a54:	428a      	cmp	r2, r1
 8001a56:	d003      	beq.n	8001a60 <HAL_TIM_PWM_Start_DMA+0xc0>
 8001a58:	2101      	movs	r1, #1
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	2000      	movs	r0, #0
 8001a62:	e7b6      	b.n	80019d2 <HAL_TIM_PWM_Start_DMA+0x32>
 8001a64:	223f      	movs	r2, #63	@ 0x3f
 8001a66:	5ca6      	ldrb	r6, [r4, r2]
 8001a68:	b2f0      	uxtb	r0, r6
 8001a6a:	2e02      	cmp	r6, #2
 8001a6c:	d0b1      	beq.n	80019d2 <HAL_TIM_PWM_Start_DMA+0x32>
 8001a6e:	5ca0      	ldrb	r0, [r4, r2]
 8001a70:	2801      	cmp	r0, #1
 8001a72:	d1ad      	bne.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001a74:	2900      	cmp	r1, #0
 8001a76:	d0ab      	beq.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0a9      	beq.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	54a0      	strb	r0, [r4, r2]
 8001a80:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001a82:	4a3b      	ldr	r2, [pc, #236]	@ (8001b70 <HAL_TIM_PWM_Start_DMA+0x1d0>)
 8001a84:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8001a86:	4a3b      	ldr	r2, [pc, #236]	@ (8001b74 <HAL_TIM_PWM_Start_DMA+0x1d4>)
 8001a88:	6302      	str	r2, [r0, #48]	@ 0x30
 8001a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b78 <HAL_TIM_PWM_Start_DMA+0x1d8>)
 8001a8c:	6342      	str	r2, [r0, #52]	@ 0x34
 8001a8e:	6822      	ldr	r2, [r4, #0]
 8001a90:	3238      	adds	r2, #56	@ 0x38
 8001a92:	f7ff f8d1 	bl	8000c38 <HAL_DMA_Start_IT>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d19a      	bne.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001a9a:	2280      	movs	r2, #128	@ 0x80
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	00d2      	lsls	r2, r2, #3
 8001aa0:	68d9      	ldr	r1, [r3, #12]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	e7b6      	b.n	8001a16 <HAL_TIM_PWM_Start_DMA+0x76>
 8001aa8:	2240      	movs	r2, #64	@ 0x40
 8001aaa:	5ca6      	ldrb	r6, [r4, r2]
 8001aac:	b2f0      	uxtb	r0, r6
 8001aae:	2e02      	cmp	r6, #2
 8001ab0:	d100      	bne.n	8001ab4 <HAL_TIM_PWM_Start_DMA+0x114>
 8001ab2:	e78e      	b.n	80019d2 <HAL_TIM_PWM_Start_DMA+0x32>
 8001ab4:	5ca0      	ldrb	r0, [r4, r2]
 8001ab6:	2801      	cmp	r0, #1
 8001ab8:	d000      	beq.n	8001abc <HAL_TIM_PWM_Start_DMA+0x11c>
 8001aba:	e789      	b.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001abc:	2900      	cmp	r1, #0
 8001abe:	d100      	bne.n	8001ac2 <HAL_TIM_PWM_Start_DMA+0x122>
 8001ac0:	e786      	b.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d100      	bne.n	8001ac8 <HAL_TIM_PWM_Start_DMA+0x128>
 8001ac6:	e783      	b.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001ac8:	2002      	movs	r0, #2
 8001aca:	54a0      	strb	r0, [r4, r2]
 8001acc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001ace:	4a28      	ldr	r2, [pc, #160]	@ (8001b70 <HAL_TIM_PWM_Start_DMA+0x1d0>)
 8001ad0:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8001ad2:	4a28      	ldr	r2, [pc, #160]	@ (8001b74 <HAL_TIM_PWM_Start_DMA+0x1d4>)
 8001ad4:	6302      	str	r2, [r0, #48]	@ 0x30
 8001ad6:	4a28      	ldr	r2, [pc, #160]	@ (8001b78 <HAL_TIM_PWM_Start_DMA+0x1d8>)
 8001ad8:	6342      	str	r2, [r0, #52]	@ 0x34
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	323c      	adds	r2, #60	@ 0x3c
 8001ade:	f7ff f8ab 	bl	8000c38 <HAL_DMA_Start_IT>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d000      	beq.n	8001ae8 <HAL_TIM_PWM_Start_DMA+0x148>
 8001ae6:	e773      	b.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001ae8:	2280      	movs	r2, #128	@ 0x80
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	68d9      	ldr	r1, [r3, #12]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	e78f      	b.n	8001a16 <HAL_TIM_PWM_Start_DMA+0x76>
 8001af6:	2241      	movs	r2, #65	@ 0x41
 8001af8:	5ca6      	ldrb	r6, [r4, r2]
 8001afa:	b2f0      	uxtb	r0, r6
 8001afc:	2e02      	cmp	r6, #2
 8001afe:	d100      	bne.n	8001b02 <HAL_TIM_PWM_Start_DMA+0x162>
 8001b00:	e767      	b.n	80019d2 <HAL_TIM_PWM_Start_DMA+0x32>
 8001b02:	5ca0      	ldrb	r0, [r4, r2]
 8001b04:	2801      	cmp	r0, #1
 8001b06:	d000      	beq.n	8001b0a <HAL_TIM_PWM_Start_DMA+0x16a>
 8001b08:	e762      	b.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001b0a:	2900      	cmp	r1, #0
 8001b0c:	d100      	bne.n	8001b10 <HAL_TIM_PWM_Start_DMA+0x170>
 8001b0e:	e75f      	b.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d100      	bne.n	8001b16 <HAL_TIM_PWM_Start_DMA+0x176>
 8001b14:	e75c      	b.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001b16:	2002      	movs	r0, #2
 8001b18:	54a0      	strb	r0, [r4, r2]
 8001b1a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001b1c:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <HAL_TIM_PWM_Start_DMA+0x1d0>)
 8001b1e:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8001b20:	4a14      	ldr	r2, [pc, #80]	@ (8001b74 <HAL_TIM_PWM_Start_DMA+0x1d4>)
 8001b22:	6302      	str	r2, [r0, #48]	@ 0x30
 8001b24:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <HAL_TIM_PWM_Start_DMA+0x1d8>)
 8001b26:	6342      	str	r2, [r0, #52]	@ 0x34
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	3240      	adds	r2, #64	@ 0x40
 8001b2c:	f7ff f884 	bl	8000c38 <HAL_DMA_Start_IT>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d000      	beq.n	8001b36 <HAL_TIM_PWM_Start_DMA+0x196>
 8001b34:	e74c      	b.n	80019d0 <HAL_TIM_PWM_Start_DMA+0x30>
 8001b36:	2280      	movs	r2, #128	@ 0x80
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	0152      	lsls	r2, r2, #5
 8001b3c:	68d9      	ldr	r1, [r3, #12]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	e768      	b.n	8001a16 <HAL_TIM_PWM_Start_DMA+0x76>
 8001b44:	2242      	movs	r2, #66	@ 0x42
 8001b46:	5ca5      	ldrb	r5, [r4, r2]
 8001b48:	b2e8      	uxtb	r0, r5
 8001b4a:	2d02      	cmp	r5, #2
 8001b4c:	d000      	beq.n	8001b50 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8001b4e:	e736      	b.n	80019be <HAL_TIM_PWM_Start_DMA+0x1e>
 8001b50:	e73f      	b.n	80019d2 <HAL_TIM_PWM_Start_DMA+0x32>
 8001b52:	2280      	movs	r2, #128	@ 0x80
 8001b54:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b5c:	e77c      	b.n	8001a58 <HAL_TIM_PWM_Start_DMA+0xb8>
 8001b5e:	2280      	movs	r2, #128	@ 0x80
 8001b60:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001b62:	0212      	lsls	r2, r2, #8
 8001b64:	430a      	orrs	r2, r1
 8001b66:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b68:	e76e      	b.n	8001a48 <HAL_TIM_PWM_Start_DMA+0xa8>
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	08002a34 	.word	0x08002a34
 8001b70:	0800204d 	.word	0x0800204d
 8001b74:	080020c1 	.word	0x080020c1
 8001b78:	08002105 	.word	0x08002105
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40014400 	.word	0x40014400
 8001b84:	40014800 	.word	0x40014800
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	00010007 	.word	0x00010007

08001b90 <HAL_TIM_PWM_ConfigChannel>:
{
 8001b90:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001b92:	203c      	movs	r0, #60	@ 0x3c
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001b96:	5c1c      	ldrb	r4, [r3, r0]
 8001b98:	2c01      	cmp	r4, #1
 8001b9a:	d100      	bne.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0xe>
 8001b9c:	e16b      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8001b9e:	2401      	movs	r4, #1
 8001ba0:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8001ba2:	2a14      	cmp	r2, #20
 8001ba4:	d803      	bhi.n	8001bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ba6:	48b5      	ldr	r0, [pc, #724]	@ (8001e7c <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	5882      	ldr	r2, [r0, r2]
 8001bac:	4697      	mov	pc, r2
 8001bae:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001bb0:	223c      	movs	r2, #60	@ 0x3c
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]
}
 8001bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001bb8:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001bba:	4db1      	ldr	r5, [pc, #708]	@ (8001e80 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
  tmpccer = TIMx->CCER;
 8001bbc:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001bbe:	6a10      	ldr	r0, [r2, #32]
 8001bc0:	4028      	ands	r0, r5
 8001bc2:	6210      	str	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001bc4:	4daf      	ldr	r5, [pc, #700]	@ (8001e84 <HAL_TIM_PWM_ConfigChannel+0x2f4>)
  tmpcr2 =  TIMx->CR2;
 8001bc6:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001bc8:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001bca:	4028      	ands	r0, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bcc:	680d      	ldr	r5, [r1, #0]
 8001bce:	022d      	lsls	r5, r5, #8
 8001bd0:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001bd2:	48ad      	ldr	r0, [pc, #692]	@ (8001e88 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
 8001bd4:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001bd6:	6888      	ldr	r0, [r1, #8]
 8001bd8:	0500      	lsls	r0, r0, #20
 8001bda:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bdc:	4cab      	ldr	r4, [pc, #684]	@ (8001e8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001bde:	42a2      	cmp	r2, r4
 8001be0:	d100      	bne.n	8001be4 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001be2:	e118      	b.n	8001e16 <HAL_TIM_PWM_ConfigChannel+0x286>
 8001be4:	4caa      	ldr	r4, [pc, #680]	@ (8001e90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001be6:	42a2      	cmp	r2, r4
 8001be8:	d100      	bne.n	8001bec <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001bea:	e114      	b.n	8001e16 <HAL_TIM_PWM_ConfigChannel+0x286>
 8001bec:	4ca9      	ldr	r4, [pc, #676]	@ (8001e94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001bee:	42a2      	cmp	r2, r4
 8001bf0:	d100      	bne.n	8001bf4 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001bf2:	e110      	b.n	8001e16 <HAL_TIM_PWM_ConfigChannel+0x286>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001bf4:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001bf6:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001bf8:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8001bfa:	65d4      	str	r4, [r2, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bfc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001bfe:	2080      	movs	r0, #128	@ 0x80
 8001c00:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8001c02:	0100      	lsls	r0, r0, #4
 8001c04:	4320      	orrs	r0, r4
 8001c06:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001c08:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001c0a:	4ca3      	ldr	r4, [pc, #652]	@ (8001e98 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001c0c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001c0e:	4020      	ands	r0, r4
 8001c10:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001c12:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001c14:	0209      	lsls	r1, r1, #8
 8001c16:	4301      	orrs	r1, r0
 8001c18:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	e7c8      	b.n	8001bb0 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c1e:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c20:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c22:	4e9e      	ldr	r6, [pc, #632]	@ (8001e9c <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer = TIMx->CCER;
 8001c24:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c26:	6a14      	ldr	r4, [r2, #32]
 8001c28:	43ac      	bics	r4, r5
 8001c2a:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001c2c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001c2e:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c30:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001c32:	680e      	ldr	r6, [r1, #0]
 8001c34:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8001c36:	2602      	movs	r6, #2
 8001c38:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8001c3a:	688e      	ldr	r6, [r1, #8]
 8001c3c:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c3e:	4e93      	ldr	r6, [pc, #588]	@ (8001e8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001c40:	42b2      	cmp	r2, r6
 8001c42:	d100      	bne.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8001c44:	e0da      	b.n	8001dfc <HAL_TIM_PWM_ConfigChannel+0x26c>
 8001c46:	4e92      	ldr	r6, [pc, #584]	@ (8001e90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001c48:	42b2      	cmp	r2, r6
 8001c4a:	d100      	bne.n	8001c4e <HAL_TIM_PWM_ConfigChannel+0xbe>
 8001c4c:	e0d6      	b.n	8001dfc <HAL_TIM_PWM_ConfigChannel+0x26c>
 8001c4e:	4e91      	ldr	r6, [pc, #580]	@ (8001e94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001c50:	42b2      	cmp	r2, r6
 8001c52:	d100      	bne.n	8001c56 <HAL_TIM_PWM_ConfigChannel+0xc6>
 8001c54:	e0d2      	b.n	8001dfc <HAL_TIM_PWM_ConfigChannel+0x26c>
  TIMx->CR2 = tmpcr2;
 8001c56:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c58:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001c5a:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c5c:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8001c5e:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c60:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001c62:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c64:	6990      	ldr	r0, [r2, #24]
 8001c66:	4320      	orrs	r0, r4
 8001c68:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c6a:	6990      	ldr	r0, [r2, #24]
 8001c6c:	3c04      	subs	r4, #4
 8001c6e:	43a0      	bics	r0, r4
 8001c70:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c72:	6990      	ldr	r0, [r2, #24]
 8001c74:	4301      	orrs	r1, r0
 8001c76:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001c78:	2000      	movs	r0, #0
 8001c7a:	e799      	b.n	8001bb0 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c7c:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c7e:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 8001c80:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c82:	6a14      	ldr	r4, [r2, #32]
 8001c84:	43ac      	bics	r4, r5
 8001c86:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c88:	4d85      	ldr	r5, [pc, #532]	@ (8001ea0 <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8001c8a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001c8c:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c8e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c90:	680d      	ldr	r5, [r1, #0]
 8001c92:	022d      	lsls	r5, r5, #8
 8001c94:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001c96:	2420      	movs	r4, #32
 8001c98:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c9a:	688c      	ldr	r4, [r1, #8]
 8001c9c:	0124      	lsls	r4, r4, #4
 8001c9e:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ca0:	487a      	ldr	r0, [pc, #488]	@ (8001e8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001ca2:	4282      	cmp	r2, r0
 8001ca4:	d100      	bne.n	8001ca8 <HAL_TIM_PWM_ConfigChannel+0x118>
 8001ca6:	e0c2      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x29e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ca8:	4879      	ldr	r0, [pc, #484]	@ (8001e90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001caa:	4282      	cmp	r2, r0
 8001cac:	d100      	bne.n	8001cb0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001cae:	e0c5      	b.n	8001e3c <HAL_TIM_PWM_ConfigChannel+0x2ac>
 8001cb0:	4878      	ldr	r0, [pc, #480]	@ (8001e94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001cb2:	4282      	cmp	r2, r0
 8001cb4:	d100      	bne.n	8001cb8 <HAL_TIM_PWM_ConfigChannel+0x128>
 8001cb6:	e0c1      	b.n	8001e3c <HAL_TIM_PWM_ConfigChannel+0x2ac>
  TIMx->CCR2 = OC_Config->Pulse;
 8001cb8:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001cba:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001cbc:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001cbe:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cc0:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 8001cc2:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cc4:	6994      	ldr	r4, [r2, #24]
 8001cc6:	0100      	lsls	r0, r0, #4
 8001cc8:	4320      	orrs	r0, r4
 8001cca:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ccc:	6990      	ldr	r0, [r2, #24]
 8001cce:	4c72      	ldr	r4, [pc, #456]	@ (8001e98 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cd0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cd2:	4020      	ands	r0, r4
 8001cd4:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cd6:	6990      	ldr	r0, [r2, #24]
 8001cd8:	0209      	lsls	r1, r1, #8
 8001cda:	4301      	orrs	r1, r0
 8001cdc:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e766      	b.n	8001bb0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ce2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ce4:	4d6f      	ldr	r5, [pc, #444]	@ (8001ea4 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpccer = TIMx->CCER;
 8001ce6:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ce8:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001cea:	4e6c      	ldr	r6, [pc, #432]	@ (8001e9c <HAL_TIM_PWM_ConfigChannel+0x30c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cec:	402c      	ands	r4, r5
 8001cee:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001cf0:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001cf2:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001cf4:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001cf6:	680e      	ldr	r6, [r1, #0]
 8001cf8:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001cfa:	4c6b      	ldr	r4, [pc, #428]	@ (8001ea8 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8001cfc:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cfe:	688c      	ldr	r4, [r1, #8]
 8001d00:	0224      	lsls	r4, r4, #8
 8001d02:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d04:	4c61      	ldr	r4, [pc, #388]	@ (8001e8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001d06:	42a2      	cmp	r2, r4
 8001d08:	d100      	bne.n	8001d0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d0a:	e0a5      	b.n	8001e58 <HAL_TIM_PWM_ConfigChannel+0x2c8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d0c:	4c60      	ldr	r4, [pc, #384]	@ (8001e90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001d0e:	42a2      	cmp	r2, r4
 8001d10:	d100      	bne.n	8001d14 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001d12:	e0a8      	b.n	8001e66 <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8001d14:	4c5f      	ldr	r4, [pc, #380]	@ (8001e94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001d16:	42a2      	cmp	r2, r4
 8001d18:	d100      	bne.n	8001d1c <HAL_TIM_PWM_ConfigChannel+0x18c>
 8001d1a:	e0a4      	b.n	8001e66 <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CCR3 = OC_Config->Pulse;
 8001d1c:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001d1e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001d20:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001d22:	63d4      	str	r4, [r2, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d24:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001d26:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d28:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d2a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d2c:	4320      	orrs	r0, r4
 8001d2e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d30:	69d0      	ldr	r0, [r2, #28]
 8001d32:	3c04      	subs	r4, #4
 8001d34:	43a0      	bics	r0, r4
 8001d36:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d38:	69d0      	ldr	r0, [r2, #28]
 8001d3a:	4301      	orrs	r1, r0
 8001d3c:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3e:	2000      	movs	r0, #0
 8001d40:	e736      	b.n	8001bb0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d42:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d44:	4d59      	ldr	r5, [pc, #356]	@ (8001eac <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 8001d46:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d48:	6a10      	ldr	r0, [r2, #32]
 8001d4a:	4028      	ands	r0, r5
 8001d4c:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d4e:	4d54      	ldr	r5, [pc, #336]	@ (8001ea0 <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8001d50:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001d52:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d54:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d56:	680d      	ldr	r5, [r1, #0]
 8001d58:	022d      	lsls	r5, r5, #8
 8001d5a:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8001d5c:	4854      	ldr	r0, [pc, #336]	@ (8001eb0 <HAL_TIM_PWM_ConfigChannel+0x320>)
 8001d5e:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d60:	6888      	ldr	r0, [r1, #8]
 8001d62:	0300      	lsls	r0, r0, #12
 8001d64:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d66:	4c49      	ldr	r4, [pc, #292]	@ (8001e8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001d68:	42a2      	cmp	r2, r4
 8001d6a:	d06f      	beq.n	8001e4c <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8001d6c:	4c48      	ldr	r4, [pc, #288]	@ (8001e90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001d6e:	42a2      	cmp	r2, r4
 8001d70:	d06c      	beq.n	8001e4c <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8001d72:	4c48      	ldr	r4, [pc, #288]	@ (8001e94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001d74:	42a2      	cmp	r2, r4
 8001d76:	d069      	beq.n	8001e4c <HAL_TIM_PWM_ConfigChannel+0x2bc>
  TIMx->CCR4 = OC_Config->Pulse;
 8001d78:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001d7a:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001d7c:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001d7e:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8001d80:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d82:	2080      	movs	r0, #128	@ 0x80
 8001d84:	69d4      	ldr	r4, [r2, #28]
 8001d86:	0100      	lsls	r0, r0, #4
 8001d88:	4320      	orrs	r0, r4
 8001d8a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d8c:	69d0      	ldr	r0, [r2, #28]
 8001d8e:	4c42      	ldr	r4, [pc, #264]	@ (8001e98 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d90:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d92:	4020      	ands	r0, r4
 8001d94:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d96:	69d0      	ldr	r0, [r2, #28]
 8001d98:	0209      	lsls	r1, r1, #8
 8001d9a:	4301      	orrs	r1, r0
 8001d9c:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	2000      	movs	r0, #0
 8001da0:	e706      	b.n	8001bb0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001da2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001da4:	4d43      	ldr	r5, [pc, #268]	@ (8001eb4 <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 8001da6:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001da8:	6a10      	ldr	r0, [r2, #32]
 8001daa:	4028      	ands	r0, r5
 8001dac:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001dae:	4d42      	ldr	r5, [pc, #264]	@ (8001eb8 <HAL_TIM_PWM_ConfigChannel+0x328>)
  tmpcr2 =  TIMx->CR2;
 8001db0:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001db2:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001db4:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8001db6:	680d      	ldr	r5, [r1, #0]
 8001db8:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC5P;
 8001dba:	4840      	ldr	r0, [pc, #256]	@ (8001ebc <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8001dbc:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001dbe:	6888      	ldr	r0, [r1, #8]
 8001dc0:	0400      	lsls	r0, r0, #16
 8001dc2:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dc4:	4c31      	ldr	r4, [pc, #196]	@ (8001e8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001dc6:	42a2      	cmp	r2, r4
 8001dc8:	d02b      	beq.n	8001e22 <HAL_TIM_PWM_ConfigChannel+0x292>
 8001dca:	4c31      	ldr	r4, [pc, #196]	@ (8001e90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001dcc:	42a2      	cmp	r2, r4
 8001dce:	d028      	beq.n	8001e22 <HAL_TIM_PWM_ConfigChannel+0x292>
 8001dd0:	4c30      	ldr	r4, [pc, #192]	@ (8001e94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001dd2:	42a2      	cmp	r2, r4
 8001dd4:	d025      	beq.n	8001e22 <HAL_TIM_PWM_ConfigChannel+0x292>
  TIMx->CCR5 = OC_Config->Pulse;
 8001dd6:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001dd8:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001dda:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8001ddc:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001dde:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001de0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001de2:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001de4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001de6:	4320      	orrs	r0, r4
 8001de8:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001dea:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001dec:	3c04      	subs	r4, #4
 8001dee:	43a0      	bics	r0, r4
 8001df0:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001df2:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001df4:	4301      	orrs	r1, r0
 8001df6:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001df8:	2000      	movs	r0, #0
 8001dfa:	e6d9      	b.n	8001bb0 <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dfc:	2608      	movs	r6, #8
 8001dfe:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8001e00:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e02:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8001e04:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e06:	2604      	movs	r6, #4
 8001e08:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e0a:	4e2d      	ldr	r6, [pc, #180]	@ (8001ec0 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8001e0c:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e0e:	694d      	ldr	r5, [r1, #20]
 8001e10:	433d      	orrs	r5, r7
 8001e12:	4335      	orrs	r5, r6
 8001e14:	e71f      	b.n	8001c56 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001e16:	4c2b      	ldr	r4, [pc, #172]	@ (8001ec4 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8001e18:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001e1a:	694e      	ldr	r6, [r1, #20]
 8001e1c:	02b6      	lsls	r6, r6, #10
 8001e1e:	4326      	orrs	r6, r4
 8001e20:	e6e8      	b.n	8001bf4 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001e22:	4c24      	ldr	r4, [pc, #144]	@ (8001eb4 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8001e24:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001e26:	694e      	ldr	r6, [r1, #20]
 8001e28:	0236      	lsls	r6, r6, #8
 8001e2a:	4326      	orrs	r6, r4
 8001e2c:	e7d3      	b.n	8001dd6 <HAL_TIM_PWM_ConfigChannel+0x246>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e2e:	2080      	movs	r0, #128	@ 0x80
 8001e30:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e32:	68c8      	ldr	r0, [r1, #12]
 8001e34:	0100      	lsls	r0, r0, #4
 8001e36:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e38:	2040      	movs	r0, #64	@ 0x40
 8001e3a:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e3c:	4822      	ldr	r0, [pc, #136]	@ (8001ec8 <HAL_TIM_PWM_ConfigChannel+0x338>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e3e:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e40:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e42:	698e      	ldr	r6, [r1, #24]
 8001e44:	433e      	orrs	r6, r7
 8001e46:	00b6      	lsls	r6, r6, #2
 8001e48:	4306      	orrs	r6, r0
 8001e4a:	e735      	b.n	8001cb8 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e4c:	4c1f      	ldr	r4, [pc, #124]	@ (8001ecc <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8001e4e:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e50:	694e      	ldr	r6, [r1, #20]
 8001e52:	01b6      	lsls	r6, r6, #6
 8001e54:	4326      	orrs	r6, r4
 8001e56:	e78f      	b.n	8001d78 <HAL_TIM_PWM_ConfigChannel+0x1e8>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e58:	4c1d      	ldr	r4, [pc, #116]	@ (8001ed0 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8001e5a:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e5c:	68cc      	ldr	r4, [r1, #12]
 8001e5e:	0224      	lsls	r4, r4, #8
 8001e60:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e62:	480d      	ldr	r0, [pc, #52]	@ (8001e98 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8001e64:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e66:	4c1b      	ldr	r4, [pc, #108]	@ (8001ed4 <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e68:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e6a:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e6c:	698d      	ldr	r5, [r1, #24]
 8001e6e:	433d      	orrs	r5, r7
 8001e70:	012d      	lsls	r5, r5, #4
 8001e72:	4325      	orrs	r5, r4
 8001e74:	e752      	b.n	8001d1c <HAL_TIM_PWM_ConfigChannel+0x18c>
  __HAL_LOCK(htim);
 8001e76:	2002      	movs	r0, #2
 8001e78:	e69d      	b.n	8001bb6 <HAL_TIM_PWM_ConfigChannel+0x26>
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	08002a78 	.word	0x08002a78
 8001e80:	ffefffff 	.word	0xffefffff
 8001e84:	feff8fff 	.word	0xfeff8fff
 8001e88:	ffdfffff 	.word	0xffdfffff
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40014400 	.word	0x40014400
 8001e94:	40014800 	.word	0x40014800
 8001e98:	fffffbff 	.word	0xfffffbff
 8001e9c:	fffeff8c 	.word	0xfffeff8c
 8001ea0:	feff8cff 	.word	0xfeff8cff
 8001ea4:	fffffeff 	.word	0xfffffeff
 8001ea8:	fffffdff 	.word	0xfffffdff
 8001eac:	ffffefff 	.word	0xffffefff
 8001eb0:	ffffdfff 	.word	0xffffdfff
 8001eb4:	fffeffff 	.word	0xfffeffff
 8001eb8:	fffeff8f 	.word	0xfffeff8f
 8001ebc:	fffdffff 	.word	0xfffdffff
 8001ec0:	fffffcff 	.word	0xfffffcff
 8001ec4:	fffbffff 	.word	0xfffbffff
 8001ec8:	fffff3ff 	.word	0xfffff3ff
 8001ecc:	ffffbfff 	.word	0xffffbfff
 8001ed0:	fffff7ff 	.word	0xfffff7ff
 8001ed4:	ffffcfff 	.word	0xffffcfff

08001ed8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ed8:	233c      	movs	r3, #60	@ 0x3c
{
 8001eda:	b570      	push	{r4, r5, r6, lr}
 8001edc:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8001ede:	5cc0      	ldrb	r0, [r0, r3]
 8001ee0:	2801      	cmp	r0, #1
 8001ee2:	d100      	bne.n	8001ee6 <HAL_TIM_ConfigClockSource+0xe>
 8001ee4:	e073      	b.n	8001fce <HAL_TIM_ConfigClockSource+0xf6>
 8001ee6:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001eea:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	3301      	adds	r3, #1
 8001eee:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001ef0:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef2:	4d51      	ldr	r5, [pc, #324]	@ (8002038 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8001ef4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef6:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8001ef8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001efa:	680b      	ldr	r3, [r1, #0]
 8001efc:	2b60      	cmp	r3, #96	@ 0x60
 8001efe:	d100      	bne.n	8001f02 <HAL_TIM_ConfigClockSource+0x2a>
 8001f00:	e067      	b.n	8001fd2 <HAL_TIM_ConfigClockSource+0xfa>
 8001f02:	d81d      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x68>
 8001f04:	2b40      	cmp	r3, #64	@ 0x40
 8001f06:	d100      	bne.n	8001f0a <HAL_TIM_ConfigClockSource+0x32>
 8001f08:	e07d      	b.n	8002006 <HAL_TIM_ConfigClockSource+0x12e>
 8001f0a:	d93f      	bls.n	8001f8c <HAL_TIM_ConfigClockSource+0xb4>
 8001f0c:	2b50      	cmp	r3, #80	@ 0x50
 8001f0e:	d135      	bne.n	8001f7c <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 8001f10:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001f12:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f14:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f16:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f18:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f1a:	43a6      	bics	r6, r4
 8001f1c:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f1e:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001f20:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f22:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f24:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f26:	240a      	movs	r4, #10
 8001f28:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001f2a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f2c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f2e:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f30:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f32:	4942      	ldr	r1, [pc, #264]	@ (800203c <HAL_TIM_ConfigClockSource+0x164>)
 8001f34:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f36:	2157      	movs	r1, #87	@ 0x57
 8001f38:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f3a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	e01e      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001f40:	2480      	movs	r4, #128	@ 0x80
 8001f42:	0164      	lsls	r4, r4, #5
 8001f44:	42a3      	cmp	r3, r4
 8001f46:	d0f9      	beq.n	8001f3c <HAL_TIM_ConfigClockSource+0x64>
 8001f48:	2480      	movs	r4, #128	@ 0x80
 8001f4a:	01a4      	lsls	r4, r4, #6
 8001f4c:	42a3      	cmp	r3, r4
 8001f4e:	d12b      	bne.n	8001fa8 <HAL_TIM_ConfigClockSource+0xd0>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f50:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f52:	4b3b      	ldr	r3, [pc, #236]	@ (8002040 <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f54:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f56:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f58:	688b      	ldr	r3, [r1, #8]
 8001f5a:	68c9      	ldr	r1, [r1, #12]
 8001f5c:	432b      	orrs	r3, r5
 8001f5e:	0209      	lsls	r1, r1, #8
 8001f60:	430b      	orrs	r3, r1
 8001f62:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f64:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	6881      	ldr	r1, [r0, #8]
 8001f6a:	01db      	lsls	r3, r3, #7
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f70:	2000      	movs	r0, #0
 8001f72:	e004      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001f74:	2110      	movs	r1, #16
 8001f76:	001c      	movs	r4, r3
 8001f78:	438c      	bics	r4, r1
 8001f7a:	d00c      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8001f7c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001f7e:	233d      	movs	r3, #61	@ 0x3d
 8001f80:	2101      	movs	r1, #1
 8001f82:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8001f84:	2100      	movs	r1, #0
 8001f86:	3b01      	subs	r3, #1
 8001f88:	54d1      	strb	r1, [r2, r3]
}
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d002      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0xbe>
 8001f90:	d9f0      	bls.n	8001f74 <HAL_TIM_ConfigClockSource+0x9c>
 8001f92:	2b30      	cmp	r3, #48	@ 0x30
 8001f94:	d1f2      	bne.n	8001f7c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001f96:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f98:	4c28      	ldr	r4, [pc, #160]	@ (800203c <HAL_TIM_ConfigClockSource+0x164>)
 8001f9a:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	2107      	movs	r1, #7
 8001fa0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001fa2:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	e7ea      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001fa8:	2b70      	cmp	r3, #112	@ 0x70
 8001faa:	d1e7      	bne.n	8001f7c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001fac:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fae:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fb0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb2:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fb4:	688b      	ldr	r3, [r1, #8]
 8001fb6:	68c9      	ldr	r1, [r1, #12]
 8001fb8:	432b      	orrs	r3, r5
 8001fba:	0209      	lsls	r1, r1, #8
 8001fbc:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fbe:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fc0:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001fc2:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001fc4:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fc6:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8001fc8:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2000      	movs	r0, #0
 8001fcc:	e7d7      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 8001fce:	2002      	movs	r0, #2
 8001fd0:	e7db      	b.n	8001f8a <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd2:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8001fd4:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd6:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8001fd8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fda:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 8001fdc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fde:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fe0:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe2:	4e18      	ldr	r6, [pc, #96]	@ (8002044 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fe4:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe6:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fe8:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fea:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fec:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fee:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ff0:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001ff2:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ff4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001ff6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ff8:	4910      	ldr	r1, [pc, #64]	@ (800203c <HAL_TIM_ConfigClockSource+0x164>)
 8001ffa:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ffc:	2167      	movs	r1, #103	@ 0x67
 8001ffe:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002000:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002002:	2000      	movs	r0, #0
 8002004:	e7bb      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8002006:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002008:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800200a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800200c:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800200e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002010:	43a6      	bics	r6, r4
 8002012:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002014:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002016:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002018:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800201a:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800201c:	240a      	movs	r4, #10
 800201e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002020:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002022:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002024:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002026:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002028:	4904      	ldr	r1, [pc, #16]	@ (800203c <HAL_TIM_ConfigClockSource+0x164>)
 800202a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800202c:	2147      	movs	r1, #71	@ 0x47
 800202e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002030:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002032:	2000      	movs	r0, #0
 8002034:	e7a3      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0xa6>
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	ffce0088 	.word	0xffce0088
 800203c:	ffcfff8f 	.word	0xffcfff8f
 8002040:	ffff00ff 	.word	0xffff00ff
 8002044:	ffff0fff 	.word	0xffff0fff

08002048 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002048:	4770      	bx	lr
 800204a:	46c0      	nop			@ (mov r8, r8)

0800204c <TIM_DMADelayPulseCplt>:
{
 800204c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800204e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002050:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002052:	4283      	cmp	r3, r0
 8002054:	d017      	beq.n	8002086 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002056:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002058:	4283      	cmp	r3, r0
 800205a:	d00b      	beq.n	8002074 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800205c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800205e:	4283      	cmp	r3, r0
 8002060:	d019      	beq.n	8002096 <TIM_DMADelayPulseCplt+0x4a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002062:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002064:	4283      	cmp	r3, r0
 8002066:	d01f      	beq.n	80020a8 <TIM_DMADelayPulseCplt+0x5c>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	0020      	movs	r0, r4
 800206a:	f7ff ffed 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	2300      	movs	r3, #0
 8002070:	7723      	strb	r3, [r4, #28]
}
 8002072:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002074:	2202      	movs	r2, #2
 8002076:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f4      	bne.n	8002068 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800207e:	333f      	adds	r3, #63	@ 0x3f
 8002080:	3a01      	subs	r2, #1
 8002082:	54e2      	strb	r2, [r4, r3]
 8002084:	e7f0      	b.n	8002068 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002086:	2201      	movs	r2, #1
 8002088:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1eb      	bne.n	8002068 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002090:	333e      	adds	r3, #62	@ 0x3e
 8002092:	54e2      	strb	r2, [r4, r3]
 8002094:	e7e8      	b.n	8002068 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002096:	2204      	movs	r2, #4
 8002098:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e3      	bne.n	8002068 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	3340      	adds	r3, #64	@ 0x40
 80020a2:	3a03      	subs	r2, #3
 80020a4:	54e2      	strb	r2, [r4, r3]
 80020a6:	e7df      	b.n	8002068 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a8:	2208      	movs	r2, #8
 80020aa:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1da      	bne.n	8002068 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80020b2:	3341      	adds	r3, #65	@ 0x41
 80020b4:	3a07      	subs	r2, #7
 80020b6:	54e2      	strb	r2, [r4, r3]
 80020b8:	e7d6      	b.n	8002068 <TIM_DMADelayPulseCplt+0x1c>
 80020ba:	46c0      	nop			@ (mov r8, r8)

080020bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 80020bc:	4770      	bx	lr
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <TIM_DMADelayPulseHalfCplt>:
{
 80020c0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020c2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80020c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020c6:	4283      	cmp	r3, r0
 80020c8:	d011      	beq.n	80020ee <TIM_DMADelayPulseHalfCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80020ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80020cc:	4283      	cmp	r3, r0
 80020ce:	d00b      	beq.n	80020e8 <TIM_DMADelayPulseHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80020d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80020d2:	4283      	cmp	r3, r0
 80020d4:	d00e      	beq.n	80020f4 <TIM_DMADelayPulseHalfCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80020d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80020d8:	4283      	cmp	r3, r0
 80020da:	d00e      	beq.n	80020fa <TIM_DMADelayPulseHalfCplt+0x3a>
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80020dc:	0020      	movs	r0, r4
 80020de:	f7ff ffed 	bl	80020bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	2300      	movs	r3, #0
 80020e4:	7723      	strb	r3, [r4, #28]
}
 80020e6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e8:	2302      	movs	r3, #2
 80020ea:	7723      	strb	r3, [r4, #28]
 80020ec:	e7f6      	b.n	80020dc <TIM_DMADelayPulseHalfCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	7723      	strb	r3, [r4, #28]
 80020f2:	e7f3      	b.n	80020dc <TIM_DMADelayPulseHalfCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f4:	2304      	movs	r3, #4
 80020f6:	7723      	strb	r3, [r4, #28]
 80020f8:	e7f0      	b.n	80020dc <TIM_DMADelayPulseHalfCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020fa:	2308      	movs	r3, #8
 80020fc:	7723      	strb	r3, [r4, #28]
 80020fe:	e7ed      	b.n	80020dc <TIM_DMADelayPulseHalfCplt+0x1c>

08002100 <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8002100:	4770      	bx	lr
 8002102:	46c0      	nop			@ (mov r8, r8)

08002104 <TIM_DMAError>:
{
 8002104:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002106:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002108:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800210a:	4283      	cmp	r3, r0
 800210c:	d017      	beq.n	800213e <TIM_DMAError+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800210e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002110:	4283      	cmp	r3, r0
 8002112:	d00e      	beq.n	8002132 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002114:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002116:	4283      	cmp	r3, r0
 8002118:	d016      	beq.n	8002148 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800211a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800211c:	4283      	cmp	r3, r0
 800211e:	d019      	beq.n	8002154 <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 8002120:	233d      	movs	r3, #61	@ 0x3d
 8002122:	2201      	movs	r2, #1
 8002124:	54e2      	strb	r2, [r4, r3]
  HAL_TIM_ErrorCallback(htim);
 8002126:	0020      	movs	r0, r4
 8002128:	f7ff ffea 	bl	8002100 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212c:	2300      	movs	r3, #0
 800212e:	7723      	strb	r3, [r4, #28]
}
 8002130:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002132:	2302      	movs	r3, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002134:	2201      	movs	r2, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002136:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002138:	333d      	adds	r3, #61	@ 0x3d
 800213a:	54e2      	strb	r2, [r4, r3]
 800213c:	e7f3      	b.n	8002126 <TIM_DMAError+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800213e:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	223e      	movs	r2, #62	@ 0x3e
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002142:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002144:	54a3      	strb	r3, [r4, r2]
 8002146:	e7ee      	b.n	8002126 <TIM_DMAError+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002148:	2304      	movs	r3, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800214a:	2201      	movs	r2, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800214c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800214e:	333c      	adds	r3, #60	@ 0x3c
 8002150:	54e2      	strb	r2, [r4, r3]
 8002152:	e7e8      	b.n	8002126 <TIM_DMAError+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002154:	2308      	movs	r3, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002156:	2201      	movs	r2, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002158:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800215a:	3339      	adds	r3, #57	@ 0x39
 800215c:	54e2      	strb	r2, [r4, r3]
 800215e:	e7e2      	b.n	8002126 <TIM_DMAError+0x22>

08002160 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002160:	233c      	movs	r3, #60	@ 0x3c
{
 8002162:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002164:	5cc3      	ldrb	r3, [r0, r3]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d026      	beq.n	80021b8 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216a:	233d      	movs	r3, #61	@ 0x3d
 800216c:	2202      	movs	r2, #2
 800216e:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002170:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002172:	4d12      	ldr	r5, [pc, #72]	@ (80021bc <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 8002174:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002176:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002178:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800217a:	42aa      	cmp	r2, r5
 800217c:	d00e      	beq.n	800219c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 &= ~TIM_CR2_MMS;
 800217e:	2570      	movs	r5, #112	@ 0x70
 8002180:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002182:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002184:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002188:	429a      	cmp	r2, r3
 800218a:	d00f      	beq.n	80021ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800218c:	233d      	movs	r3, #61	@ 0x3d
 800218e:	2201      	movs	r2, #1
 8002190:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002192:	2200      	movs	r2, #0
 8002194:	3b01      	subs	r3, #1
 8002196:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002198:	2000      	movs	r0, #0
}
 800219a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800219c:	4d09      	ldr	r5, [pc, #36]	@ (80021c4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800219e:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021a0:	684d      	ldr	r5, [r1, #4]
 80021a2:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80021a4:	2570      	movs	r5, #112	@ 0x70
 80021a6:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021a8:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 80021aa:	6053      	str	r3, [r2, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	439c      	bics	r4, r3
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021b0:	688b      	ldr	r3, [r1, #8]
 80021b2:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 80021b4:	6094      	str	r4, [r2, #8]
 80021b6:	e7e9      	b.n	800218c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 80021b8:	2002      	movs	r0, #2
 80021ba:	e7ee      	b.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400
 80021c4:	ff0fffff 	.word	0xff0fffff

080021c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80021c8:	233c      	movs	r3, #60	@ 0x3c
{
 80021ca:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80021cc:	5cc3      	ldrb	r3, [r0, r3]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d03d      	beq.n	800224e <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80021d2:	4a20      	ldr	r2, [pc, #128]	@ (8002254 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80021d4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80021d6:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80021d8:	4013      	ands	r3, r2
 80021da:	688a      	ldr	r2, [r1, #8]
 80021dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80021de:	4a1e      	ldr	r2, [pc, #120]	@ (8002258 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	684a      	ldr	r2, [r1, #4]
 80021e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80021e6:	4a1d      	ldr	r2, [pc, #116]	@ (800225c <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	680a      	ldr	r2, [r1, #0]
 80021ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80021ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002260 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	690a      	ldr	r2, [r1, #16]
 80021f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80021f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002264 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	694a      	ldr	r2, [r1, #20]
 80021fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80021fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002268 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8002200:	4013      	ands	r3, r2
 8002202:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002204:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002206:	4a19      	ldr	r2, [pc, #100]	@ (800226c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002208:	4013      	ands	r3, r2
 800220a:	698a      	ldr	r2, [r1, #24]
 800220c:	0412      	lsls	r2, r2, #16
 800220e:	4313      	orrs	r3, r2
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002210:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002212:	4294      	cmp	r4, r2
 8002214:	d005      	beq.n	8002222 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002216:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002218:	2200      	movs	r2, #0
 800221a:	233c      	movs	r3, #60	@ 0x3c
 800221c:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800221e:	2000      	movs	r0, #0
}
 8002220:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002222:	4a14      	ldr	r2, [pc, #80]	@ (8002274 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002224:	4013      	ands	r3, r2
 8002226:	69ca      	ldr	r2, [r1, #28]
 8002228:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800222a:	4a13      	ldr	r2, [pc, #76]	@ (8002278 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800222c:	4013      	ands	r3, r2
 800222e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002230:	0512      	lsls	r2, r2, #20
 8002232:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002236:	401a      	ands	r2, r3
 8002238:	6a0b      	ldr	r3, [r1, #32]
 800223a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800223c:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800223e:	401a      	ands	r2, r3
 8002240:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8002242:	431a      	orrs	r2, r3
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8002246:	401a      	ands	r2, r3
 8002248:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800224a:	4313      	orrs	r3, r2
 800224c:	e7e3      	b.n	8002216 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
  __HAL_LOCK(htim);
 800224e:	2002      	movs	r0, #2
 8002250:	e7e6      	b.n	8002220 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	fffffcff 	.word	0xfffffcff
 8002258:	fffffbff 	.word	0xfffffbff
 800225c:	fffff7ff 	.word	0xfffff7ff
 8002260:	ffffefff 	.word	0xffffefff
 8002264:	ffffdfff 	.word	0xffffdfff
 8002268:	ffffbfff 	.word	0xffffbfff
 800226c:	fff0ffff 	.word	0xfff0ffff
 8002270:	40012c00 	.word	0x40012c00
 8002274:	efffffff 	.word	0xefffffff
 8002278:	ff0fffff 	.word	0xff0fffff
 800227c:	feffffff 	.word	0xfeffffff
 8002280:	fdffffff 	.word	0xfdffffff
 8002284:	dfffffff 	.word	0xdfffffff

08002288 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002288:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800228a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800228c:	071a      	lsls	r2, r3, #28
 800228e:	d506      	bpl.n	800229e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002290:	6801      	ldr	r1, [r0, #0]
 8002292:	4c28      	ldr	r4, [pc, #160]	@ (8002334 <UART_AdvFeatureConfig+0xac>)
 8002294:	684a      	ldr	r2, [r1, #4]
 8002296:	4022      	ands	r2, r4
 8002298:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800229a:	4322      	orrs	r2, r4
 800229c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800229e:	07da      	lsls	r2, r3, #31
 80022a0:	d506      	bpl.n	80022b0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80022a2:	6801      	ldr	r1, [r0, #0]
 80022a4:	4c24      	ldr	r4, [pc, #144]	@ (8002338 <UART_AdvFeatureConfig+0xb0>)
 80022a6:	684a      	ldr	r2, [r1, #4]
 80022a8:	4022      	ands	r2, r4
 80022aa:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80022ac:	4322      	orrs	r2, r4
 80022ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80022b0:	079a      	lsls	r2, r3, #30
 80022b2:	d506      	bpl.n	80022c2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80022b4:	6801      	ldr	r1, [r0, #0]
 80022b6:	4c21      	ldr	r4, [pc, #132]	@ (800233c <UART_AdvFeatureConfig+0xb4>)
 80022b8:	684a      	ldr	r2, [r1, #4]
 80022ba:	4022      	ands	r2, r4
 80022bc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80022be:	4322      	orrs	r2, r4
 80022c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80022c2:	075a      	lsls	r2, r3, #29
 80022c4:	d506      	bpl.n	80022d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022c6:	6801      	ldr	r1, [r0, #0]
 80022c8:	4c1d      	ldr	r4, [pc, #116]	@ (8002340 <UART_AdvFeatureConfig+0xb8>)
 80022ca:	684a      	ldr	r2, [r1, #4]
 80022cc:	4022      	ands	r2, r4
 80022ce:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80022d0:	4322      	orrs	r2, r4
 80022d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022d4:	06da      	lsls	r2, r3, #27
 80022d6:	d506      	bpl.n	80022e6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022d8:	6801      	ldr	r1, [r0, #0]
 80022da:	4c1a      	ldr	r4, [pc, #104]	@ (8002344 <UART_AdvFeatureConfig+0xbc>)
 80022dc:	688a      	ldr	r2, [r1, #8]
 80022de:	4022      	ands	r2, r4
 80022e0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80022e2:	4322      	orrs	r2, r4
 80022e4:	608a      	str	r2, [r1, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022e6:	069a      	lsls	r2, r3, #26
 80022e8:	d506      	bpl.n	80022f8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022ea:	6801      	ldr	r1, [r0, #0]
 80022ec:	4c16      	ldr	r4, [pc, #88]	@ (8002348 <UART_AdvFeatureConfig+0xc0>)
 80022ee:	688a      	ldr	r2, [r1, #8]
 80022f0:	4022      	ands	r2, r4
 80022f2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80022f4:	4322      	orrs	r2, r4
 80022f6:	608a      	str	r2, [r1, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022f8:	065a      	lsls	r2, r3, #25
 80022fa:	d50a      	bpl.n	8002312 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022fc:	6801      	ldr	r1, [r0, #0]
 80022fe:	4d13      	ldr	r5, [pc, #76]	@ (800234c <UART_AdvFeatureConfig+0xc4>)
 8002300:	684a      	ldr	r2, [r1, #4]
 8002302:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002304:	402a      	ands	r2, r5
 8002306:	4322      	orrs	r2, r4
 8002308:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800230a:	2280      	movs	r2, #128	@ 0x80
 800230c:	0352      	lsls	r2, r2, #13
 800230e:	4294      	cmp	r4, r2
 8002310:	d009      	beq.n	8002326 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002312:	061b      	lsls	r3, r3, #24
 8002314:	d506      	bpl.n	8002324 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002316:	6802      	ldr	r2, [r0, #0]
 8002318:	490d      	ldr	r1, [pc, #52]	@ (8002350 <UART_AdvFeatureConfig+0xc8>)
 800231a:	6853      	ldr	r3, [r2, #4]
 800231c:	400b      	ands	r3, r1
 800231e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8002320:	430b      	orrs	r3, r1
 8002322:	6053      	str	r3, [r2, #4]
  }
}
 8002324:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002326:	684a      	ldr	r2, [r1, #4]
 8002328:	4c0a      	ldr	r4, [pc, #40]	@ (8002354 <UART_AdvFeatureConfig+0xcc>)
 800232a:	4022      	ands	r2, r4
 800232c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800232e:	4322      	orrs	r2, r4
 8002330:	604a      	str	r2, [r1, #4]
 8002332:	e7ee      	b.n	8002312 <UART_AdvFeatureConfig+0x8a>
 8002334:	ffff7fff 	.word	0xffff7fff
 8002338:	fffdffff 	.word	0xfffdffff
 800233c:	fffeffff 	.word	0xfffeffff
 8002340:	fffbffff 	.word	0xfffbffff
 8002344:	ffffefff 	.word	0xffffefff
 8002348:	ffffdfff 	.word	0xffffdfff
 800234c:	ffefffff 	.word	0xffefffff
 8002350:	fff7ffff 	.word	0xfff7ffff
 8002354:	ff9fffff 	.word	0xff9fffff

08002358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235a:	2390      	movs	r3, #144	@ 0x90
 800235c:	2200      	movs	r2, #0
{
 800235e:	46c6      	mov	lr, r8
 8002360:	0004      	movs	r4, r0
 8002362:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002364:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002366:	f7fe fb97 	bl	8000a98 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800236a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800236c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	0712      	lsls	r2, r2, #28
 8002372:	d411      	bmi.n	8002398 <UART_CheckIdleState+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	0752      	lsls	r2, r2, #29
 8002378:	d43e      	bmi.n	80023f8 <UART_CheckIdleState+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800237a:	2320      	movs	r3, #32
 800237c:	2288      	movs	r2, #136	@ 0x88
 800237e:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002380:	3204      	adds	r2, #4
 8002382:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002384:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8002386:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002388:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800238a:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 800238c:	2384      	movs	r3, #132	@ 0x84
 800238e:	2200      	movs	r2, #0
 8002390:	54e2      	strb	r2, [r4, r3]
}
 8002392:	bc80      	pop	{r7}
 8002394:	46b8      	mov	r8, r7
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	0292      	lsls	r2, r2, #10
 800239c:	d4ea      	bmi.n	8002374 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239e:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023a0:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80023a2:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023a4:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	04b6      	lsls	r6, r6, #18
 80023a8:	e010      	b.n	80023cc <UART_CheckIdleState+0x74>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4217      	tst	r7, r2
 80023b0:	d009      	beq.n	80023c6 <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023b2:	4641      	mov	r1, r8
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	4211      	tst	r1, r2
 80023b8:	d159      	bne.n	800246e <UART_CheckIdleState+0x116>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023ba:	2280      	movs	r2, #128	@ 0x80
 80023bc:	69d9      	ldr	r1, [r3, #28]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	4211      	tst	r1, r2
 80023c2:	d000      	beq.n	80023c6 <UART_CheckIdleState+0x6e>
 80023c4:	e085      	b.n	80024d2 <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	0292      	lsls	r2, r2, #10
 80023ca:	d4d3      	bmi.n	8002374 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023cc:	f7fe fb64 	bl	8000a98 <HAL_GetTick>
 80023d0:	1b40      	subs	r0, r0, r5
 80023d2:	42b0      	cmp	r0, r6
 80023d4:	d3e9      	bcc.n	80023aa <UART_CheckIdleState+0x52>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80023d6:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023da:	2301      	movs	r3, #1
 80023dc:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80023e0:	2080      	movs	r0, #128	@ 0x80
 80023e2:	6822      	ldr	r2, [r4, #0]
 80023e4:	6813      	ldr	r3, [r2, #0]
 80023e6:	4383      	bics	r3, r0
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80023ee:	2388      	movs	r3, #136	@ 0x88
 80023f0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80023f2:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80023f4:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80023f6:	e7c9      	b.n	800238c <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	025b      	lsls	r3, r3, #9
 80023fc:	d4bd      	bmi.n	800237a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fe:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002400:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002402:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002404:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002406:	04b6      	lsls	r6, r6, #18
 8002408:	e011      	b.n	800242e <UART_CheckIdleState+0xd6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4217      	tst	r7, r2
 8002410:	d00a      	beq.n	8002428 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002412:	4641      	mov	r1, r8
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	4211      	tst	r1, r2
 8002418:	d000      	beq.n	800241c <UART_CheckIdleState+0xc4>
 800241a:	e08b      	b.n	8002534 <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800241c:	2280      	movs	r2, #128	@ 0x80
 800241e:	69d9      	ldr	r1, [r3, #28]
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	4211      	tst	r1, r2
 8002424:	d000      	beq.n	8002428 <UART_CheckIdleState+0xd0>
 8002426:	e0b7      	b.n	8002598 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	025b      	lsls	r3, r3, #9
 800242c:	d4a5      	bmi.n	800237a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242e:	f7fe fb33 	bl	8000a98 <HAL_GetTick>
 8002432:	1b40      	subs	r0, r0, r5
 8002434:	42b0      	cmp	r0, r6
 8002436:	d3e8      	bcc.n	800240a <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002438:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800243c:	2201      	movs	r2, #1
 800243e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002442:	6821      	ldr	r1, [r4, #0]
 8002444:	4d6d      	ldr	r5, [pc, #436]	@ (80025fc <UART_CheckIdleState+0x2a4>)
 8002446:	680b      	ldr	r3, [r1, #0]
 8002448:	402b      	ands	r3, r5
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002450:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002454:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002458:	6821      	ldr	r1, [r4, #0]
 800245a:	688b      	ldr	r3, [r1, #8]
 800245c:	4393      	bics	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
 8002460:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002464:	238c      	movs	r3, #140	@ 0x8c
 8002466:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8002468:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 800246a:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800246c:	e78e      	b.n	800238c <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800246e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002470:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002474:	2201      	movs	r2, #1
 8002476:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800247a:	6821      	ldr	r1, [r4, #0]
 800247c:	4d5f      	ldr	r5, [pc, #380]	@ (80025fc <UART_CheckIdleState+0x2a4>)
 800247e:	680b      	ldr	r3, [r1, #0]
 8002480:	402b      	ands	r3, r5
 8002482:	600b      	str	r3, [r1, #0]
 8002484:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002488:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002490:	6822      	ldr	r2, [r4, #0]
 8002492:	485b      	ldr	r0, [pc, #364]	@ (8002600 <UART_CheckIdleState+0x2a8>)
 8002494:	6893      	ldr	r3, [r2, #8]
 8002496:	4003      	ands	r3, r0
 8002498:	6093      	str	r3, [r2, #8]
 800249a:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800249e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d10a      	bne.n	80024ba <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a8:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ac:	2010      	movs	r0, #16
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	6813      	ldr	r3, [r2, #0]
 80024b2:	4383      	bics	r3, r0
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024ba:	238c      	movs	r3, #140	@ 0x8c
 80024bc:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024be:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80024c0:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c2:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024c4:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c6:	66e3      	str	r3, [r4, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80024c8:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024ca:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 80024cc:	3a0c      	subs	r2, #12
 80024ce:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80024d0:	e781      	b.n	80023d6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024d2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024d4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d8:	2201      	movs	r2, #1
 80024da:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80024de:	6821      	ldr	r1, [r4, #0]
 80024e0:	4d46      	ldr	r5, [pc, #280]	@ (80025fc <UART_CheckIdleState+0x2a4>)
 80024e2:	680b      	ldr	r3, [r1, #0]
 80024e4:	402b      	ands	r3, r5
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80024f4:	6822      	ldr	r2, [r4, #0]
 80024f6:	4842      	ldr	r0, [pc, #264]	@ (8002600 <UART_CheckIdleState+0x2a8>)
 80024f8:	6893      	ldr	r3, [r2, #8]
 80024fa:	4003      	ands	r3, r0
 80024fc:	6093      	str	r3, [r2, #8]
 80024fe:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002502:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d10a      	bne.n	800251e <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002508:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002510:	2010      	movs	r0, #16
 8002512:	6822      	ldr	r2, [r4, #0]
 8002514:	6813      	ldr	r3, [r2, #0]
 8002516:	4383      	bics	r3, r0
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800251e:	2220      	movs	r2, #32
 8002520:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002522:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8002524:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002526:	2300      	movs	r3, #0
 8002528:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 800252a:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800252c:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 800252e:	3264      	adds	r2, #100	@ 0x64
 8002530:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002532:	e750      	b.n	80023d6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002534:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002536:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253a:	2201      	movs	r2, #1
 800253c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002540:	6821      	ldr	r1, [r4, #0]
 8002542:	4d2e      	ldr	r5, [pc, #184]	@ (80025fc <UART_CheckIdleState+0x2a4>)
 8002544:	680b      	ldr	r3, [r1, #0]
 8002546:	402b      	ands	r3, r5
 8002548:	600b      	str	r3, [r1, #0]
 800254a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800254e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002552:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002556:	6822      	ldr	r2, [r4, #0]
 8002558:	4829      	ldr	r0, [pc, #164]	@ (8002600 <UART_CheckIdleState+0x2a8>)
 800255a:	6893      	ldr	r3, [r2, #8]
 800255c:	4003      	ands	r3, r0
 800255e:	6093      	str	r3, [r2, #8]
 8002560:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002564:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d10a      	bne.n	8002580 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800256a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002572:	2010      	movs	r0, #16
 8002574:	6822      	ldr	r2, [r4, #0]
 8002576:	6813      	ldr	r3, [r2, #0]
 8002578:	4383      	bics	r3, r0
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002580:	238c      	movs	r3, #140	@ 0x8c
 8002582:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002584:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8002586:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002588:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800258a:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800258c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 800258e:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002590:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8002592:	3a0c      	subs	r2, #12
 8002594:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8002596:	e74f      	b.n	8002438 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002598:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800259a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259e:	2201      	movs	r2, #1
 80025a0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80025a4:	6821      	ldr	r1, [r4, #0]
 80025a6:	4d15      	ldr	r5, [pc, #84]	@ (80025fc <UART_CheckIdleState+0x2a4>)
 80025a8:	680b      	ldr	r3, [r1, #0]
 80025aa:	402b      	ands	r3, r5
 80025ac:	600b      	str	r3, [r1, #0]
 80025ae:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025b2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80025ba:	6822      	ldr	r2, [r4, #0]
 80025bc:	4810      	ldr	r0, [pc, #64]	@ (8002600 <UART_CheckIdleState+0x2a8>)
 80025be:	6893      	ldr	r3, [r2, #8]
 80025c0:	4003      	ands	r3, r0
 80025c2:	6093      	str	r3, [r2, #8]
 80025c4:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d10a      	bne.n	80025e4 <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d6:	2010      	movs	r0, #16
 80025d8:	6822      	ldr	r2, [r4, #0]
 80025da:	6813      	ldr	r3, [r2, #0]
 80025dc:	4383      	bics	r3, r0
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80025e4:	2220      	movs	r2, #32
 80025e6:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025e8:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 80025ea:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ec:	2300      	movs	r3, #0
 80025ee:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80025f0:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025f2:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80025f4:	3264      	adds	r2, #100	@ 0x64
 80025f6:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80025f8:	e71e      	b.n	8002438 <UART_CheckIdleState+0xe0>
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	fffffedf 	.word	0xfffffedf
 8002600:	effffffe 	.word	0xeffffffe

08002604 <HAL_UART_Init>:
{
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002608:	d03a      	beq.n	8002680 <HAL_UART_Init+0x7c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800260a:	2388      	movs	r3, #136	@ 0x88
 800260c:	58c3      	ldr	r3, [r0, r3]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d100      	bne.n	8002614 <HAL_UART_Init+0x10>
 8002612:	e072      	b.n	80026fa <HAL_UART_Init+0xf6>
  huart->gState = HAL_UART_STATE_BUSY;
 8002614:	2388      	movs	r3, #136	@ 0x88
 8002616:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002618:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800261a:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	3a23      	subs	r2, #35	@ 0x23
 8002620:	4393      	bics	r3, r2
 8002622:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002624:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d163      	bne.n	80026f2 <HAL_UART_Init+0xee>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800262a:	6921      	ldr	r1, [r4, #16]
 800262c:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800262e:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002630:	430b      	orrs	r3, r1
 8002632:	6961      	ldr	r1, [r4, #20]
 8002634:	69e0      	ldr	r0, [r4, #28]
 8002636:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002638:	495e      	ldr	r1, [pc, #376]	@ (80027b4 <HAL_UART_Init+0x1b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800263a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800263c:	400a      	ands	r2, r1
 800263e:	4313      	orrs	r3, r2
 8002640:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002642:	686b      	ldr	r3, [r5, #4]
 8002644:	4a5c      	ldr	r2, [pc, #368]	@ (80027b8 <HAL_UART_Init+0x1b4>)
  tmpreg |= huart->Init.OneBitSampling;
 8002646:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002648:	4013      	ands	r3, r2
 800264a:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800264c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800264e:	4313      	orrs	r3, r2
 8002650:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002652:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002654:	68aa      	ldr	r2, [r5, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002656:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002658:	4958      	ldr	r1, [pc, #352]	@ (80027bc <HAL_UART_Init+0x1b8>)
 800265a:	400a      	ands	r2, r1
 800265c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800265e:	220f      	movs	r2, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002660:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002662:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002664:	4393      	bics	r3, r2
 8002666:	4333      	orrs	r3, r6
 8002668:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800266a:	4b55      	ldr	r3, [pc, #340]	@ (80027c0 <HAL_UART_Init+0x1bc>)
 800266c:	429d      	cmp	r5, r3
 800266e:	d009      	beq.n	8002684 <HAL_UART_Init+0x80>
 8002670:	4b54      	ldr	r3, [pc, #336]	@ (80027c4 <HAL_UART_Init+0x1c0>)
 8002672:	429d      	cmp	r5, r3
 8002674:	d00d      	beq.n	8002692 <HAL_UART_Init+0x8e>
  huart->NbRxDataToProcess = 1;
 8002676:	4b54      	ldr	r3, [pc, #336]	@ (80027c8 <HAL_UART_Init+0x1c4>)
 8002678:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800267e:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 8002680:	2001      	movs	r0, #1
}
 8002682:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002684:	2303      	movs	r3, #3
 8002686:	4951      	ldr	r1, [pc, #324]	@ (80027cc <HAL_UART_Init+0x1c8>)
 8002688:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800268a:	4013      	ands	r3, r2
 800268c:	3b01      	subs	r3, #1
 800268e:	2b02      	cmp	r3, #2
 8002690:	d938      	bls.n	8002704 <HAL_UART_Init+0x100>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	4298      	cmp	r0, r3
 8002698:	d049      	beq.n	800272e <HAL_UART_Init+0x12a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800269a:	f7fe ffa5 	bl	80015e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800269e:	2800      	cmp	r0, #0
 80026a0:	d068      	beq.n	8002774 <HAL_UART_Init+0x170>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026a2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80026a4:	4b4a      	ldr	r3, [pc, #296]	@ (80027d0 <HAL_UART_Init+0x1cc>)
 80026a6:	0076      	lsls	r6, r6, #1
 80026a8:	5af1      	ldrh	r1, [r6, r3]
 80026aa:	f7fd fd2d 	bl	8000108 <__udivsi3>
 80026ae:	6865      	ldr	r5, [r4, #4]
 80026b0:	086b      	lsrs	r3, r5, #1
 80026b2:	18c0      	adds	r0, r0, r3
 80026b4:	0029      	movs	r1, r5
 80026b6:	f7fd fd27 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026ba:	0002      	movs	r2, r0
 80026bc:	4b45      	ldr	r3, [pc, #276]	@ (80027d4 <HAL_UART_Init+0x1d0>)
 80026be:	3a10      	subs	r2, #16
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d8d8      	bhi.n	8002676 <HAL_UART_Init+0x72>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80026c8:	4a3f      	ldr	r2, [pc, #252]	@ (80027c8 <HAL_UART_Init+0x1c4>)
 80026ca:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80026cc:	2200      	movs	r2, #0
 80026ce:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80026d0:	67a2      	str	r2, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4940      	ldr	r1, [pc, #256]	@ (80027d8 <HAL_UART_Init+0x1d4>)
  return (UART_CheckIdleState(huart));
 80026d6:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d8:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026da:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	438a      	bics	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	3929      	subs	r1, #41	@ 0x29
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80026ec:	f7ff fe34 	bl	8002358 <UART_CheckIdleState>
 80026f0:	e7c7      	b.n	8002682 <HAL_UART_Init+0x7e>
    UART_AdvFeatureConfig(huart);
 80026f2:	0020      	movs	r0, r4
 80026f4:	f7ff fdc8 	bl	8002288 <UART_AdvFeatureConfig>
 80026f8:	e797      	b.n	800262a <HAL_UART_Init+0x26>
    huart->Lock = HAL_UNLOCKED;
 80026fa:	2284      	movs	r2, #132	@ 0x84
 80026fc:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80026fe:	f7fe f8ed 	bl	80008dc <HAL_UART_MspInit>
 8002702:	e787      	b.n	8002614 <HAL_UART_Init+0x10>
 8002704:	4a35      	ldr	r2, [pc, #212]	@ (80027dc <HAL_UART_Init+0x1d8>)
 8002706:	5cd2      	ldrb	r2, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	4298      	cmp	r0, r3
 800270e:	d03a      	beq.n	8002786 <HAL_UART_Init+0x182>
    switch (clocksource)
 8002710:	2a04      	cmp	r2, #4
 8002712:	d035      	beq.n	8002780 <HAL_UART_Init+0x17c>
 8002714:	d82a      	bhi.n	800276c <HAL_UART_Init+0x168>
 8002716:	2a00      	cmp	r2, #0
 8002718:	d0bf      	beq.n	800269a <HAL_UART_Init+0x96>
 800271a:	2a02      	cmp	r2, #2
 800271c:	d1ab      	bne.n	8002676 <HAL_UART_Init+0x72>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800271e:	6809      	ldr	r1, [r1, #0]
 8002720:	482f      	ldr	r0, [pc, #188]	@ (80027e0 <HAL_UART_Init+0x1dc>)
 8002722:	0609      	lsls	r1, r1, #24
 8002724:	0f49      	lsrs	r1, r1, #29
 8002726:	3101      	adds	r1, #1
 8002728:	f7fd fcee 	bl	8000108 <__udivsi3>
    if (pclk != 0U)
 800272c:	e7ba      	b.n	80026a4 <HAL_UART_Init+0xa0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800272e:	f7fe ff5b 	bl	80015e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002732:	2800      	cmp	r0, #0
 8002734:	d01e      	beq.n	8002774 <HAL_UART_Init+0x170>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002736:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8002738:	4b25      	ldr	r3, [pc, #148]	@ (80027d0 <HAL_UART_Init+0x1cc>)
 800273a:	0076      	lsls	r6, r6, #1
 800273c:	5af1      	ldrh	r1, [r6, r3]
 800273e:	f7fd fce3 	bl	8000108 <__udivsi3>
 8002742:	6865      	ldr	r5, [r4, #4]
 8002744:	0040      	lsls	r0, r0, #1
 8002746:	086b      	lsrs	r3, r5, #1
 8002748:	18c0      	adds	r0, r0, r3
 800274a:	0029      	movs	r1, r5
 800274c:	f7fd fcdc 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002750:	0002      	movs	r2, r0
 8002752:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <HAL_UART_Init+0x1d0>)
 8002754:	3a10      	subs	r2, #16
 8002756:	429a      	cmp	r2, r3
 8002758:	d900      	bls.n	800275c <HAL_UART_Init+0x158>
 800275a:	e78c      	b.n	8002676 <HAL_UART_Init+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800275c:	4a21      	ldr	r2, [pc, #132]	@ (80027e4 <HAL_UART_Init+0x1e0>)
        huart->Instance->BRR = brrtemp;
 800275e:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002760:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002762:	0700      	lsls	r0, r0, #28
 8002764:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002766:	4302      	orrs	r2, r0
 8002768:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 800276a:	e7ad      	b.n	80026c8 <HAL_UART_Init+0xc4>
    switch (clocksource)
 800276c:	0018      	movs	r0, r3
 800276e:	2a08      	cmp	r2, #8
 8002770:	d098      	beq.n	80026a4 <HAL_UART_Init+0xa0>
 8002772:	e780      	b.n	8002676 <HAL_UART_Init+0x72>
  huart->NbRxDataToProcess = 1;
 8002774:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <HAL_UART_Init+0x1c4>)
  huart->RxISR = NULL;
 8002776:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8002778:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800277a:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	e7a8      	b.n	80026d2 <HAL_UART_Init+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8002780:	f7fe ff04 	bl	800158c <HAL_RCC_GetSysClockFreq>
        break;
 8002784:	e78b      	b.n	800269e <HAL_UART_Init+0x9a>
    switch (clocksource)
 8002786:	2a04      	cmp	r2, #4
 8002788:	d00d      	beq.n	80027a6 <HAL_UART_Init+0x1a2>
 800278a:	d80f      	bhi.n	80027ac <HAL_UART_Init+0x1a8>
 800278c:	2a00      	cmp	r2, #0
 800278e:	d0ce      	beq.n	800272e <HAL_UART_Init+0x12a>
 8002790:	2a02      	cmp	r2, #2
 8002792:	d000      	beq.n	8002796 <HAL_UART_Init+0x192>
 8002794:	e76f      	b.n	8002676 <HAL_UART_Init+0x72>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002796:	6809      	ldr	r1, [r1, #0]
 8002798:	4811      	ldr	r0, [pc, #68]	@ (80027e0 <HAL_UART_Init+0x1dc>)
 800279a:	0609      	lsls	r1, r1, #24
 800279c:	0f49      	lsrs	r1, r1, #29
 800279e:	3101      	adds	r1, #1
 80027a0:	f7fd fcb2 	bl	8000108 <__udivsi3>
    if (pclk != 0U)
 80027a4:	e7c8      	b.n	8002738 <HAL_UART_Init+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 80027a6:	f7fe fef1 	bl	800158c <HAL_RCC_GetSysClockFreq>
        break;
 80027aa:	e7c2      	b.n	8002732 <HAL_UART_Init+0x12e>
    switch (clocksource)
 80027ac:	2a08      	cmp	r2, #8
 80027ae:	d0c3      	beq.n	8002738 <HAL_UART_Init+0x134>
 80027b0:	e761      	b.n	8002676 <HAL_UART_Init+0x72>
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	cfff69f3 	.word	0xcfff69f3
 80027b8:	ffffcfff 	.word	0xffffcfff
 80027bc:	11fff4ff 	.word	0x11fff4ff
 80027c0:	40013800 	.word	0x40013800
 80027c4:	40004400 	.word	0x40004400
 80027c8:	00010001 	.word	0x00010001
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08002ad0 	.word	0x08002ad0
 80027d4:	0000ffef 	.word	0x0000ffef
 80027d8:	ffffb7ff 	.word	0xffffb7ff
 80027dc:	08002acc 	.word	0x08002acc
 80027e0:	02dc6c00 	.word	0x02dc6c00
 80027e4:	0000fff0 	.word	0x0000fff0

080027e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80027e8:	b570      	push	{r4, r5, r6, lr}

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80027ea:	2484      	movs	r4, #132	@ 0x84
 80027ec:	5d03      	ldrb	r3, [r0, r4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d012      	beq.n	8002818 <HAL_UARTEx_DisableFifoMode+0x30>

  huart->gState = HAL_UART_STATE_BUSY;
 80027f2:	2588      	movs	r5, #136	@ 0x88
 80027f4:	2324      	movs	r3, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80027f6:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80027fa:	6803      	ldr	r3, [r0, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	43b1      	bics	r1, r6
 8002802:	6019      	str	r1, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002804:	4905      	ldr	r1, [pc, #20]	@ (800281c <HAL_UARTEx_DisableFifoMode+0x34>)
 8002806:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002808:	2100      	movs	r1, #0
 800280a:	6641      	str	r1, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800280c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800280e:	2320      	movs	r3, #32
 8002810:	5143      	str	r3, [r0, r5]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002812:	5501      	strb	r1, [r0, r4]

  return HAL_OK;
 8002814:	2000      	movs	r0, #0
}
 8002816:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8002818:	2002      	movs	r0, #2
 800281a:	e7fc      	b.n	8002816 <HAL_UARTEx_DisableFifoMode+0x2e>
 800281c:	dfffffff 	.word	0xdfffffff

08002820 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	46d6      	mov	lr, sl
 8002824:	464f      	mov	r7, r9
 8002826:	4646      	mov	r6, r8
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002828:	2384      	movs	r3, #132	@ 0x84
{
 800282a:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 800282c:	5cc3      	ldrb	r3, [r0, r3]
{
 800282e:	0004      	movs	r4, r0
 8002830:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8002832:	2b01      	cmp	r3, #1
 8002834:	d03d      	beq.n	80028b2 <HAL_UARTEx_SetTxFifoThreshold+0x92>

  huart->gState = HAL_UART_STATE_BUSY;
 8002836:	2388      	movs	r3, #136	@ 0x88
 8002838:	2124      	movs	r1, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800283a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800283c:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800283e:	682e      	ldr	r6, [r5, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	3923      	subs	r1, #35	@ 0x23
 8002844:	438b      	bics	r3, r1
 8002846:	602b      	str	r3, [r5, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002848:	68ab      	ldr	r3, [r5, #8]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	08d9      	lsrs	r1, r3, #3
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800284e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002850:	4311      	orrs	r1, r2
 8002852:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002854:	2b00      	cmp	r3, #0
 8002856:	d029      	beq.n	80028ac <HAL_UARTEx_SetTxFifoThreshold+0x8c>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002858:	68ab      	ldr	r3, [r5, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800285a:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_UARTEx_SetTxFifoThreshold+0x98>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800285c:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800285e:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002860:	68ab      	ldr	r3, [r5, #8]
 8002862:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002864:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002866:	4a15      	ldr	r2, [pc, #84]	@ (80028bc <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002868:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800286a:	5cd1      	ldrb	r1, [r2, r3]
 800286c:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800286e:	f7fd fcd5 	bl	800021c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002872:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002874:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002876:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002878:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800287a:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800287c:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800287e:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002880:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002882:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002884:	f7fd fcca 	bl	800021c <__divsi3>
 8002888:	b280      	uxth	r0, r0
 800288a:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 800288c:	2220      	movs	r2, #32
 800288e:	52e0      	strh	r0, [r4, r3]
 8002890:	3302      	adds	r3, #2
 8002892:	52e7      	strh	r7, [r4, r3]
 8002894:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002896:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002898:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800289a:	2200      	movs	r2, #0
  return HAL_OK;
 800289c:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800289e:	3b04      	subs	r3, #4
 80028a0:	54e2      	strb	r2, [r4, r3]
}
 80028a2:	bce0      	pop	{r5, r6, r7}
 80028a4:	46ba      	mov	sl, r7
 80028a6:	46b1      	mov	r9, r6
 80028a8:	46a8      	mov	r8, r5
 80028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 80028ac:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 80028ae:	2701      	movs	r7, #1
 80028b0:	e7eb      	b.n	800288a <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 80028b2:	2002      	movs	r0, #2
 80028b4:	e7f5      	b.n	80028a2 <HAL_UARTEx_SetTxFifoThreshold+0x82>
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	08002af0 	.word	0x08002af0
 80028bc:	08002ae8 	.word	0x08002ae8

080028c0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	46d6      	mov	lr, sl
 80028c4:	464f      	mov	r7, r9
 80028c6:	4646      	mov	r6, r8
  __HAL_LOCK(huart);
 80028c8:	2384      	movs	r3, #132	@ 0x84
{
 80028ca:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 80028cc:	5cc3      	ldrb	r3, [r0, r3]
{
 80028ce:	0004      	movs	r4, r0
 80028d0:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d03d      	beq.n	8002952 <HAL_UARTEx_SetRxFifoThreshold+0x92>
  huart->gState = HAL_UART_STATE_BUSY;
 80028d6:	2388      	movs	r3, #136	@ 0x88
 80028d8:	2124      	movs	r1, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80028da:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028dc:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80028de:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	3923      	subs	r1, #35	@ 0x23
 80028e4:	438b      	bics	r3, r1
 80028e6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80028e8:	68a9      	ldr	r1, [r5, #8]
 80028ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <HAL_UARTEx_SetRxFifoThreshold+0x98>)
 80028ec:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80028ee:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80028f0:	4311      	orrs	r1, r2
 80028f2:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d029      	beq.n	800294c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80028f8:	68ab      	ldr	r3, [r5, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80028fa:	4a18      	ldr	r2, [pc, #96]	@ (800295c <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80028fc:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80028fe:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002900:	68ab      	ldr	r3, [r5, #8]
 8002902:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002904:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002906:	4a16      	ldr	r2, [pc, #88]	@ (8002960 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002908:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800290a:	5cd1      	ldrb	r1, [r2, r3]
 800290c:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800290e:	f7fd fc85 	bl	800021c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002912:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002914:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002916:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002918:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800291a:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800291c:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800291e:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002920:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002922:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002924:	f7fd fc7a 	bl	800021c <__divsi3>
 8002928:	b280      	uxth	r0, r0
 800292a:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 800292c:	2220      	movs	r2, #32
 800292e:	52e0      	strh	r0, [r4, r3]
 8002930:	3302      	adds	r3, #2
 8002932:	52e7      	strh	r7, [r4, r3]
 8002934:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002936:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002938:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800293a:	2200      	movs	r2, #0
  return HAL_OK;
 800293c:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800293e:	3b04      	subs	r3, #4
 8002940:	54e2      	strb	r2, [r4, r3]
}
 8002942:	bce0      	pop	{r5, r6, r7}
 8002944:	46ba      	mov	sl, r7
 8002946:	46b1      	mov	r9, r6
 8002948:	46a8      	mov	r8, r5
 800294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 800294c:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 800294e:	2701      	movs	r7, #1
 8002950:	e7eb      	b.n	800292a <HAL_UARTEx_SetRxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8002952:	2002      	movs	r0, #2
 8002954:	e7f5      	b.n	8002942 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	f1ffffff 	.word	0xf1ffffff
 800295c:	08002af0 	.word	0x08002af0
 8002960:	08002ae8 	.word	0x08002ae8

08002964 <memset>:
 8002964:	0003      	movs	r3, r0
 8002966:	1882      	adds	r2, r0, r2
 8002968:	4293      	cmp	r3, r2
 800296a:	d100      	bne.n	800296e <memset+0xa>
 800296c:	4770      	bx	lr
 800296e:	7019      	strb	r1, [r3, #0]
 8002970:	3301      	adds	r3, #1
 8002972:	e7f9      	b.n	8002968 <memset+0x4>

08002974 <__libc_init_array>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	2600      	movs	r6, #0
 8002978:	4c0c      	ldr	r4, [pc, #48]	@ (80029ac <__libc_init_array+0x38>)
 800297a:	4d0d      	ldr	r5, [pc, #52]	@ (80029b0 <__libc_init_array+0x3c>)
 800297c:	1b64      	subs	r4, r4, r5
 800297e:	10a4      	asrs	r4, r4, #2
 8002980:	42a6      	cmp	r6, r4
 8002982:	d109      	bne.n	8002998 <__libc_init_array+0x24>
 8002984:	2600      	movs	r6, #0
 8002986:	f000 f819 	bl	80029bc <_init>
 800298a:	4c0a      	ldr	r4, [pc, #40]	@ (80029b4 <__libc_init_array+0x40>)
 800298c:	4d0a      	ldr	r5, [pc, #40]	@ (80029b8 <__libc_init_array+0x44>)
 800298e:	1b64      	subs	r4, r4, r5
 8002990:	10a4      	asrs	r4, r4, #2
 8002992:	42a6      	cmp	r6, r4
 8002994:	d105      	bne.n	80029a2 <__libc_init_array+0x2e>
 8002996:	bd70      	pop	{r4, r5, r6, pc}
 8002998:	00b3      	lsls	r3, r6, #2
 800299a:	58eb      	ldr	r3, [r5, r3]
 800299c:	4798      	blx	r3
 800299e:	3601      	adds	r6, #1
 80029a0:	e7ee      	b.n	8002980 <__libc_init_array+0xc>
 80029a2:	00b3      	lsls	r3, r6, #2
 80029a4:	58eb      	ldr	r3, [r5, r3]
 80029a6:	4798      	blx	r3
 80029a8:	3601      	adds	r6, #1
 80029aa:	e7f2      	b.n	8002992 <__libc_init_array+0x1e>
 80029ac:	08002af8 	.word	0x08002af8
 80029b0:	08002af8 	.word	0x08002af8
 80029b4:	08002afc 	.word	0x08002afc
 80029b8:	08002af8 	.word	0x08002af8

080029bc <_init>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr

080029c8 <_fini>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ce:	bc08      	pop	{r3}
 80029d0:	469e      	mov	lr, r3
 80029d2:	4770      	bx	lr
