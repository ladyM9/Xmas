
Xmas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d08  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08001dc8  08001dc8  00002dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ea0  08001ea0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ea0  08001ea0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ea0  08001ea0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ea0  08001ea0  00002ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ea4  08001ea4  00002ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ea8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  08001eb4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08001eb4  00003190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1ee  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed0  00000000  00000000  0000f222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000628a  00000000  00000000  000110f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  00017380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b35  00000000  00000000  00017cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000123df  00000000  00000000  0001880d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef18  00000000  00000000  0002abec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000752b5  00000000  00000000  00039b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aedb9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018a0  00000000  00000000  000aedfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000b069c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001db0 	.word	0x08001db0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001db0 	.word	0x08001db0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b500      	push	{lr}
 8000222:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	2218      	movs	r2, #24
 8000226:	2100      	movs	r1, #0
 8000228:	a806      	add	r0, sp, #24
 800022a:	f001 fd95 	bl	8001d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022e:	2214      	movs	r2, #20
 8000230:	2100      	movs	r1, #0
 8000232:	4668      	mov	r0, sp
 8000234:	f001 fd90 	bl	8001d58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000238:	2302      	movs	r3, #2
 800023a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	33fe      	adds	r3, #254	@ 0xfe
 800023e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	3bc0      	subs	r3, #192	@ 0xc0
 8000244:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f000 fdaf 	bl	8000da8 <HAL_RCC_OscConfig>
 800024a:	2800      	cmp	r0, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800024e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000250:	e7fe      	b.n	8000250 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	2207      	movs	r2, #7
 8000254:	2300      	movs	r3, #0
 8000256:	9200      	str	r2, [sp, #0]
 8000258:	9301      	str	r3, [sp, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800025e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000260:	2101      	movs	r1, #1
 8000262:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	9202      	str	r2, [sp, #8]
 8000266:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000268:	f000 ff14 	bl	8001094 <HAL_RCC_ClockConfig>
 800026c:	2800      	cmp	r0, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x54>
 8000270:	b672      	cpsid	i
  while (1)
 8000272:	e7fe      	b.n	8000272 <SystemClock_Config+0x52>
}
 8000274:	b00d      	add	sp, #52	@ 0x34
 8000276:	bd00      	pop	{pc}

08000278 <begin>:
{
 8000278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027a:	4647      	mov	r7, r8
 800027c:	46ce      	mov	lr, r9
 800027e:	4b19      	ldr	r3, [pc, #100]	@ (80002e4 <begin+0x6c>)
 8000280:	4688      	mov	r8, r1
 8000282:	4694      	mov	ip, r2
		uint8_t bit = (colorRGB >> (23-i-2) & 1);
 8000284:	21c8      	movs	r1, #200	@ 0xc8
 8000286:	001a      	movs	r2, r3
{
 8000288:	b580      	push	{r7, lr}
 800028a:	4699      	mov	r9, r3
 800028c:	0007      	movs	r7, r0
 800028e:	001d      	movs	r5, r3
 8000290:	2415      	movs	r4, #21
		uint8_t bit = (colorRGB >> (23-i-2) & 1);
 8000292:	2001      	movs	r0, #1
			buffer[i] = 3;
 8000294:	2603      	movs	r6, #3
 8000296:	3264      	adds	r2, #100	@ 0x64
		uint8_t bit = (colorRGB >> (23-i-2) & 1);
 8000298:	0189      	lsls	r1, r1, #6
 800029a:	000b      	movs	r3, r1
 800029c:	40e3      	lsrs	r3, r4
			buffer[i] = 3;
 800029e:	4003      	ands	r3, r0
 80002a0:	425b      	negs	r3, r3
 80002a2:	4033      	ands	r3, r6
 80002a4:	3303      	adds	r3, #3
 80002a6:	c508      	stmia	r5!, {r3}
	for(int i = 0; i < 25 ; i++)
 80002a8:	3c01      	subs	r4, #1
 80002aa:	42aa      	cmp	r2, r5
 80002ac:	d1f5      	bne.n	800029a <begin+0x22>
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 80002ae:	2305      	movs	r3, #5
 80002b0:	6839      	ldr	r1, [r7, #0]
	HAL_TIM_PWM_Start_DMA(_htim, channel, (uint32_t*)buffer, 32);
 80002b2:	464a      	mov	r2, r9
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 80002b4:	628b      	str	r3, [r1, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(_htim, 9);
 80002b6:	3304      	adds	r3, #4
 80002b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
	HAL_TIM_PWM_Start_DMA(_htim, channel, (uint32_t*)buffer, 32);
 80002ba:	0038      	movs	r0, r7
 80002bc:	4661      	mov	r1, ip
	__HAL_TIM_SET_AUTORELOAD(_htim, 9);
 80002be:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start_DMA(_htim, channel, (uint32_t*)buffer, 32);
 80002c0:	3317      	adds	r3, #23
 80002c2:	f001 f9f3 	bl	80016ac <HAL_TIM_PWM_Start_DMA>
	__HAL_TIM_ENABLE_DMA(_htim, TIM_DMA_CC1);
 80002c6:	2380      	movs	r3, #128	@ 0x80
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	68d1      	ldr	r1, [r2, #12]
	HAL_DMA_PollForTransfer(_dmahtim, HAL_DMA_FULL_TRANSFER  , 20);
 80002ce:	4640      	mov	r0, r8
	__HAL_TIM_ENABLE_DMA(_htim, TIM_DMA_CC1);
 80002d0:	430b      	orrs	r3, r1
 80002d2:	60d3      	str	r3, [r2, #12]
	HAL_DMA_PollForTransfer(_dmahtim, HAL_DMA_FULL_TRANSFER  , 20);
 80002d4:	2100      	movs	r1, #0
 80002d6:	2214      	movs	r2, #20
 80002d8:	f000 fb6c 	bl	80009b4 <HAL_DMA_PollForTransfer>
}
 80002dc:	bcc0      	pop	{r6, r7}
 80002de:	46b9      	mov	r9, r7
 80002e0:	46b0      	mov	r8, r6
 80002e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002e4:	20000028 	.word	0x20000028

080002e8 <main>:
{
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ea:	2401      	movs	r4, #1
{
 80002ec:	b0a1      	sub	sp, #132	@ 0x84
  HAL_Init();
 80002ee:	f000 fa13 	bl	8000718 <HAL_Init>
  HAL_TIM_PWM_DeInit(&htim1);
 80002f2:	4f7c      	ldr	r7, [pc, #496]	@ (80004e4 <main+0x1fc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4d7c      	ldr	r5, [pc, #496]	@ (80004e8 <main+0x200>)
  HAL_TIM_PWM_DeInit(&htim1);
 80002f6:	0038      	movs	r0, r7
 80002f8:	f001 f9a2 	bl	8001640 <HAL_TIM_PWM_DeInit>
  SystemClock_Config();
 80002fc:	f7ff ff90 	bl	8000220 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000300:	2214      	movs	r2, #20
 8000302:	2100      	movs	r1, #0
 8000304:	a812      	add	r0, sp, #72	@ 0x48
 8000306:	f001 fd27 	bl	8001d58 <memset>
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 800030a:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4323      	orrs	r3, r4
 8000312:	636b      	str	r3, [r5, #52]	@ 0x34
 8000314:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 8000316:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000318:	4023      	ands	r3, r4
 800031a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 800031c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 8000320:	f000 fd3c 	bl	8000d9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PERIPH_SUPLLY_Pin;
 8000324:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 8000326:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000328:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = PERIPH_SUPLLY_Pin;
 800032a:	9312      	str	r3, [sp, #72]	@ 0x48
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 800032c:	a912      	add	r1, sp, #72	@ 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800032e:	3b6f      	subs	r3, #111	@ 0x6f
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 8000330:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000332:	9313      	str	r3, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000334:	9414      	str	r4, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	9615      	str	r6, [sp, #84]	@ 0x54
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 8000338:	f000 fc2e 	bl	8000b98 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800033c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800033e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000340:	4323      	orrs	r3, r4
 8000342:	63ab      	str	r3, [r5, #56]	@ 0x38
 8000344:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000346:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000348:	401c      	ands	r4, r3
 800034a:	9400      	str	r4, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800034c:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800034e:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000350:	f000 fa00 	bl	8000754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000354:	2009      	movs	r0, #9
 8000356:	f000 fa27 	bl	80007a8 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035a:	2210      	movs	r2, #16
 800035c:	2100      	movs	r1, #0
 800035e:	a80a      	add	r0, sp, #40	@ 0x28
 8000360:	f001 fcfa 	bl	8001d58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000364:	220c      	movs	r2, #12
 8000366:	2100      	movs	r1, #0
 8000368:	a806      	add	r0, sp, #24
 800036a:	f001 fcf5 	bl	8001d58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800036e:	221c      	movs	r2, #28
 8000370:	2100      	movs	r1, #0
 8000372:	a812      	add	r0, sp, #72	@ 0x48
 8000374:	f001 fcf0 	bl	8001d58 <memset>
  htim3.Instance = TIM3;
 8000378:	4c5c      	ldr	r4, [pc, #368]	@ (80004ec <main+0x204>)
 800037a:	4b5d      	ldr	r3, [pc, #372]	@ (80004f0 <main+0x208>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800037c:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 800037e:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 5;
 8000380:	2305      	movs	r3, #5
 8000382:	6063      	str	r3, [r4, #4]
  htim3.Init.Period = 9;
 8000384:	3304      	adds	r3, #4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000386:	60a6      	str	r6, [r4, #8]
  htim3.Init.Period = 9;
 8000388:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038a:	6126      	str	r6, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038c:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800038e:	f001 fb1f 	bl	80019d0 <HAL_TIM_Base_Init>
 8000392:	2800      	cmp	r0, #0
 8000394:	d001      	beq.n	800039a <main+0xb2>
 8000396:	b672      	cpsid	i
  while (1)
 8000398:	e7fe      	b.n	8000398 <main+0xb0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039a:	2680      	movs	r6, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800039c:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039e:	0176      	lsls	r6, r6, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003a0:	a90a      	add	r1, sp, #40	@ 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a2:	960a      	str	r6, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003a4:	f001 f986 	bl	80016b4 <HAL_TIM_ConfigClockSource>
 80003a8:	2800      	cmp	r0, #0
 80003aa:	d001      	beq.n	80003b0 <main+0xc8>
 80003ac:	b672      	cpsid	i
  while (1)
 80003ae:	e7fe      	b.n	80003ae <main+0xc6>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003b0:	0020      	movs	r0, r4
 80003b2:	f001 fb3d 	bl	8001a30 <HAL_TIM_PWM_Init>
 80003b6:	2800      	cmp	r0, #0
 80003b8:	d001      	beq.n	80003be <main+0xd6>
 80003ba:	b672      	cpsid	i
  while (1)
 80003bc:	e7fe      	b.n	80003bc <main+0xd4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003be:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c0:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003c2:	a906      	add	r1, sp, #24
 80003c4:	0020      	movs	r0, r4
 80003c6:	f001 fc33 	bl	8001c30 <HAL_TIMEx_MasterConfigSynchronization>
 80003ca:	1e02      	subs	r2, r0, #0
 80003cc:	d001      	beq.n	80003d2 <main+0xea>
 80003ce:	b672      	cpsid	i
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <main+0xe8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003d2:	2060      	movs	r0, #96	@ 0x60
 80003d4:	2100      	movs	r1, #0
 80003d6:	9012      	str	r0, [sp, #72]	@ 0x48
 80003d8:	9113      	str	r1, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003da:	0020      	movs	r0, r4
 80003dc:	a912      	add	r1, sp, #72	@ 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003de:	9214      	str	r2, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003e0:	9216      	str	r2, [sp, #88]	@ 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e2:	f001 fb91 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 80003e6:	1e05      	subs	r5, r0, #0
 80003e8:	d001      	beq.n	80003ee <main+0x106>
 80003ea:	b672      	cpsid	i
  while (1)
 80003ec:	e7fe      	b.n	80003ec <main+0x104>
  HAL_TIM_MspPostInit(&htim3);
 80003ee:	0020      	movs	r0, r4
 80003f0:	f000 f8e8 	bl	80005c4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003f4:	2210      	movs	r2, #16
 80003f6:	0029      	movs	r1, r5
 80003f8:	a806      	add	r0, sp, #24
 80003fa:	f001 fcad 	bl	8001d58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	220c      	movs	r2, #12
 8000400:	0029      	movs	r1, r5
 8000402:	a802      	add	r0, sp, #8
 8000404:	f001 fca8 	bl	8001d58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000408:	221c      	movs	r2, #28
 800040a:	0029      	movs	r1, r5
 800040c:	a80a      	add	r0, sp, #40	@ 0x28
 800040e:	f001 fca3 	bl	8001d58 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000412:	2234      	movs	r2, #52	@ 0x34
 8000414:	0029      	movs	r1, r5
 8000416:	a812      	add	r0, sp, #72	@ 0x48
 8000418:	f001 fc9e 	bl	8001d58 <memset>
  htim1.Instance = TIM1;
 800041c:	4b35      	ldr	r3, [pc, #212]	@ (80004f4 <main+0x20c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800041e:	0038      	movs	r0, r7
  htim1.Instance = TIM1;
 8000420:	603b      	str	r3, [r7, #0]
  htim1.Init.Prescaler = 479;
 8000422:	23e0      	movs	r3, #224	@ 0xe0
 8000424:	33ff      	adds	r3, #255	@ 0xff
 8000426:	607b      	str	r3, [r7, #4]
  htim1.Init.Period = 50;
 8000428:	3bae      	subs	r3, #174	@ 0xae
 800042a:	3bff      	subs	r3, #255	@ 0xff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042c:	60bd      	str	r5, [r7, #8]
  htim1.Init.Period = 50;
 800042e:	60fb      	str	r3, [r7, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000430:	613d      	str	r5, [r7, #16]
  htim1.Init.RepetitionCounter = 0;
 8000432:	617d      	str	r5, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000434:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000436:	f001 facb 	bl	80019d0 <HAL_TIM_Base_Init>
 800043a:	2800      	cmp	r0, #0
 800043c:	d001      	beq.n	8000442 <main+0x15a>
 800043e:	b672      	cpsid	i
  while (1)
 8000440:	e7fe      	b.n	8000440 <main+0x158>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000442:	0038      	movs	r0, r7
 8000444:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000446:	9606      	str	r6, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000448:	f001 f934 	bl	80016b4 <HAL_TIM_ConfigClockSource>
 800044c:	2800      	cmp	r0, #0
 800044e:	d001      	beq.n	8000454 <main+0x16c>
 8000450:	b672      	cpsid	i
  while (1)
 8000452:	e7fe      	b.n	8000452 <main+0x16a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000454:	0038      	movs	r0, r7
 8000456:	f001 faeb 	bl	8001a30 <HAL_TIM_PWM_Init>
 800045a:	2800      	cmp	r0, #0
 800045c:	d001      	beq.n	8000462 <main+0x17a>
 800045e:	b672      	cpsid	i
  while (1)
 8000460:	e7fe      	b.n	8000460 <main+0x178>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000462:	2500      	movs	r5, #0
 8000464:	2600      	movs	r6, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000466:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000468:	a902      	add	r1, sp, #8
 800046a:	0038      	movs	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046c:	9502      	str	r5, [sp, #8]
 800046e:	9603      	str	r6, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000470:	f001 fbde 	bl	8001c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000474:	1e02      	subs	r2, r0, #0
 8000476:	d001      	beq.n	800047c <main+0x194>
 8000478:	b672      	cpsid	i
  while (1)
 800047a:	e7fe      	b.n	800047a <main+0x192>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800047c:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 800047e:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000480:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000482:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000484:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000486:	a90a      	add	r1, sp, #40	@ 0x28
 8000488:	0038      	movs	r0, r7
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800048a:	950e      	str	r5, [sp, #56]	@ 0x38
 800048c:	960f      	str	r6, [sp, #60]	@ 0x3c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000490:	f001 fb3a 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 8000494:	2800      	cmp	r0, #0
 8000496:	d001      	beq.n	800049c <main+0x1b4>
 8000498:	b672      	cpsid	i
  while (1)
 800049a:	e7fe      	b.n	800049a <main+0x1b2>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800049c:	2280      	movs	r2, #128	@ 0x80
 800049e:	0192      	lsls	r2, r2, #6
 80004a0:	9217      	str	r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004a2:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a4:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004a6:	0492      	lsls	r2, r2, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004a8:	0038      	movs	r0, r7
 80004aa:	a912      	add	r1, sp, #72	@ 0x48
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004ac:	9312      	str	r3, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ae:	9313      	str	r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b0:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b2:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b4:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004b6:	9318      	str	r3, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004b8:	9319      	str	r3, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004ba:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004bc:	921b      	str	r2, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004be:	931c      	str	r3, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004c0:	931d      	str	r3, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c2:	931e      	str	r3, [sp, #120]	@ 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004c4:	f001 fbe8 	bl	8001c98 <HAL_TIMEx_ConfigBreakDeadTime>
 80004c8:	1e05      	subs	r5, r0, #0
 80004ca:	d001      	beq.n	80004d0 <main+0x1e8>
 80004cc:	b672      	cpsid	i
  while (1)
 80004ce:	e7fe      	b.n	80004ce <main+0x1e6>
  HAL_TIM_MspPostInit(&htim1);
 80004d0:	0038      	movs	r0, r7
 80004d2:	f000 f877 	bl	80005c4 <HAL_TIM_MspPostInit>
  begin(&htim3, &hdma_tim3_ch1 ,TIM_CHANNEL_1);
 80004d6:	002a      	movs	r2, r5
 80004d8:	0020      	movs	r0, r4
 80004da:	4907      	ldr	r1, [pc, #28]	@ (80004f8 <main+0x210>)
 80004dc:	f7ff fecc 	bl	8000278 <begin>
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x1f8>
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	20000140 	.word	0x20000140
 80004e8:	40021000 	.word	0x40021000
 80004ec:	200000f4 	.word	0x200000f4
 80004f0:	40000400 	.word	0x40000400
 80004f4:	40012c00 	.word	0x40012c00
 80004f8:	20000098 	.word	0x20000098

080004fc <Error_Handler>:
 80004fc:	b672      	cpsid	i
  while (1)
 80004fe:	e7fe      	b.n	80004fe <Error_Handler+0x2>

08000500 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000500:	2201      	movs	r2, #1
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <HAL_MspInit+0x2c>)
{
 8000504:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000508:	4311      	orrs	r1, r2
 800050a:	6419      	str	r1, [r3, #64]	@ 0x40
 800050c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800050e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000518:	0549      	lsls	r1, r1, #21
 800051a:	430a      	orrs	r2, r1
 800051c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800051e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000520:	400b      	ands	r3, r1
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	b002      	add	sp, #8
 8000528:	4770      	bx	lr
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000530:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM1)
 8000532:	6803      	ldr	r3, [r0, #0]
 8000534:	4a1e      	ldr	r2, [pc, #120]	@ (80005b0 <HAL_TIM_Base_MspInit+0x80>)
{
 8000536:	0004      	movs	r4, r0
 8000538:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 800053a:	4293      	cmp	r3, r2
 800053c:	d004      	beq.n	8000548 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800053e:	4a1d      	ldr	r2, [pc, #116]	@ (80005b4 <HAL_TIM_Base_MspInit+0x84>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d00c      	beq.n	800055e <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000544:	b003      	add	sp, #12
 8000546:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <HAL_TIM_Base_MspInit+0x88>)
 800054c:	0109      	lsls	r1, r1, #4
 800054e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000550:	430a      	orrs	r2, r1
 8000552:	641a      	str	r2, [r3, #64]	@ 0x40
 8000554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000556:	400b      	ands	r3, r1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	9b00      	ldr	r3, [sp, #0]
 800055c:	e7f2      	b.n	8000544 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800055e:	2302      	movs	r3, #2
 8000560:	4a15      	ldr	r2, [pc, #84]	@ (80005b8 <HAL_TIM_Base_MspInit+0x88>)
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8000562:	4d16      	ldr	r5, [pc, #88]	@ (80005bc <HAL_TIM_Base_MspInit+0x8c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000564:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000566:	0028      	movs	r0, r5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000568:	4319      	orrs	r1, r3
 800056a:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800056c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800056e:	4013      	ands	r3, r2
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	9b01      	ldr	r3, [sp, #4]
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HAL_TIM_Base_MspInit+0x90>)
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000576:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8000578:	602b      	str	r3, [r5, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800057a:	2320      	movs	r3, #32
 800057c:	606b      	str	r3, [r5, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800057e:	3b10      	subs	r3, #16
 8000580:	60ab      	str	r3, [r5, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000582:	2300      	movs	r3, #0
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000584:	612a      	str	r2, [r5, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000586:	3280      	adds	r2, #128	@ 0x80
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000588:	60eb      	str	r3, [r5, #12]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800058a:	616a      	str	r2, [r5, #20]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800058c:	61eb      	str	r3, [r5, #28]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800058e:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000590:	23c0      	movs	r3, #192	@ 0xc0
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000592:	00d2      	lsls	r2, r2, #3
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000594:	019b      	lsls	r3, r3, #6
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000596:	61aa      	str	r2, [r5, #24]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000598:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800059a:	f000 f94b 	bl	8000834 <HAL_DMA_Init>
 800059e:	2800      	cmp	r0, #0
 80005a0:	d102      	bne.n	80005a8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80005a2:	6265      	str	r5, [r4, #36]	@ 0x24
 80005a4:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80005a6:	e7cd      	b.n	8000544 <HAL_TIM_Base_MspInit+0x14>
      Error_Handler();
 80005a8:	f7ff ffa8 	bl	80004fc <Error_Handler>
 80005ac:	e7f9      	b.n	80005a2 <HAL_TIM_Base_MspInit+0x72>
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	40012c00 	.word	0x40012c00
 80005b4:	40000400 	.word	0x40000400
 80005b8:	40021000 	.word	0x40021000
 80005bc:	20000098 	.word	0x20000098
 80005c0:	40020008 	.word	0x40020008

080005c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005c4:	b510      	push	{r4, lr}
 80005c6:	0004      	movs	r4, r0
 80005c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	2214      	movs	r2, #20
 80005cc:	2100      	movs	r1, #0
 80005ce:	a802      	add	r0, sp, #8
 80005d0:	f001 fbc2 	bl	8001d58 <memset>
  if(htim->Instance==TIM1)
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	4a17      	ldr	r2, [pc, #92]	@ (8000634 <HAL_TIM_MspPostInit+0x70>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d004      	beq.n	80005e6 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80005dc:	4a16      	ldr	r2, [pc, #88]	@ (8000638 <HAL_TIM_MspPostInit+0x74>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d018      	beq.n	8000614 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005e2:	b008      	add	sp, #32
 80005e4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2301      	movs	r3, #1
 80005e8:	4a14      	ldr	r2, [pc, #80]	@ (800063c <HAL_TIM_MspPostInit+0x78>)
 80005ea:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80005ec:	4319      	orrs	r1, r3
 80005ee:	6351      	str	r1, [r2, #52]	@ 0x34
 80005f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80005f2:	4013      	ands	r3, r2
 80005f4:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005f6:	2220      	movs	r2, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005fa:	2302      	movs	r3, #2
 80005fc:	9202      	str	r2, [sp, #8]
 80005fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000600:	2302      	movs	r3, #2
 8000602:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000604:	3303      	adds	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	20a0      	movs	r0, #160	@ 0xa0
 8000608:	a902      	add	r1, sp, #8
 800060a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800060c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f000 fac3 	bl	8000b98 <HAL_GPIO_Init>
}
 8000612:	e7e6      	b.n	80005e2 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	2301      	movs	r3, #1
 8000616:	4a09      	ldr	r2, [pc, #36]	@ (800063c <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000618:	2040      	movs	r0, #64	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800061c:	4319      	orrs	r1, r3
 800061e:	6351      	str	r1, [r2, #52]	@ 0x34
 8000620:	6b52      	ldr	r2, [r2, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000622:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	401a      	ands	r2, r3
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062a:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800062c:	9002      	str	r0, [sp, #8]
 800062e:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000630:	9205      	str	r2, [sp, #20]
 8000632:	e7e8      	b.n	8000606 <HAL_TIM_MspPostInit+0x42>
 8000634:	40012c00 	.word	0x40012c00
 8000638:	40000400 	.word	0x40000400
 800063c:	40021000 	.word	0x40021000

08000640 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler>
 8000642:	46c0      	nop			@ (mov r8, r8)

08000644 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <HardFault_Handler>
 8000646:	46c0      	nop			@ (mov r8, r8)

08000648 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000648:	4770      	bx	lr
 800064a:	46c0      	nop			@ (mov r8, r8)

0800064c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800064c:	4770      	bx	lr
 800064e:	46c0      	nop			@ (mov r8, r8)

08000650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000650:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000652:	f000 f86d 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000656:	bd10      	pop	{r4, pc}

08000658 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000658:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800065a:	4802      	ldr	r0, [pc, #8]	@ (8000664 <DMA1_Channel1_IRQHandler+0xc>)
 800065c:	f000 fa40 	bl	8000ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	20000098 	.word	0x20000098

08000668 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000668:	2280      	movs	r2, #128	@ 0x80
 800066a:	4b02      	ldr	r3, [pc, #8]	@ (8000674 <SystemInit+0xc>)
 800066c:	0512      	lsls	r2, r2, #20
 800066e:	609a      	str	r2, [r3, #8]
#endif
}
 8000670:	4770      	bx	lr
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000678:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800067a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800067c:	f7ff fff4 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000680:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000682:	e003      	b.n	800068c <LoopCopyDataInit>

08000684 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000686:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000688:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800068a:	3104      	adds	r1, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800068c:	480a      	ldr	r0, [pc, #40]	@ (80006b8 <LoopForever+0xa>)
  ldr r3, =_edata
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <LoopForever+0xe>)
  adds r2, r0, r1
 8000690:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000692:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000694:	d3f6      	bcc.n	8000684 <CopyDataInit>
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000698:	e002      	b.n	80006a0 <LoopFillZerobss>

0800069a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  str  r3, [r2]
 800069c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069e:	3204      	adds	r2, #4

080006a0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <LoopForever+0x16>)
  cmp r2, r3
 80006a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006a4:	d3f9      	bcc.n	800069a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80006a6:	f001 fb5f 	bl	8001d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006aa:	f7ff fe1d 	bl	80002e8 <main>

080006ae <LoopForever>:

LoopForever:
    b LoopForever
 80006ae:	e7fe      	b.n	80006ae <LoopForever>
  ldr   r0, =_estack
 80006b0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80006b4:	08001ea8 	.word	0x08001ea8
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006c0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80006c4:	20000190 	.word	0x20000190

080006c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC1_IRQHandler>
	...

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_InitTick+0x40>)
{
 80006d0:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0UL)
 80006d2:	7819      	ldrb	r1, [r3, #0]
 80006d4:	2900      	cmp	r1, #0
 80006d6:	d101      	bne.n	80006dc <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80006da:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80006dc:	20fa      	movs	r0, #250	@ 0xfa
 80006de:	0080      	lsls	r0, r0, #2
 80006e0:	f7ff fd12 	bl	8000108 <__udivsi3>
 80006e4:	4d0a      	ldr	r5, [pc, #40]	@ (8000710 <HAL_InitTick+0x44>)
 80006e6:	0001      	movs	r1, r0
 80006e8:	6828      	ldr	r0, [r5, #0]
 80006ea:	f7ff fd0d 	bl	8000108 <__udivsi3>
 80006ee:	f000 f867 	bl	80007c0 <HAL_SYSTICK_Config>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d1f0      	bne.n	80006d8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	2c03      	cmp	r4, #3
 80006f8:	d8ee      	bhi.n	80006d8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fa:	3801      	subs	r0, #1
 80006fc:	2200      	movs	r2, #0
 80006fe:	0021      	movs	r1, r4
 8000700:	f000 f828 	bl	8000754 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000704:	4b03      	ldr	r3, [pc, #12]	@ (8000714 <HAL_InitTick+0x48>)
 8000706:	2000      	movs	r0, #0
 8000708:	601c      	str	r4, [r3, #0]
  return status;
 800070a:	e7e6      	b.n	80006da <HAL_InitTick+0xe>
 800070c:	20000004 	.word	0x20000004
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008

08000718 <HAL_Init>:
{
 8000718:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800071a:	2003      	movs	r0, #3
 800071c:	f7ff ffd6 	bl	80006cc <HAL_InitTick>
 8000720:	1e04      	subs	r4, r0, #0
 8000722:	d002      	beq.n	800072a <HAL_Init+0x12>
    status = HAL_ERROR;
 8000724:	2401      	movs	r4, #1
}
 8000726:	0020      	movs	r0, r4
 8000728:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800072a:	f7ff fee9 	bl	8000500 <HAL_MspInit>
 800072e:	e7fa      	b.n	8000726 <HAL_Init+0xe>

08000730 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000730:	4a03      	ldr	r2, [pc, #12]	@ (8000740 <HAL_IncTick+0x10>)
 8000732:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <HAL_IncTick+0x14>)
 8000734:	6811      	ldr	r1, [r2, #0]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	185b      	adds	r3, r3, r1
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	4770      	bx	lr
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	2000018c 	.word	0x2000018c
 8000744:	20000004 	.word	0x20000004

08000748 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000748:	4b01      	ldr	r3, [pc, #4]	@ (8000750 <HAL_GetTick+0x8>)
 800074a:	6818      	ldr	r0, [r3, #0]
}
 800074c:	4770      	bx	lr
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	2000018c 	.word	0x2000018c

08000754 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000754:	22ff      	movs	r2, #255	@ 0xff
 8000756:	2303      	movs	r3, #3
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b510      	push	{r4, lr}
 800075a:	0014      	movs	r4, r2
 800075c:	4003      	ands	r3, r0
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000762:	0189      	lsls	r1, r1, #6
 8000764:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000766:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000768:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 800076a:	2800      	cmp	r0, #0
 800076c:	db0b      	blt.n	8000786 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_NVIC_SetPriority+0x4c>)
 8000770:	21c0      	movs	r1, #192	@ 0xc0
 8000772:	469c      	mov	ip, r3
 8000774:	0880      	lsrs	r0, r0, #2
 8000776:	0080      	lsls	r0, r0, #2
 8000778:	4460      	add	r0, ip
 800077a:	0089      	lsls	r1, r1, #2
 800077c:	5843      	ldr	r3, [r0, r1]
 800077e:	4023      	ands	r3, r4
 8000780:	4313      	orrs	r3, r2
 8000782:	5043      	str	r3, [r0, r1]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000784:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000786:	230f      	movs	r3, #15
 8000788:	4906      	ldr	r1, [pc, #24]	@ (80007a4 <HAL_NVIC_SetPriority+0x50>)
 800078a:	4003      	ands	r3, r0
 800078c:	468c      	mov	ip, r1
 800078e:	3b08      	subs	r3, #8
 8000790:	089b      	lsrs	r3, r3, #2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4463      	add	r3, ip
 8000796:	69d9      	ldr	r1, [r3, #28]
 8000798:	400c      	ands	r4, r1
 800079a:	4314      	orrs	r4, r2
 800079c:	61dc      	str	r4, [r3, #28]
 800079e:	e7f1      	b.n	8000784 <HAL_NVIC_SetPriority+0x30>
 80007a0:	e000e100 	.word	0xe000e100
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007a8:	2800      	cmp	r0, #0
 80007aa:	db05      	blt.n	80007b8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ac:	221f      	movs	r2, #31
 80007ae:	2301      	movs	r3, #1
 80007b0:	4002      	ands	r2, r0
 80007b2:	4093      	lsls	r3, r2
 80007b4:	4a01      	ldr	r2, [pc, #4]	@ (80007bc <HAL_NVIC_EnableIRQ+0x14>)
 80007b6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007b8:	4770      	bx	lr
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	1e43      	subs	r3, r0, #1
 80007c4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d20e      	bcs.n	80007ea <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007cc:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ce:	4a07      	ldr	r2, [pc, #28]	@ (80007ec <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d0:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d4:	6a03      	ldr	r3, [r0, #32]
 80007d6:	0609      	lsls	r1, r1, #24
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	0a1b      	lsrs	r3, r3, #8
 80007dc:	430b      	orrs	r3, r1
 80007de:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e6:	3307      	adds	r3, #7
 80007e8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80007ea:	4770      	bx	lr
 80007ec:	e000e010 	.word	0xe000e010
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007f6:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80007f8:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 80007fa:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80007fc:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80007fe:	2c00      	cmp	r4, #0
 8000800:	d002      	beq.n	8000808 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000802:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8000804:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8000806:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000808:	241c      	movs	r4, #28
 800080a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800080c:	4e08      	ldr	r6, [pc, #32]	@ (8000830 <DMA_SetConfig+0x3c>)
 800080e:	4025      	ands	r5, r4
 8000810:	3c1b      	subs	r4, #27
 8000812:	40ac      	lsls	r4, r5
 8000814:	6877      	ldr	r7, [r6, #4]
 8000816:	433c      	orrs	r4, r7
 8000818:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800081a:	6804      	ldr	r4, [r0, #0]
 800081c:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800081e:	6883      	ldr	r3, [r0, #8]
 8000820:	2b10      	cmp	r3, #16
 8000822:	d002      	beq.n	800082a <DMA_SetConfig+0x36>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000824:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000826:	60e2      	str	r2, [r4, #12]
  }
}
 8000828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 800082a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800082c:	60e1      	str	r1, [r4, #12]
 800082e:	e7fb      	b.n	8000828 <DMA_SetConfig+0x34>
 8000830:	40020000 	.word	0x40020000

08000834 <HAL_DMA_Init>:
{
 8000834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000836:	46ce      	mov	lr, r9
 8000838:	4647      	mov	r7, r8
 800083a:	0004      	movs	r4, r0
 800083c:	b580      	push	{r7, lr}
  if (hdma == NULL)
 800083e:	2800      	cmp	r0, #0
 8000840:	d063      	beq.n	800090a <HAL_DMA_Init+0xd6>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000842:	6805      	ldr	r5, [r0, #0]
 8000844:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <HAL_DMA_Init+0xdc>)
 8000846:	2114      	movs	r1, #20
 8000848:	18e8      	adds	r0, r5, r3
 800084a:	f7ff fc5d 	bl	8000108 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800084e:	0083      	lsls	r3, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000850:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000852:	2202      	movs	r2, #2
 8000854:	2325      	movs	r3, #37	@ 0x25
 8000856:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	4a2e      	ldr	r2, [pc, #184]	@ (8000914 <HAL_DMA_Init+0xe0>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800085c:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800085e:	4013      	ands	r3, r2
 8000860:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000862:	68e3      	ldr	r3, [r4, #12]
 8000864:	6921      	ldr	r1, [r4, #16]
 8000866:	4333      	orrs	r3, r6
 8000868:	430b      	orrs	r3, r1
 800086a:	6961      	ldr	r1, [r4, #20]
 800086c:	682a      	ldr	r2, [r5, #0]
 800086e:	430b      	orrs	r3, r1
 8000870:	69a1      	ldr	r1, [r4, #24]
 8000872:	430b      	orrs	r3, r1
 8000874:	69e1      	ldr	r1, [r4, #28]
 8000876:	430b      	orrs	r3, r1
 8000878:	6a21      	ldr	r1, [r4, #32]
 800087a:	430b      	orrs	r3, r1
 800087c:	4313      	orrs	r3, r2
 800087e:	602b      	str	r3, [r5, #0]
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000880:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000882:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000884:	469c      	mov	ip, r3
                                                             ((hdma->ChannelIndex >> 2U) * \
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000886:	4b25      	ldr	r3, [pc, #148]	@ (800091c <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000888:	4460      	add	r0, ip
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800088a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800088c:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800088e:	23ff      	movs	r3, #255	@ 0xff
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000890:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000892:	0018      	movs	r0, r3
 8000894:	4028      	ands	r0, r5
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000896:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000898:	3808      	subs	r0, #8
 800089a:	4699      	mov	r9, r3
 800089c:	f7ff fc34 	bl	8000108 <__udivsi3>
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80008a0:	231c      	movs	r3, #28
 80008a2:	2201      	movs	r2, #1
 80008a4:	4003      	ands	r3, r0
 80008a6:	0010      	movs	r0, r2
 80008a8:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80008aa:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80008ac:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80008ae:	01db      	lsls	r3, r3, #7
 80008b0:	429e      	cmp	r6, r3
 80008b2:	d020      	beq.n	80008f6 <HAL_DMA_Init+0xc2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008b4:	464b      	mov	r3, r9
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008b6:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008b8:	6861      	ldr	r1, [r4, #4]
 80008ba:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80008bc:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008be:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008c0:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80008c2:	2903      	cmp	r1, #3
 80008c4:	d81c      	bhi.n	8000900 <HAL_DMA_Init+0xcc>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80008c6:	4916      	ldr	r1, [pc, #88]	@ (8000920 <HAL_DMA_Init+0xec>)
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80008c8:	4816      	ldr	r0, [pc, #88]	@ (8000924 <HAL_DMA_Init+0xf0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80008ca:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80008cc:	3b01      	subs	r3, #1
 80008ce:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80008d0:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80008d2:	0089      	lsls	r1, r1, #2
 80008d4:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80008d6:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80008d8:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80008da:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008dc:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008de:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80008e0:	2225      	movs	r2, #37	@ 0x25
 80008e2:	2101      	movs	r1, #1
  return HAL_OK;
 80008e4:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008e6:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80008e8:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80008ea:	3a01      	subs	r2, #1
 80008ec:	54a3      	strb	r3, [r4, r2]
}
 80008ee:	bcc0      	pop	{r6, r7}
 80008f0:	46b9      	mov	r9, r7
 80008f2:	46b0      	mov	r8, r6
 80008f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80008f6:	2300      	movs	r3, #0
 80008f8:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008fa:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008fc:	4643      	mov	r3, r8
 80008fe:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8000900:	2300      	movs	r3, #0
 8000902:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000904:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000906:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000908:	e7e9      	b.n	80008de <HAL_DMA_Init+0xaa>
    return HAL_ERROR;
 800090a:	2001      	movs	r0, #1
 800090c:	e7ef      	b.n	80008ee <HAL_DMA_Init+0xba>
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	bffdfff8 	.word	0xbffdfff8
 8000914:	ffff800f 	.word	0xffff800f
 8000918:	10008200 	.word	0x10008200
 800091c:	40020880 	.word	0x40020880
 8000920:	1000823f 	.word	0x1000823f
 8000924:	40020940 	.word	0x40020940

08000928 <HAL_DMA_Start_IT>:
{
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800092c:	2024      	movs	r0, #36	@ 0x24
 800092e:	5c25      	ldrb	r5, [r4, r0]
 8000930:	2d01      	cmp	r5, #1
 8000932:	d033      	beq.n	800099c <HAL_DMA_Start_IT+0x74>
 8000934:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8000936:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 8000938:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 800093a:	5da5      	ldrb	r5, [r4, r6]
    status = HAL_BUSY;
 800093c:	3822      	subs	r0, #34	@ 0x22
  if (HAL_DMA_STATE_READY == hdma->State)
 800093e:	b2ef      	uxtb	r7, r5
 8000940:	2d01      	cmp	r5, #1
 8000942:	d003      	beq.n	800094c <HAL_DMA_Start_IT+0x24>
  __HAL_UNLOCK(hdma);
 8000944:	2324      	movs	r3, #36	@ 0x24
 8000946:	2200      	movs	r2, #0
 8000948:	54e2      	strb	r2, [r4, r3]
}
 800094a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800094c:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800094e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000950:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000952:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000954:	6828      	ldr	r0, [r5, #0]
 8000956:	43b8      	bics	r0, r7
 8000958:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800095a:	0020      	movs	r0, r4
 800095c:	f7ff ff4a 	bl	80007f4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8000960:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000962:	2b00      	cmp	r3, #0
 8000964:	d01c      	beq.n	80009a0 <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000966:	220e      	movs	r2, #14
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	4313      	orrs	r3, r2
 800096c:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800096e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000970:	6813      	ldr	r3, [r2, #0]
 8000972:	03db      	lsls	r3, r3, #15
 8000974:	d504      	bpl.n	8000980 <HAL_DMA_Start_IT+0x58>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000976:	2380      	movs	r3, #128	@ 0x80
 8000978:	6811      	ldr	r1, [r2, #0]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	430b      	orrs	r3, r1
 800097e:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8000980:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <HAL_DMA_Start_IT+0x68>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000986:	2280      	movs	r2, #128	@ 0x80
 8000988:	6819      	ldr	r1, [r3, #0]
 800098a:	0052      	lsls	r2, r2, #1
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8000990:	2201      	movs	r2, #1
 8000992:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000994:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000996:	4313      	orrs	r3, r2
 8000998:	602b      	str	r3, [r5, #0]
 800099a:	e7d3      	b.n	8000944 <HAL_DMA_Start_IT+0x1c>
  __HAL_LOCK(hdma);
 800099c:	2002      	movs	r0, #2
 800099e:	e7d4      	b.n	800094a <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009a0:	2204      	movs	r2, #4
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	4393      	bics	r3, r2
 80009a6:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	3206      	adds	r2, #6
 80009ac:	4313      	orrs	r3, r2
 80009ae:	602b      	str	r3, [r5, #0]
 80009b0:	e7dd      	b.n	800096e <HAL_DMA_Start_IT+0x46>
 80009b2:	46c0      	nop			@ (mov r8, r8)

080009b4 <HAL_DMA_PollForTransfer>:
{
 80009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b6:	4657      	mov	r7, sl
 80009b8:	464e      	mov	r6, r9
 80009ba:	4645      	mov	r5, r8
 80009bc:	46de      	mov	lr, fp
  __HAL_UNLOCK(hdma);
 80009be:	2324      	movs	r3, #36	@ 0x24
{
 80009c0:	b5e0      	push	{r5, r6, r7, lr}
 80009c2:	0017      	movs	r7, r2
  __HAL_UNLOCK(hdma);
 80009c4:	2200      	movs	r2, #0
 80009c6:	54c2      	strb	r2, [r0, r3]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80009c8:	3301      	adds	r3, #1
 80009ca:	5cc3      	ldrb	r3, [r0, r3]
{
 80009cc:	0006      	movs	r6, r0
 80009ce:	4688      	mov	r8, r1
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80009d0:	b2dc      	uxtb	r4, r3
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d008      	beq.n	80009e8 <HAL_DMA_PollForTransfer+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d6:	2304      	movs	r3, #4
 80009d8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80009da:	2001      	movs	r0, #1
}
 80009dc:	bcf0      	pop	{r4, r5, r6, r7}
 80009de:	46bb      	mov	fp, r7
 80009e0:	46b2      	mov	sl, r6
 80009e2:	46a9      	mov	r9, r5
 80009e4:	46a0      	mov	r8, r4
 80009e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 80009e8:	6803      	ldr	r3, [r0, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	069b      	lsls	r3, r3, #26
 80009ee:	d44c      	bmi.n	8000a8a <HAL_DMA_PollForTransfer+0xd6>
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU);
 80009f0:	221c      	movs	r2, #28
 80009f2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80009f4:	4013      	ands	r3, r2
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d14b      	bne.n	8000a92 <HAL_DMA_PollForTransfer+0xde>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex  & 0x1cU);
 80009fa:	409c      	lsls	r4, r3
  tickstart = HAL_GetTick();
 80009fc:	f7ff fea4 	bl	8000748 <HAL_GetTick>
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000a00:	231c      	movs	r3, #28
 8000a02:	469b      	mov	fp, r3
 8000a04:	3b14      	subs	r3, #20
  tickstart = HAL_GetTick();
 8000a06:	4681      	mov	r9, r0
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000a08:	469a      	mov	sl, r3
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000a0a:	4d34      	ldr	r5, [pc, #208]	@ (8000adc <HAL_DMA_PollForTransfer+0x128>)
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000a0c:	465b      	mov	r3, fp
 8000a0e:	4652      	mov	r2, sl
 8000a10:	6c30      	ldr	r0, [r6, #64]	@ 0x40
 8000a12:	4018      	ands	r0, r3
 8000a14:	4082      	lsls	r2, r0
 8000a16:	e004      	b.n	8000a22 <HAL_DMA_PollForTransfer+0x6e>
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	421a      	tst	r2, r3
 8000a1c:	d13b      	bne.n	8000a96 <HAL_DMA_PollForTransfer+0xe2>
    if (Timeout != HAL_MAX_DELAY)
 8000a1e:	1c7b      	adds	r3, r7, #1
 8000a20:	d145      	bne.n	8000aae <HAL_DMA_PollForTransfer+0xfa>
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000a22:	0021      	movs	r1, r4
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	4019      	ands	r1, r3
 8000a28:	421c      	tst	r4, r3
 8000a2a:	d0f5      	beq.n	8000a18 <HAL_DMA_PollForTransfer+0x64>
  if (hdma->DMAmuxRequestGen != 0U)
 8000a2c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00f      	beq.n	8000a52 <HAL_DMA_PollForTransfer+0x9e>
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8000a32:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8000a34:	6db1      	ldr	r1, [r6, #88]	@ 0x58
 8000a36:	6814      	ldr	r4, [r2, #0]
 8000a38:	4221      	tst	r1, r4
 8000a3a:	d00a      	beq.n	8000a52 <HAL_DMA_PollForTransfer+0x9e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000a3c:	2480      	movs	r4, #128	@ 0x80
 8000a3e:	681d      	ldr	r5, [r3, #0]
 8000a40:	0064      	lsls	r4, r4, #1
 8000a42:	432c      	orrs	r4, r5
 8000a44:	601c      	str	r4, [r3, #0]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8000a46:	2380      	movs	r3, #128	@ 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a48:	6051      	str	r1, [r2, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8000a4a:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	63f3      	str	r3, [r6, #60]	@ 0x3c
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8000a52:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8000a54:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
 8000a56:	6819      	ldr	r1, [r3, #0]
 8000a58:	420a      	tst	r2, r1
 8000a5a:	d005      	beq.n	8000a68 <HAL_DMA_PollForTransfer+0xb4>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a5c:	605a      	str	r2, [r3, #4]
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4313      	orrs	r3, r2
 8000a66:	63f3      	str	r3, [r6, #60]	@ 0x3c
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000a68:	4643      	mov	r3, r8
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <HAL_DMA_PollForTransfer+0x128>)
 8000a6c:	6851      	ldr	r1, [r2, #4]
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d12e      	bne.n	8000ad0 <HAL_DMA_PollForTransfer+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000a72:	3302      	adds	r3, #2
 8000a74:	4083      	lsls	r3, r0
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000a7a:	2325      	movs	r3, #37	@ 0x25
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	54f2      	strb	r2, [r6, r3]
  __HAL_UNLOCK(hdma);
 8000a80:	2324      	movs	r3, #36	@ 0x24
 8000a82:	2200      	movs	r2, #0
  return HAL_OK;
 8000a84:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 8000a86:	54f2      	strb	r2, [r6, r3]
  return HAL_OK;
 8000a88:	e7a8      	b.n	80009dc <HAL_DMA_PollForTransfer+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000a8a:	2380      	movs	r3, #128	@ 0x80
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8000a90:	e7a3      	b.n	80009da <HAL_DMA_PollForTransfer+0x26>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex  & 0x1cU);
 8000a92:	2404      	movs	r4, #4
 8000a94:	e7b1      	b.n	80009fa <HAL_DMA_PollForTransfer+0x46>
      __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000a96:	2301      	movs	r3, #1
 8000a98:	001a      	movs	r2, r3
 8000a9a:	4082      	lsls	r2, r0
 8000a9c:	686c      	ldr	r4, [r5, #4]
 8000a9e:	4322      	orrs	r2, r4
 8000aa0:	606a      	str	r2, [r5, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8000aa2:	2225      	movs	r2, #37	@ 0x25
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000aa4:	63f3      	str	r3, [r6, #60]	@ 0x3c
      hdma->State = HAL_DMA_STATE_READY;
 8000aa6:	54b3      	strb	r3, [r6, r2]
      __HAL_UNLOCK(hdma);
 8000aa8:	3323      	adds	r3, #35	@ 0x23
 8000aaa:	54f1      	strb	r1, [r6, r3]
      return HAL_ERROR;
 8000aac:	e795      	b.n	80009da <HAL_DMA_PollForTransfer+0x26>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000aae:	f7ff fe4b 	bl	8000748 <HAL_GetTick>
 8000ab2:	464b      	mov	r3, r9
 8000ab4:	1ac0      	subs	r0, r0, r3
 8000ab6:	42b8      	cmp	r0, r7
 8000ab8:	d801      	bhi.n	8000abe <HAL_DMA_PollForTransfer+0x10a>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d1a6      	bne.n	8000a0c <HAL_DMA_PollForTransfer+0x58>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000abe:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_READY;
 8000ac0:	2201      	movs	r2, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ac2:	63f3      	str	r3, [r6, #60]	@ 0x3c
        hdma->State = HAL_DMA_STATE_READY;
 8000ac4:	3305      	adds	r3, #5
 8000ac6:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hdma);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	3b01      	subs	r3, #1
 8000acc:	54f2      	strb	r2, [r6, r3]
        return HAL_ERROR;
 8000ace:	e784      	b.n	80009da <HAL_DMA_PollForTransfer+0x26>
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	4083      	lsls	r3, r0
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6053      	str	r3, [r2, #4]
 8000ad8:	e7d2      	b.n	8000a80 <HAL_DMA_PollForTransfer+0xcc>
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	40020000 	.word	0x40020000

08000ae0 <HAL_DMA_IRQHandler>:
{
 8000ae0:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000ae2:	211c      	movs	r1, #28
 8000ae4:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8000ae8:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8000aea:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000aec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000aee:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000af0:	400b      	ands	r3, r1
 8000af2:	0021      	movs	r1, r4
 8000af4:	4099      	lsls	r1, r3
 8000af6:	420a      	tst	r2, r1
 8000af8:	d010      	beq.n	8000b1c <HAL_DMA_IRQHandler+0x3c>
 8000afa:	422c      	tst	r4, r5
 8000afc:	d00e      	beq.n	8000b1c <HAL_DMA_IRQHandler+0x3c>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000afe:	6833      	ldr	r3, [r6, #0]
 8000b00:	069b      	lsls	r3, r3, #26
 8000b02:	d402      	bmi.n	8000b0a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b04:	6833      	ldr	r3, [r6, #0]
 8000b06:	43a3      	bics	r3, r4
 8000b08:	6033      	str	r3, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000b0a:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <HAL_DMA_IRQHandler+0xb4>)
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	4311      	orrs	r1, r2
 8000b10:	6059      	str	r1, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8000b12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d000      	beq.n	8000b1a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000b18:	4798      	blx	r3
}
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000b1c:	2402      	movs	r4, #2
 8000b1e:	0021      	movs	r1, r4
 8000b20:	4099      	lsls	r1, r3
 8000b22:	420a      	tst	r2, r1
 8000b24:	d017      	beq.n	8000b56 <HAL_DMA_IRQHandler+0x76>
 8000b26:	422c      	tst	r4, r5
 8000b28:	d015      	beq.n	8000b56 <HAL_DMA_IRQHandler+0x76>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b2a:	6833      	ldr	r3, [r6, #0]
 8000b2c:	069b      	lsls	r3, r3, #26
 8000b2e:	d406      	bmi.n	8000b3e <HAL_DMA_IRQHandler+0x5e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000b30:	220a      	movs	r2, #10
 8000b32:	6833      	ldr	r3, [r6, #0]
 8000b34:	4393      	bics	r3, r2
 8000b36:	6033      	str	r3, [r6, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000b38:	2325      	movs	r3, #37	@ 0x25
 8000b3a:	3a09      	subs	r2, #9
 8000b3c:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <HAL_DMA_IRQHandler+0xb4>)
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	4311      	orrs	r1, r2
 8000b44:	6059      	str	r1, [r3, #4]
    __HAL_UNLOCK(hdma);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2324      	movs	r3, #36	@ 0x24
 8000b4a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8000b4c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0e3      	beq.n	8000b1a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000b52:	4798      	blx	r3
  return;
 8000b54:	e7e1      	b.n	8000b1a <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000b56:	2108      	movs	r1, #8
 8000b58:	000c      	movs	r4, r1
 8000b5a:	409c      	lsls	r4, r3
 8000b5c:	4222      	tst	r2, r4
 8000b5e:	d0dc      	beq.n	8000b1a <HAL_DMA_IRQHandler+0x3a>
 8000b60:	4229      	tst	r1, r5
 8000b62:	d0da      	beq.n	8000b1a <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b64:	6832      	ldr	r2, [r6, #0]
 8000b66:	3106      	adds	r1, #6
 8000b68:	438a      	bics	r2, r1
 8000b6a:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	0015      	movs	r5, r2
 8000b70:	409d      	lsls	r5, r3
 8000b72:	002b      	movs	r3, r5
 8000b74:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <HAL_DMA_IRQHandler+0xb4>)
 8000b76:	684c      	ldr	r4, [r1, #4]
 8000b78:	4323      	orrs	r3, r4
 8000b7a:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000b7c:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b7e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000b80:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000b82:	2200      	movs	r2, #0
 8000b84:	3b01      	subs	r3, #1
 8000b86:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8000b88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0c5      	beq.n	8000b1a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000b8e:	4798      	blx	r3
  return;
 8000b90:	e7c3      	b.n	8000b1a <HAL_DMA_IRQHandler+0x3a>
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	4645      	mov	r5, r8
 8000b9c:	46de      	mov	lr, fp
 8000b9e:	4657      	mov	r7, sl
 8000ba0:	464e      	mov	r6, r9
 8000ba2:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ba4:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0U;
 8000ba6:	2300      	movs	r3, #0
{
 8000ba8:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d07d      	beq.n	8000caa <HAL_GPIO_Init+0x112>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000bae:	4688      	mov	r8, r1
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000bb0:	2401      	movs	r4, #1
 8000bb2:	002a      	movs	r2, r5
 8000bb4:	409c      	lsls	r4, r3
 8000bb6:	4022      	ands	r2, r4
 8000bb8:	4694      	mov	ip, r2
    if (iocurrent != 0U)
 8000bba:	4225      	tst	r5, r4
 8000bbc:	d071      	beq.n	8000ca2 <HAL_GPIO_Init+0x10a>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bbe:	4642      	mov	r2, r8
 8000bc0:	6852      	ldr	r2, [r2, #4]
 8000bc2:	2610      	movs	r6, #16
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	43b1      	bics	r1, r6
 8000bc8:	4689      	mov	r9, r1
 8000bca:	2902      	cmp	r1, #2
 8000bcc:	d100      	bne.n	8000bd0 <HAL_GPIO_Init+0x38>
 8000bce:	e073      	b.n	8000cb8 <HAL_GPIO_Init+0x120>
      tmp = GPIOx->MODER;
 8000bd0:	6801      	ldr	r1, [r0, #0]
 8000bd2:	005e      	lsls	r6, r3, #1
 8000bd4:	468b      	mov	fp, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	40b1      	lsls	r1, r6
 8000bda:	468a      	mov	sl, r1
 8000bdc:	43c9      	mvns	r1, r1
 8000bde:	465f      	mov	r7, fp
 8000be0:	9101      	str	r1, [sp, #4]
 8000be2:	4651      	mov	r1, sl
 8000be4:	438f      	bics	r7, r1
 8000be6:	46bb      	mov	fp, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be8:	2703      	movs	r7, #3
 8000bea:	4017      	ands	r7, r2
 8000bec:	40b7      	lsls	r7, r6
 8000bee:	46ba      	mov	sl, r7
 8000bf0:	465f      	mov	r7, fp
 8000bf2:	4651      	mov	r1, sl
 8000bf4:	430f      	orrs	r7, r1
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4249      	negs	r1, r1
 8000bfa:	468a      	mov	sl, r1
 8000bfc:	44d1      	add	r9, sl
 8000bfe:	4649      	mov	r1, r9
      GPIOx->MODER = tmp;
 8000c00:	6007      	str	r7, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c02:	2901      	cmp	r1, #1
 8000c04:	d800      	bhi.n	8000c08 <HAL_GPIO_Init+0x70>
 8000c06:	e083      	b.n	8000d10 <HAL_GPIO_Init+0x178>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000c08:	2a03      	cmp	r2, #3
 8000c0a:	d04a      	beq.n	8000ca2 <HAL_GPIO_Init+0x10a>
        tmp = GPIOx->PUPDR;
 8000c0c:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c0e:	9901      	ldr	r1, [sp, #4]
 8000c10:	400c      	ands	r4, r1
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000c12:	4641      	mov	r1, r8
 8000c14:	6889      	ldr	r1, [r1, #8]
 8000c16:	40b1      	lsls	r1, r6
 8000c18:	4321      	orrs	r1, r4
        GPIOx->PUPDR = tmp;
 8000c1a:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1c:	2180      	movs	r1, #128	@ 0x80
 8000c1e:	0549      	lsls	r1, r1, #21
 8000c20:	420a      	tst	r2, r1
 8000c22:	d03e      	beq.n	8000ca2 <HAL_GPIO_Init+0x10a>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000c24:	2603      	movs	r6, #3
 8000c26:	270f      	movs	r7, #15
 8000c28:	4c58      	ldr	r4, [pc, #352]	@ (8000d8c <HAL_GPIO_Init+0x1f4>)
 8000c2a:	401e      	ands	r6, r3
 8000c2c:	46a1      	mov	r9, r4
 8000c2e:	00f6      	lsls	r6, r6, #3
 8000c30:	40b7      	lsls	r7, r6
        tmp = EXTI->EXTICR[position >> 2U];
 8000c32:	0899      	lsrs	r1, r3, #2
 8000c34:	0089      	lsls	r1, r1, #2
 8000c36:	4449      	add	r1, r9
 8000c38:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000c3a:	43bc      	bics	r4, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000c3c:	27a0      	movs	r7, #160	@ 0xa0
 8000c3e:	05ff      	lsls	r7, r7, #23
 8000c40:	42b8      	cmp	r0, r7
 8000c42:	d00e      	beq.n	8000c62 <HAL_GPIO_Init+0xca>
 8000c44:	4f52      	ldr	r7, [pc, #328]	@ (8000d90 <HAL_GPIO_Init+0x1f8>)
 8000c46:	42b8      	cmp	r0, r7
 8000c48:	d100      	bne.n	8000c4c <HAL_GPIO_Init+0xb4>
 8000c4a:	e097      	b.n	8000d7c <HAL_GPIO_Init+0x1e4>
 8000c4c:	4f51      	ldr	r7, [pc, #324]	@ (8000d94 <HAL_GPIO_Init+0x1fc>)
 8000c4e:	42b8      	cmp	r0, r7
 8000c50:	d100      	bne.n	8000c54 <HAL_GPIO_Init+0xbc>
 8000c52:	e097      	b.n	8000d84 <HAL_GPIO_Init+0x1ec>
 8000c54:	4f50      	ldr	r7, [pc, #320]	@ (8000d98 <HAL_GPIO_Init+0x200>)
 8000c56:	42b8      	cmp	r0, r7
 8000c58:	d100      	bne.n	8000c5c <HAL_GPIO_Init+0xc4>
 8000c5a:	e08b      	b.n	8000d74 <HAL_GPIO_Init+0x1dc>
 8000c5c:	2706      	movs	r7, #6
 8000c5e:	40b7      	lsls	r7, r6
 8000c60:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8000c62:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp = EXTI->IMR1;
 8000c64:	2180      	movs	r1, #128	@ 0x80
 8000c66:	4c49      	ldr	r4, [pc, #292]	@ (8000d8c <HAL_GPIO_Init+0x1f4>)
 8000c68:	5861      	ldr	r1, [r4, r1]
        tmp &= ~((uint32_t)iocurrent);
 8000c6a:	4664      	mov	r4, ip
 8000c6c:	43e4      	mvns	r4, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c6e:	03d6      	lsls	r6, r2, #15
 8000c70:	d464      	bmi.n	8000d3c <HAL_GPIO_Init+0x1a4>
        {
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
 8000c72:	2680      	movs	r6, #128	@ 0x80
 8000c74:	4f45      	ldr	r7, [pc, #276]	@ (8000d8c <HAL_GPIO_Init+0x1f4>)
        tmp &= ~((uint32_t)iocurrent);
 8000c76:	4021      	ands	r1, r4
        EXTI->IMR1 = tmp;
 8000c78:	51b9      	str	r1, [r7, r6]

        tmp = EXTI->EMR1;
 8000c7a:	2184      	movs	r1, #132	@ 0x84
 8000c7c:	5879      	ldr	r1, [r7, r1]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c7e:	0396      	lsls	r6, r2, #14
 8000c80:	d465      	bmi.n	8000d4e <HAL_GPIO_Init+0x1b6>
        {
          tmp |= iocurrent;
        }
        EXTI->EMR1 = tmp;
 8000c82:	2684      	movs	r6, #132	@ 0x84
 8000c84:	4f41      	ldr	r7, [pc, #260]	@ (8000d8c <HAL_GPIO_Init+0x1f4>)
        tmp &= ~((uint32_t)iocurrent);
 8000c86:	4021      	ands	r1, r4
        EXTI->EMR1 = tmp;
 8000c88:	51b9      	str	r1, [r7, r6]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000c8a:	6839      	ldr	r1, [r7, #0]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c8c:	02d6      	lsls	r6, r2, #11
 8000c8e:	d466      	bmi.n	8000d5e <HAL_GPIO_Init+0x1c6>
        {
          tmp |= iocurrent;
        }
        EXTI->RTSR1 = tmp;
 8000c90:	4e3e      	ldr	r6, [pc, #248]	@ (8000d8c <HAL_GPIO_Init+0x1f4>)
        tmp &= ~((uint32_t)iocurrent);
 8000c92:	4021      	ands	r1, r4
        EXTI->RTSR1 = tmp;
 8000c94:	6031      	str	r1, [r6, #0]

        tmp = EXTI->FTSR1;
 8000c96:	6871      	ldr	r1, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c98:	0292      	lsls	r2, r2, #10
 8000c9a:	d467      	bmi.n	8000d6c <HAL_GPIO_Init+0x1d4>
        tmp &= ~((uint32_t)iocurrent);
 8000c9c:	4021      	ands	r1, r4
        {
          tmp |= iocurrent;
        }
        EXTI->FTSR1 = tmp;
 8000c9e:	4a3b      	ldr	r2, [pc, #236]	@ (8000d8c <HAL_GPIO_Init+0x1f4>)
 8000ca0:	6051      	str	r1, [r2, #4]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ca2:	002a      	movs	r2, r5
      }
    }

    position++;
 8000ca4:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ca6:	40da      	lsrs	r2, r3
 8000ca8:	d182      	bne.n	8000bb0 <HAL_GPIO_Init+0x18>
  }
}
 8000caa:	b003      	add	sp, #12
 8000cac:	bcf0      	pop	{r4, r5, r6, r7}
 8000cae:	46bb      	mov	fp, r7
 8000cb0:	46b2      	mov	sl, r6
 8000cb2:	46a9      	mov	r9, r5
 8000cb4:	46a0      	mov	r8, r4
 8000cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp = GPIOx->AFR[position >> 3U];
 8000cb8:	08de      	lsrs	r6, r3, #3
 8000cba:	00b6      	lsls	r6, r6, #2
 8000cbc:	1986      	adds	r6, r0, r6
 8000cbe:	6a31      	ldr	r1, [r6, #32]
 8000cc0:	4689      	mov	r9, r1
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000cc2:	2107      	movs	r1, #7
 8000cc4:	4019      	ands	r1, r3
 8000cc6:	0089      	lsls	r1, r1, #2
 8000cc8:	468a      	mov	sl, r1
 8000cca:	210f      	movs	r1, #15
 8000ccc:	4657      	mov	r7, sl
 8000cce:	40b9      	lsls	r1, r7
 8000cd0:	464f      	mov	r7, r9
 8000cd2:	438f      	bics	r7, r1
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000cd4:	4641      	mov	r1, r8
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000cd6:	46b9      	mov	r9, r7
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000cd8:	270f      	movs	r7, #15
 8000cda:	6909      	ldr	r1, [r1, #16]
 8000cdc:	4039      	ands	r1, r7
 8000cde:	4657      	mov	r7, sl
 8000ce0:	40b9      	lsls	r1, r7
 8000ce2:	464f      	mov	r7, r9
 8000ce4:	4339      	orrs	r1, r7
        GPIOx->AFR[position >> 3U] = tmp;
 8000ce6:	6231      	str	r1, [r6, #32]
      tmp = GPIOx->MODER;
 8000ce8:	6801      	ldr	r1, [r0, #0]
 8000cea:	005e      	lsls	r6, r3, #1
 8000cec:	468a      	mov	sl, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cee:	2103      	movs	r1, #3
 8000cf0:	40b1      	lsls	r1, r6
 8000cf2:	4689      	mov	r9, r1
 8000cf4:	43c9      	mvns	r1, r1
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	9101      	str	r1, [sp, #4]
 8000cfa:	4649      	mov	r1, r9
 8000cfc:	438f      	bics	r7, r1
 8000cfe:	46ba      	mov	sl, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d00:	2703      	movs	r7, #3
 8000d02:	4017      	ands	r7, r2
 8000d04:	40b7      	lsls	r7, r6
 8000d06:	46b9      	mov	r9, r7
 8000d08:	4657      	mov	r7, sl
 8000d0a:	4649      	mov	r1, r9
 8000d0c:	430f      	orrs	r7, r1
      GPIOx->MODER = tmp;
 8000d0e:	6007      	str	r7, [r0, #0]
        tmp = GPIOx->OSPEEDR;
 8000d10:	6887      	ldr	r7, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d12:	9901      	ldr	r1, [sp, #4]
 8000d14:	400f      	ands	r7, r1
 8000d16:	46ba      	mov	sl, r7
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000d18:	4647      	mov	r7, r8
 8000d1a:	68ff      	ldr	r7, [r7, #12]
 8000d1c:	40b7      	lsls	r7, r6
 8000d1e:	46b9      	mov	r9, r7
 8000d20:	4657      	mov	r7, sl
 8000d22:	4649      	mov	r1, r9
 8000d24:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = tmp;
 8000d26:	6087      	str	r7, [r0, #8]
        tmp = GPIOx->OTYPER;
 8000d28:	6841      	ldr	r1, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d2a:	000f      	movs	r7, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d2c:	2101      	movs	r1, #1
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d2e:	43a7      	bics	r7, r4
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d30:	0914      	lsrs	r4, r2, #4
 8000d32:	400c      	ands	r4, r1
 8000d34:	409c      	lsls	r4, r3
 8000d36:	433c      	orrs	r4, r7
        GPIOx->OTYPER = tmp;
 8000d38:	6044      	str	r4, [r0, #4]
 8000d3a:	e765      	b.n	8000c08 <HAL_GPIO_Init+0x70>
          tmp |= iocurrent;
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	4331      	orrs	r1, r6
        EXTI->IMR1 = tmp;
 8000d40:	2680      	movs	r6, #128	@ 0x80
 8000d42:	4f12      	ldr	r7, [pc, #72]	@ (8000d8c <HAL_GPIO_Init+0x1f4>)
 8000d44:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->EMR1;
 8000d46:	2184      	movs	r1, #132	@ 0x84
 8000d48:	5879      	ldr	r1, [r7, r1]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d4a:	0396      	lsls	r6, r2, #14
 8000d4c:	d599      	bpl.n	8000c82 <HAL_GPIO_Init+0xea>
          tmp |= iocurrent;
 8000d4e:	4666      	mov	r6, ip
 8000d50:	4331      	orrs	r1, r6
        EXTI->EMR1 = tmp;
 8000d52:	2684      	movs	r6, #132	@ 0x84
 8000d54:	4f0d      	ldr	r7, [pc, #52]	@ (8000d8c <HAL_GPIO_Init+0x1f4>)
 8000d56:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->RTSR1;
 8000d58:	6839      	ldr	r1, [r7, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5a:	02d6      	lsls	r6, r2, #11
 8000d5c:	d598      	bpl.n	8000c90 <HAL_GPIO_Init+0xf8>
          tmp |= iocurrent;
 8000d5e:	4666      	mov	r6, ip
 8000d60:	4331      	orrs	r1, r6
        EXTI->RTSR1 = tmp;
 8000d62:	4e0a      	ldr	r6, [pc, #40]	@ (8000d8c <HAL_GPIO_Init+0x1f4>)
 8000d64:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 8000d66:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d68:	0292      	lsls	r2, r2, #10
 8000d6a:	d597      	bpl.n	8000c9c <HAL_GPIO_Init+0x104>
          tmp |= iocurrent;
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	0011      	movs	r1, r2
 8000d72:	e794      	b.n	8000c9e <HAL_GPIO_Init+0x106>
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d74:	2705      	movs	r7, #5
 8000d76:	40b7      	lsls	r7, r6
 8000d78:	433c      	orrs	r4, r7
 8000d7a:	e772      	b.n	8000c62 <HAL_GPIO_Init+0xca>
 8000d7c:	2701      	movs	r7, #1
 8000d7e:	40b7      	lsls	r7, r6
 8000d80:	433c      	orrs	r4, r7
 8000d82:	e76e      	b.n	8000c62 <HAL_GPIO_Init+0xca>
 8000d84:	2702      	movs	r7, #2
 8000d86:	40b7      	lsls	r7, r6
 8000d88:	433c      	orrs	r4, r7
 8000d8a:	e76a      	b.n	8000c62 <HAL_GPIO_Init+0xca>
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	50000400 	.word	0x50000400
 8000d94:	50000800 	.word	0x50000800
 8000d98:	50001400 	.word	0x50001400

08000d9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000da6:	e7fc      	b.n	8000da2 <HAL_GPIO_WritePin+0x6>

08000da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dac:	d100      	bne.n	8000db0 <HAL_RCC_OscConfig+0x8>
 8000dae:	e0aa      	b.n	8000f06 <HAL_RCC_OscConfig+0x15e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db0:	6803      	ldr	r3, [r0, #0]
 8000db2:	07da      	lsls	r2, r3, #31
 8000db4:	d52c      	bpl.n	8000e10 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000db6:	2238      	movs	r2, #56	@ 0x38
 8000db8:	4d95      	ldr	r5, [pc, #596]	@ (8001010 <HAL_RCC_OscConfig+0x268>)

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000dba:	6861      	ldr	r1, [r4, #4]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dbc:	68a8      	ldr	r0, [r5, #8]
 8000dbe:	4002      	ands	r2, r0
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000dc0:	2a08      	cmp	r2, #8
 8000dc2:	d100      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x1e>
 8000dc4:	e09d      	b.n	8000f02 <HAL_RCC_OscConfig+0x15a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc6:	2380      	movs	r3, #128	@ 0x80
 8000dc8:	025b      	lsls	r3, r3, #9
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x28>
 8000dce:	e0ba      	b.n	8000f46 <HAL_RCC_OscConfig+0x19e>
 8000dd0:	22a0      	movs	r2, #160	@ 0xa0
 8000dd2:	02d2      	lsls	r2, r2, #11
 8000dd4:	4291      	cmp	r1, r2
 8000dd6:	d100      	bne.n	8000dda <HAL_RCC_OscConfig+0x32>
 8000dd8:	e106      	b.n	8000fe8 <HAL_RCC_OscConfig+0x240>
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	4a8d      	ldr	r2, [pc, #564]	@ (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	602b      	str	r3, [r5, #0]
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	4a8c      	ldr	r2, [pc, #560]	@ (8001018 <HAL_RCC_OscConfig+0x270>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	602b      	str	r3, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dea:	2900      	cmp	r1, #0
 8000dec:	d000      	beq.n	8000df0 <HAL_RCC_OscConfig+0x48>
 8000dee:	e0ad      	b.n	8000f4c <HAL_RCC_OscConfig+0x1a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df0:	f7ff fcaa 	bl	8000748 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000df4:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000df6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000df8:	02bf      	lsls	r7, r7, #10
 8000dfa:	e005      	b.n	8000e08 <HAL_RCC_OscConfig+0x60>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fca4 	bl	8000748 <HAL_GetTick>
 8000e00:	1b80      	subs	r0, r0, r6
 8000e02:	2864      	cmp	r0, #100	@ 0x64
 8000e04:	d900      	bls.n	8000e08 <HAL_RCC_OscConfig+0x60>
 8000e06:	e0c9      	b.n	8000f9c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e08:	682b      	ldr	r3, [r5, #0]
 8000e0a:	423b      	tst	r3, r7
 8000e0c:	d1f6      	bne.n	8000dfc <HAL_RCC_OscConfig+0x54>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	079a      	lsls	r2, r3, #30
 8000e12:	d44b      	bmi.n	8000eac <HAL_RCC_OscConfig+0x104>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e14:	071a      	lsls	r2, r3, #28
 8000e16:	d51d      	bpl.n	8000e54 <HAL_RCC_OscConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000e18:	2238      	movs	r2, #56	@ 0x38
 8000e1a:	4d7d      	ldr	r5, [pc, #500]	@ (8001010 <HAL_RCC_OscConfig+0x268>)
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000e1c:	69a1      	ldr	r1, [r4, #24]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000e1e:	68a8      	ldr	r0, [r5, #8]
 8000e20:	4002      	ands	r2, r0
 8000e22:	2a18      	cmp	r2, #24
 8000e24:	d100      	bne.n	8000e28 <HAL_RCC_OscConfig+0x80>
 8000e26:	e0a2      	b.n	8000f6e <HAL_RCC_OscConfig+0x1c6>
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000e28:	2201      	movs	r2, #1
 8000e2a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e2c:	2900      	cmp	r1, #0
 8000e2e:	d100      	bne.n	8000e32 <HAL_RCC_OscConfig+0x8a>
 8000e30:	e0c9      	b.n	8000fc6 <HAL_RCC_OscConfig+0x21e>
        __HAL_RCC_LSI_ENABLE();
 8000e32:	4313      	orrs	r3, r2
 8000e34:	662b      	str	r3, [r5, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e36:	f7ff fc87 	bl	8000748 <HAL_GetTick>

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000e3a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8000e3c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000e3e:	e005      	b.n	8000e4c <HAL_RCC_OscConfig+0xa4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000e40:	f7ff fc82 	bl	8000748 <HAL_GetTick>
 8000e44:	1b80      	subs	r0, r0, r6
 8000e46:	2802      	cmp	r0, #2
 8000e48:	d900      	bls.n	8000e4c <HAL_RCC_OscConfig+0xa4>
 8000e4a:	e0a7      	b.n	8000f9c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000e4c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000e4e:	421f      	tst	r7, r3
 8000e50:	d0f6      	beq.n	8000e40 <HAL_RCC_OscConfig+0x98>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	2204      	movs	r2, #4
 8000e56:	421a      	tst	r2, r3
 8000e58:	d026      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x100>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000e5a:	2338      	movs	r3, #56	@ 0x38
 8000e5c:	4d6c      	ldr	r5, [pc, #432]	@ (8001010 <HAL_RCC_OscConfig+0x268>)
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000e5e:	68a0      	ldr	r0, [r4, #8]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000e60:	68a9      	ldr	r1, [r5, #8]
 8000e62:	400b      	ands	r3, r1
 8000e64:	2b20      	cmp	r3, #32
 8000e66:	d100      	bne.n	8000e6a <HAL_RCC_OscConfig+0xc2>
 8000e68:	e0c7      	b.n	8000ffa <HAL_RCC_OscConfig+0x252>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6a:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8000e6c:	2801      	cmp	r0, #1
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_OscConfig+0xca>
 8000e70:	e081      	b.n	8000f76 <HAL_RCC_OscConfig+0x1ce>
 8000e72:	2805      	cmp	r0, #5
 8000e74:	d100      	bne.n	8000e78 <HAL_RCC_OscConfig+0xd0>
 8000e76:	e0c4      	b.n	8001002 <HAL_RCC_OscConfig+0x25a>
 8000e78:	2101      	movs	r1, #1
 8000e7a:	438b      	bics	r3, r1
 8000e7c:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8000e7e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8000e80:	4393      	bics	r3, r2
 8000e82:	65eb      	str	r3, [r5, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_RCC_OscConfig+0xe2>
 8000e88:	e077      	b.n	8000f7a <HAL_RCC_OscConfig+0x1d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fc5d 	bl	8000748 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000e8e:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8000e90:	0004      	movs	r4, r0
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e92:	4f62      	ldr	r7, [pc, #392]	@ (800101c <HAL_RCC_OscConfig+0x274>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000e94:	e005      	b.n	8000ea2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff fc57 	bl	8000748 <HAL_GetTick>
 8000e9a:	1b00      	subs	r0, r0, r4
 8000e9c:	42b8      	cmp	r0, r7
 8000e9e:	d900      	bls.n	8000ea2 <HAL_RCC_OscConfig+0xfa>
 8000ea0:	e07c      	b.n	8000f9c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000ea2:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8000ea4:	421e      	tst	r6, r3
 8000ea6:	d1f6      	bne.n	8000e96 <HAL_RCC_OscConfig+0xee>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	e02d      	b.n	8000f08 <HAL_RCC_OscConfig+0x160>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eac:	2238      	movs	r2, #56	@ 0x38
 8000eae:	4d58      	ldr	r5, [pc, #352]	@ (8001010 <HAL_RCC_OscConfig+0x268>)
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000eb0:	68e1      	ldr	r1, [r4, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb2:	68ab      	ldr	r3, [r5, #8]
    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000eb4:	421a      	tst	r2, r3
 8000eb6:	d028      	beq.n	8000f0a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000eb8:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	d100      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x118>
 8000ebe:	e06f      	b.n	8000fa0 <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ec0:	4a57      	ldr	r2, [pc, #348]	@ (8001020 <HAL_RCC_OscConfig+0x278>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ec2:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ec8:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8000ece:	2380      	movs	r3, #128	@ 0x80
 8000ed0:	682a      	ldr	r2, [r5, #0]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fc36 	bl	8000748 <HAL_GetTick>
 8000edc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ede:	e004      	b.n	8000eea <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fc32 	bl	8000748 <HAL_GetTick>
 8000ee4:	1b80      	subs	r0, r0, r6
 8000ee6:	2802      	cmp	r0, #2
 8000ee8:	d858      	bhi.n	8000f9c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eea:	682b      	ldr	r3, [r5, #0]
 8000eec:	423b      	tst	r3, r7
 8000eee:	d0f7      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef0:	686a      	ldr	r2, [r5, #4]
 8000ef2:	6963      	ldr	r3, [r4, #20]
 8000ef4:	494b      	ldr	r1, [pc, #300]	@ (8001024 <HAL_RCC_OscConfig+0x27c>)
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	400a      	ands	r2, r1
 8000efa:	4313      	orrs	r3, r2
 8000efc:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	e788      	b.n	8000e14 <HAL_RCC_OscConfig+0x6c>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000f02:	2900      	cmp	r1, #0
 8000f04:	d184      	bne.n	8000e10 <HAL_RCC_OscConfig+0x68>
    return HAL_ERROR;
 8000f06:	2001      	movs	r0, #1
}
 8000f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000f0a:	2900      	cmp	r1, #0
 8000f0c:	d0fb      	beq.n	8000f06 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	686a      	ldr	r2, [r5, #4]
 8000f10:	6963      	ldr	r3, [r4, #20]
 8000f12:	4944      	ldr	r1, [pc, #272]	@ (8001024 <HAL_RCC_OscConfig+0x27c>)
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	400a      	ands	r2, r1
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f1c:	682b      	ldr	r3, [r5, #0]
 8000f1e:	4a40      	ldr	r2, [pc, #256]	@ (8001020 <HAL_RCC_OscConfig+0x278>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000f20:	4941      	ldr	r1, [pc, #260]	@ (8001028 <HAL_RCC_OscConfig+0x280>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f22:	4013      	ands	r3, r2
 8000f24:	6922      	ldr	r2, [r4, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000f2a:	682b      	ldr	r3, [r5, #0]
 8000f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800102c <HAL_RCC_OscConfig+0x284>)
 8000f2e:	049b      	lsls	r3, r3, #18
 8000f30:	0f5b      	lsrs	r3, r3, #29
 8000f32:	40da      	lsrs	r2, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f34:	4b3e      	ldr	r3, [pc, #248]	@ (8001030 <HAL_RCC_OscConfig+0x288>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000f36:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	f7ff fbc7 	bl	80006cc <HAL_InitTick>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d1e1      	bne.n	8000f06 <HAL_RCC_OscConfig+0x15e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	e766      	b.n	8000e14 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fbfc 	bl	8000748 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f50:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000f52:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f54:	4f2e      	ldr	r7, [pc, #184]	@ (8001010 <HAL_RCC_OscConfig+0x268>)
 8000f56:	02b6      	lsls	r6, r6, #10
 8000f58:	e004      	b.n	8000f64 <HAL_RCC_OscConfig+0x1bc>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f5a:	f7ff fbf5 	bl	8000748 <HAL_GetTick>
 8000f5e:	1b40      	subs	r0, r0, r5
 8000f60:	2864      	cmp	r0, #100	@ 0x64
 8000f62:	d81b      	bhi.n	8000f9c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	4233      	tst	r3, r6
 8000f68:	d0f7      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	e750      	b.n	8000e10 <HAL_RCC_OscConfig+0x68>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000f6e:	2900      	cmp	r1, #0
 8000f70:	d000      	beq.n	8000f74 <HAL_RCC_OscConfig+0x1cc>
 8000f72:	e76f      	b.n	8000e54 <HAL_RCC_OscConfig+0xac>
 8000f74:	e7c7      	b.n	8000f06 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f76:	4303      	orrs	r3, r0
 8000f78:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fbe5 	bl	8000748 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f7e:	2502      	movs	r5, #2
        tickstart = HAL_GetTick();
 8000f80:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f82:	4e23      	ldr	r6, [pc, #140]	@ (8001010 <HAL_RCC_OscConfig+0x268>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f84:	4f25      	ldr	r7, [pc, #148]	@ (800101c <HAL_RCC_OscConfig+0x274>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f86:	e004      	b.n	8000f92 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f88:	f7ff fbde 	bl	8000748 <HAL_GetTick>
 8000f8c:	1b00      	subs	r0, r0, r4
 8000f8e:	42b8      	cmp	r0, r7
 8000f90:	d804      	bhi.n	8000f9c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f92:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8000f94:	421d      	tst	r5, r3
 8000f96:	d0f7      	beq.n	8000f88 <HAL_RCC_OscConfig+0x1e0>
  return HAL_OK;
 8000f98:	2000      	movs	r0, #0
 8000f9a:	e7b5      	b.n	8000f08 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	e7b3      	b.n	8000f08 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 8000fa0:	4a24      	ldr	r2, [pc, #144]	@ (8001034 <HAL_RCC_OscConfig+0x28c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fa2:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fbce 	bl	8000748 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fac:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8000fae:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fb0:	e004      	b.n	8000fbc <HAL_RCC_OscConfig+0x214>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fbc9 	bl	8000748 <HAL_GetTick>
 8000fb6:	1b80      	subs	r0, r0, r6
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d8ef      	bhi.n	8000f9c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	423b      	tst	r3, r7
 8000fc0:	d1f7      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x20a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	e726      	b.n	8000e14 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_LSI_DISABLE();
 8000fc6:	4393      	bics	r3, r2
 8000fc8:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000fca:	f7ff fbbd 	bl	8000748 <HAL_GetTick>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000fce:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8000fd0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000fd2:	e004      	b.n	8000fde <HAL_RCC_OscConfig+0x236>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fbb8 	bl	8000748 <HAL_GetTick>
 8000fd8:	1b80      	subs	r0, r0, r6
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d8de      	bhi.n	8000f9c <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000fde:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000fe0:	421f      	tst	r7, r3
 8000fe2:	d1f7      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x22c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	e735      	b.n	8000e54 <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	6829      	ldr	r1, [r5, #0]
 8000fec:	02d2      	lsls	r2, r2, #11
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	602a      	str	r2, [r5, #0]
 8000ff2:	682a      	ldr	r2, [r5, #0]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff8:	e7a8      	b.n	8000f4c <HAL_RCC_OscConfig+0x1a4>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000ffa:	4243      	negs	r3, r0
 8000ffc:	4158      	adcs	r0, r3
 8000ffe:	b2c0      	uxtb	r0, r0
 8001000:	e782      	b.n	8000f08 <HAL_RCC_OscConfig+0x160>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001002:	4313      	orrs	r3, r2
 8001004:	2201      	movs	r2, #1
 8001006:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8001008:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800100a:	4313      	orrs	r3, r2
 800100c:	65eb      	str	r3, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800100e:	e7b4      	b.n	8000f7a <HAL_RCC_OscConfig+0x1d2>
 8001010:	40021000 	.word	0x40021000
 8001014:	fffeffff 	.word	0xfffeffff
 8001018:	fffbffff 	.word	0xfffbffff
 800101c:	00001388 	.word	0x00001388
 8001020:	ffffc7ff 	.word	0xffffc7ff
 8001024:	ffff80ff 	.word	0xffff80ff
 8001028:	20000000 	.word	0x20000000
 800102c:	02dc6c00 	.word	0x02dc6c00
 8001030:	20000008 	.word	0x20000008
 8001034:	fffffeff 	.word	0xfffffeff

08001038 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001038:	2038      	movs	r0, #56	@ 0x38
 800103a:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_RCC_GetSysClockFreq+0x4c>)
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	4210      	tst	r0, r2
 8001040:	d105      	bne.n	800104e <HAL_RCC_GetSysClockFreq+0x16>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001042:	681b      	ldr	r3, [r3, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001044:	4810      	ldr	r0, [pc, #64]	@ (8001088 <HAL_RCC_GetSysClockFreq+0x50>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001046:	049b      	lsls	r3, r3, #18
 8001048:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800104a:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800104c:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	4002      	ands	r2, r0
 8001052:	2a08      	cmp	r2, #8
 8001054:	d010      	beq.n	8001078 <HAL_RCC_GetSysClockFreq+0x40>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	4002      	ands	r2, r0
 800105a:	2a20      	cmp	r2, #32
 800105c:	d00e      	beq.n	800107c <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8001062:	3818      	subs	r0, #24
 8001064:	1e43      	subs	r3, r0, #1
 8001066:	4198      	sbcs	r0, r3
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <HAL_RCC_GetSysClockFreq+0x54>)
 800106a:	4240      	negs	r0, r0
 800106c:	4018      	ands	r0, r3
 800106e:	23fa      	movs	r3, #250	@ 0xfa
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	469c      	mov	ip, r3
 8001074:	4460      	add	r0, ip
 8001076:	e7e9      	b.n	800104c <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = HSE_VALUE;
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <HAL_RCC_GetSysClockFreq+0x58>)
 800107a:	e7e7      	b.n	800104c <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = LSE_VALUE;
 800107c:	2080      	movs	r0, #128	@ 0x80
 800107e:	0200      	lsls	r0, r0, #8
 8001080:	e7e4      	b.n	800104c <HAL_RCC_GetSysClockFreq+0x14>
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	40021000 	.word	0x40021000
 8001088:	02dc6c00 	.word	0x02dc6c00
 800108c:	ffff8300 	.word	0xffff8300
 8001090:	007a1200 	.word	0x007a1200

08001094 <HAL_RCC_ClockConfig>:
{
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	46ce      	mov	lr, r9
 8001098:	4647      	mov	r7, r8
 800109a:	0005      	movs	r5, r0
 800109c:	000c      	movs	r4, r1
 800109e:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d066      	beq.n	8001172 <HAL_RCC_ClockConfig+0xde>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a4:	2207      	movs	r2, #7
 80010a6:	4e56      	ldr	r6, [pc, #344]	@ (8001200 <HAL_RCC_ClockConfig+0x16c>)
 80010a8:	6833      	ldr	r3, [r6, #0]
 80010aa:	4013      	ands	r3, r2
 80010ac:	428b      	cmp	r3, r1
 80010ae:	d362      	bcc.n	8001176 <HAL_RCC_ClockConfig+0xe2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b0:	682b      	ldr	r3, [r5, #0]
 80010b2:	079a      	lsls	r2, r3, #30
 80010b4:	d510      	bpl.n	80010d8 <HAL_RCC_ClockConfig+0x44>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b6:	075a      	lsls	r2, r3, #29
 80010b8:	d507      	bpl.n	80010ca <HAL_RCC_ClockConfig+0x36>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80010ba:	4852      	ldr	r0, [pc, #328]	@ (8001204 <HAL_RCC_ClockConfig+0x170>)
 80010bc:	4a52      	ldr	r2, [pc, #328]	@ (8001208 <HAL_RCC_ClockConfig+0x174>)
 80010be:	6881      	ldr	r1, [r0, #8]
 80010c0:	4011      	ands	r1, r2
 80010c2:	22b0      	movs	r2, #176	@ 0xb0
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	430a      	orrs	r2, r1
 80010c8:	6082      	str	r2, [r0, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ca:	494e      	ldr	r1, [pc, #312]	@ (8001204 <HAL_RCC_ClockConfig+0x170>)
 80010cc:	484f      	ldr	r0, [pc, #316]	@ (800120c <HAL_RCC_ClockConfig+0x178>)
 80010ce:	688a      	ldr	r2, [r1, #8]
 80010d0:	4002      	ands	r2, r0
 80010d2:	68e8      	ldr	r0, [r5, #12]
 80010d4:	4302      	orrs	r2, r0
 80010d6:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d8:	07db      	lsls	r3, r3, #31
 80010da:	d528      	bpl.n	800112e <HAL_RCC_ClockConfig+0x9a>
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80010dc:	211c      	movs	r1, #28
 80010de:	4a49      	ldr	r2, [pc, #292]	@ (8001204 <HAL_RCC_ClockConfig+0x170>)
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	438b      	bics	r3, r1
 80010e4:	68a9      	ldr	r1, [r5, #8]
 80010e6:	430b      	orrs	r3, r1
 80010e8:	6013      	str	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ea:	6869      	ldr	r1, [r5, #4]
 80010ec:	2901      	cmp	r1, #1
 80010ee:	d03d      	beq.n	800116c <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80010f0:	2900      	cmp	r1, #0
 80010f2:	d160      	bne.n	80011b6 <HAL_RCC_ClockConfig+0x122>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f4:	6813      	ldr	r3, [r2, #0]
 80010f6:	055b      	lsls	r3, r3, #21
 80010f8:	d53b      	bpl.n	8001172 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010fa:	2207      	movs	r2, #7
 80010fc:	4e41      	ldr	r6, [pc, #260]	@ (8001204 <HAL_RCC_ClockConfig+0x170>)
 80010fe:	68b3      	ldr	r3, [r6, #8]
 8001100:	4393      	bics	r3, r2
 8001102:	430b      	orrs	r3, r1
 8001104:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001106:	f7ff fb1f 	bl	8000748 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110a:	2338      	movs	r3, #56	@ 0x38
 800110c:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800110e:	4b40      	ldr	r3, [pc, #256]	@ (8001210 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001110:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001112:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001114:	e004      	b.n	8001120 <HAL_RCC_ClockConfig+0x8c>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001116:	f7ff fb17 	bl	8000748 <HAL_GetTick>
 800111a:	1bc0      	subs	r0, r0, r7
 800111c:	4548      	cmp	r0, r9
 800111e:	d840      	bhi.n	80011a2 <HAL_RCC_ClockConfig+0x10e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001120:	4643      	mov	r3, r8
 8001122:	68b2      	ldr	r2, [r6, #8]
 8001124:	401a      	ands	r2, r3
 8001126:	686b      	ldr	r3, [r5, #4]
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	429a      	cmp	r2, r3
 800112c:	d1f3      	bne.n	8001116 <HAL_RCC_ClockConfig+0x82>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800112e:	2207      	movs	r2, #7
 8001130:	4e33      	ldr	r6, [pc, #204]	@ (8001200 <HAL_RCC_ClockConfig+0x16c>)
 8001132:	6833      	ldr	r3, [r6, #0]
 8001134:	4013      	ands	r3, r2
 8001136:	42a3      	cmp	r3, r4
 8001138:	d844      	bhi.n	80011c4 <HAL_RCC_ClockConfig+0x130>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113a:	682b      	ldr	r3, [r5, #0]
 800113c:	075b      	lsls	r3, r3, #29
 800113e:	d432      	bmi.n	80011a6 <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001140:	f7ff ff7a 	bl	8001038 <HAL_RCC_GetSysClockFreq>
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <HAL_RCC_ClockConfig+0x170>)
 8001146:	4a33      	ldr	r2, [pc, #204]	@ (8001214 <HAL_RCC_ClockConfig+0x180>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	4933      	ldr	r1, [pc, #204]	@ (8001218 <HAL_RCC_ClockConfig+0x184>)
 800114c:	051b      	lsls	r3, r3, #20
 800114e:	0f1b      	lsrs	r3, r3, #28
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	589b      	ldr	r3, [r3, r2]
 8001154:	221f      	movs	r2, #31
 8001156:	4013      	ands	r3, r2
 8001158:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 800115a:	4b30      	ldr	r3, [pc, #192]	@ (800121c <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800115c:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	f7ff fab4 	bl	80006cc <HAL_InitTick>
}
 8001164:	bcc0      	pop	{r6, r7}
 8001166:	46b9      	mov	r9, r7
 8001168:	46b0      	mov	r8, r6
 800116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800116c:	6813      	ldr	r3, [r2, #0]
 800116e:	039b      	lsls	r3, r3, #14
 8001170:	d4c3      	bmi.n	80010fa <HAL_RCC_ClockConfig+0x66>
    return HAL_ERROR;
 8001172:	2001      	movs	r0, #1
 8001174:	e7f6      	b.n	8001164 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	6833      	ldr	r3, [r6, #0]
 8001178:	4393      	bics	r3, r2
 800117a:	430b      	orrs	r3, r1
 800117c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800117e:	f7ff fae3 	bl	8000748 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001182:	2307      	movs	r3, #7
 8001184:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001186:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001188:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800118a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800118c:	4642      	mov	r2, r8
 800118e:	6833      	ldr	r3, [r6, #0]
 8001190:	4013      	ands	r3, r2
 8001192:	42a3      	cmp	r3, r4
 8001194:	d100      	bne.n	8001198 <HAL_RCC_ClockConfig+0x104>
 8001196:	e78b      	b.n	80010b0 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001198:	f7ff fad6 	bl	8000748 <HAL_GetTick>
 800119c:	1bc0      	subs	r0, r0, r7
 800119e:	4548      	cmp	r0, r9
 80011a0:	d9f4      	bls.n	800118c <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 80011a2:	2003      	movs	r0, #3
 80011a4:	e7de      	b.n	8001164 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <HAL_RCC_ClockConfig+0x170>)
 80011a8:	491d      	ldr	r1, [pc, #116]	@ (8001220 <HAL_RCC_ClockConfig+0x18c>)
 80011aa:	6893      	ldr	r3, [r2, #8]
 80011ac:	400b      	ands	r3, r1
 80011ae:	6929      	ldr	r1, [r5, #16]
 80011b0:	430b      	orrs	r3, r1
 80011b2:	6093      	str	r3, [r2, #8]
 80011b4:	e7c4      	b.n	8001140 <HAL_RCC_ClockConfig+0xac>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80011b6:	2903      	cmp	r1, #3
 80011b8:	d01b      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x15e>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80011ba:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80011bc:	079b      	lsls	r3, r3, #30
 80011be:	d49c      	bmi.n	80010fa <HAL_RCC_ClockConfig+0x66>
    return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
 80011c2:	e7cf      	b.n	8001164 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c4:	6833      	ldr	r3, [r6, #0]
 80011c6:	4393      	bics	r3, r2
 80011c8:	4323      	orrs	r3, r4
 80011ca:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80011cc:	f7ff fabc 	bl	8000748 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011d0:	2307      	movs	r3, #7
 80011d2:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80011d6:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80011d8:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011da:	4642      	mov	r2, r8
 80011dc:	6833      	ldr	r3, [r6, #0]
 80011de:	4013      	ands	r3, r2
 80011e0:	42a3      	cmp	r3, r4
 80011e2:	d0aa      	beq.n	800113a <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80011e4:	f7ff fab0 	bl	8000748 <HAL_GetTick>
 80011e8:	1bc0      	subs	r0, r0, r7
 80011ea:	4548      	cmp	r0, r9
 80011ec:	d9f5      	bls.n	80011da <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 80011ee:	2003      	movs	r0, #3
 80011f0:	e7b8      	b.n	8001164 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80011f2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80011f4:	079b      	lsls	r3, r3, #30
 80011f6:	d500      	bpl.n	80011fa <HAL_RCC_ClockConfig+0x166>
 80011f8:	e77f      	b.n	80010fa <HAL_RCC_ClockConfig+0x66>
    return HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e7b2      	b.n	8001164 <HAL_RCC_ClockConfig+0xd0>
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	40022000 	.word	0x40022000
 8001204:	40021000 	.word	0x40021000
 8001208:	ffff84ff 	.word	0xffff84ff
 800120c:	fffff0ff 	.word	0xfffff0ff
 8001210:	00001388 	.word	0x00001388
 8001214:	08001dc8 	.word	0x08001dc8
 8001218:	20000000 	.word	0x20000000
 800121c:	20000008 	.word	0x20000008
 8001220:	ffff8fff 	.word	0xffff8fff

08001224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001224:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001226:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8001228:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800122a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800122c:	4d13      	ldr	r5, [pc, #76]	@ (800127c <TIM_OC1_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800122e:	43a2      	bics	r2, r4
 8001230:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001232:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001234:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001236:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001238:	680d      	ldr	r5, [r1, #0]
 800123a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800123c:	2502      	movs	r5, #2
 800123e:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001240:	688d      	ldr	r5, [r1, #8]
 8001242:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001244:	4d0e      	ldr	r5, [pc, #56]	@ (8001280 <TIM_OC1_SetConfig+0x5c>)
 8001246:	42a8      	cmp	r0, r5
 8001248:	d005      	beq.n	8001256 <TIM_OC1_SetConfig+0x32>
 800124a:	4d0e      	ldr	r5, [pc, #56]	@ (8001284 <TIM_OC1_SetConfig+0x60>)
 800124c:	42a8      	cmp	r0, r5
 800124e:	d002      	beq.n	8001256 <TIM_OC1_SetConfig+0x32>
 8001250:	4d0d      	ldr	r5, [pc, #52]	@ (8001288 <TIM_OC1_SetConfig+0x64>)
 8001252:	42a8      	cmp	r0, r5
 8001254:	d10b      	bne.n	800126e <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001256:	2508      	movs	r5, #8
 8001258:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800125a:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800125c:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800125e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001260:	2504      	movs	r5, #4
 8001262:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001264:	4d09      	ldr	r5, [pc, #36]	@ (800128c <TIM_OC1_SetConfig+0x68>)
 8001266:	4025      	ands	r5, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001268:	694c      	ldr	r4, [r1, #20]
 800126a:	4334      	orrs	r4, r6
 800126c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800126e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001270:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001272:	684a      	ldr	r2, [r1, #4]
 8001274:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001276:	6203      	str	r3, [r0, #32]
}
 8001278:	bd70      	pop	{r4, r5, r6, pc}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	fffeff8c 	.word	0xfffeff8c
 8001280:	40012c00 	.word	0x40012c00
 8001284:	40014400 	.word	0x40014400
 8001288:	40014800 	.word	0x40014800
 800128c:	fffffcff 	.word	0xfffffcff

08001290 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001290:	6a02      	ldr	r2, [r0, #32]
{
 8001292:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001294:	6a03      	ldr	r3, [r0, #32]
 8001296:	4c16      	ldr	r4, [pc, #88]	@ (80012f0 <TIM_OC3_SetConfig+0x60>)
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001298:	4d16      	ldr	r5, [pc, #88]	@ (80012f4 <TIM_OC3_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800129a:	4023      	ands	r3, r4
 800129c:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800129e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80012a0:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80012a2:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80012a4:	680d      	ldr	r5, [r1, #0]
 80012a6:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <TIM_OC3_SetConfig+0x68>)
 80012aa:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80012ac:	688b      	ldr	r3, [r1, #8]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <TIM_OC3_SetConfig+0x6c>)
 80012b4:	4290      	cmp	r0, r2
 80012b6:	d012      	beq.n	80012de <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012b8:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <TIM_OC3_SetConfig+0x70>)
 80012ba:	4290      	cmp	r0, r2
 80012bc:	d002      	beq.n	80012c4 <TIM_OC3_SetConfig+0x34>
 80012be:	4a11      	ldr	r2, [pc, #68]	@ (8001304 <TIM_OC3_SetConfig+0x74>)
 80012c0:	4290      	cmp	r0, r2
 80012c2:	d106      	bne.n	80012d2 <TIM_OC3_SetConfig+0x42>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80012c4:	4a10      	ldr	r2, [pc, #64]	@ (8001308 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80012c6:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80012c8:	4022      	ands	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80012ca:	698c      	ldr	r4, [r1, #24]
 80012cc:	4334      	orrs	r4, r6
 80012ce:	0124      	lsls	r4, r4, #4
 80012d0:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80012d2:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80012d4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80012d6:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80012d8:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012da:	6203      	str	r3, [r0, #32]
}
 80012dc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 80012de:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <TIM_OC3_SetConfig+0x7c>)
 80012e0:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80012e2:	68cb      	ldr	r3, [r1, #12]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 80012e8:	4a09      	ldr	r2, [pc, #36]	@ (8001310 <TIM_OC3_SetConfig+0x80>)
 80012ea:	4013      	ands	r3, r2
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012ec:	e7ea      	b.n	80012c4 <TIM_OC3_SetConfig+0x34>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	fffffeff 	.word	0xfffffeff
 80012f4:	fffeff8c 	.word	0xfffeff8c
 80012f8:	fffffdff 	.word	0xfffffdff
 80012fc:	40012c00 	.word	0x40012c00
 8001300:	40014400 	.word	0x40014400
 8001304:	40014800 	.word	0x40014800
 8001308:	ffffcfff 	.word	0xffffcfff
 800130c:	fffff7ff 	.word	0xfffff7ff
 8001310:	fffffbff 	.word	0xfffffbff

08001314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001314:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001316:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8001318:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800131a:	6a03      	ldr	r3, [r0, #32]
 800131c:	4013      	ands	r3, r2
 800131e:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001320:	4a10      	ldr	r2, [pc, #64]	@ (8001364 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8001322:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001324:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001326:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001328:	680a      	ldr	r2, [r1, #0]
 800132a:	0212      	lsls	r2, r2, #8
 800132c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <TIM_OC4_SetConfig+0x54>)
 8001330:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001332:	688b      	ldr	r3, [r1, #8]
 8001334:	031b      	lsls	r3, r3, #12
 8001336:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001338:	4c0c      	ldr	r4, [pc, #48]	@ (800136c <TIM_OC4_SetConfig+0x58>)
 800133a:	42a0      	cmp	r0, r4
 800133c:	d005      	beq.n	800134a <TIM_OC4_SetConfig+0x36>
 800133e:	4c0c      	ldr	r4, [pc, #48]	@ (8001370 <TIM_OC4_SetConfig+0x5c>)
 8001340:	42a0      	cmp	r0, r4
 8001342:	d002      	beq.n	800134a <TIM_OC4_SetConfig+0x36>
 8001344:	4c0b      	ldr	r4, [pc, #44]	@ (8001374 <TIM_OC4_SetConfig+0x60>)
 8001346:	42a0      	cmp	r0, r4
 8001348:	d104      	bne.n	8001354 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800134a:	4c0b      	ldr	r4, [pc, #44]	@ (8001378 <TIM_OC4_SetConfig+0x64>)
 800134c:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800134e:	694d      	ldr	r5, [r1, #20]
 8001350:	01ad      	lsls	r5, r5, #6
 8001352:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001354:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001356:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001358:	684a      	ldr	r2, [r1, #4]
 800135a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800135c:	6203      	str	r3, [r0, #32]
}
 800135e:	bd30      	pop	{r4, r5, pc}
 8001360:	ffffefff 	.word	0xffffefff
 8001364:	feff8cff 	.word	0xfeff8cff
 8001368:	ffffdfff 	.word	0xffffdfff
 800136c:	40012c00 	.word	0x40012c00
 8001370:	40014400 	.word	0x40014400
 8001374:	40014800 	.word	0x40014800
 8001378:	ffffbfff 	.word	0xffffbfff

0800137c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800137c:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <TIM_OC5_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8001380:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001382:	6a03      	ldr	r3, [r0, #32]
 8001384:	4013      	ands	r3, r2
 8001386:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001388:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <TIM_OC5_SetConfig+0x50>)
  tmpccmrx = TIMx->CCMR3;
 800138c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800138e:	401a      	ands	r2, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001390:	680b      	ldr	r3, [r1, #0]
 8001392:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <TIM_OC5_SetConfig+0x54>)
 8001396:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001398:	688b      	ldr	r3, [r1, #8]
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800139e:	4d0d      	ldr	r5, [pc, #52]	@ (80013d4 <TIM_OC5_SetConfig+0x58>)
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	d005      	beq.n	80013b0 <TIM_OC5_SetConfig+0x34>
 80013a4:	4d0c      	ldr	r5, [pc, #48]	@ (80013d8 <TIM_OC5_SetConfig+0x5c>)
 80013a6:	42a8      	cmp	r0, r5
 80013a8:	d002      	beq.n	80013b0 <TIM_OC5_SetConfig+0x34>
 80013aa:	4d0c      	ldr	r5, [pc, #48]	@ (80013dc <TIM_OC5_SetConfig+0x60>)
 80013ac:	42a8      	cmp	r0, r5
 80013ae:	d104      	bne.n	80013ba <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80013b0:	4d05      	ldr	r5, [pc, #20]	@ (80013c8 <TIM_OC5_SetConfig+0x4c>)
 80013b2:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80013b4:	694c      	ldr	r4, [r1, #20]
 80013b6:	0224      	lsls	r4, r4, #8
 80013b8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80013bc:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80013be:	684a      	ldr	r2, [r1, #4]
 80013c0:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013c2:	6203      	str	r3, [r0, #32]
}
 80013c4:	bd30      	pop	{r4, r5, pc}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	fffeffff 	.word	0xfffeffff
 80013cc:	fffeff8f 	.word	0xfffeff8f
 80013d0:	fffdffff 	.word	0xfffdffff
 80013d4:	40012c00 	.word	0x40012c00
 80013d8:	40014400 	.word	0x40014400
 80013dc:	40014800 	.word	0x40014800

080013e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80013e0:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80013e4:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80013e6:	6a03      	ldr	r3, [r0, #32]
 80013e8:	4013      	ands	r3, r2
 80013ea:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80013ec:	4a10      	ldr	r2, [pc, #64]	@ (8001430 <TIM_OC6_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 80013ee:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80013f0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80013f2:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013f4:	680a      	ldr	r2, [r1, #0]
 80013f6:	0212      	lsls	r2, r2, #8
 80013f8:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <TIM_OC6_SetConfig+0x54>)
 80013fc:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80013fe:	688b      	ldr	r3, [r1, #8]
 8001400:	051b      	lsls	r3, r3, #20
 8001402:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001404:	4c0c      	ldr	r4, [pc, #48]	@ (8001438 <TIM_OC6_SetConfig+0x58>)
 8001406:	42a0      	cmp	r0, r4
 8001408:	d005      	beq.n	8001416 <TIM_OC6_SetConfig+0x36>
 800140a:	4c0c      	ldr	r4, [pc, #48]	@ (800143c <TIM_OC6_SetConfig+0x5c>)
 800140c:	42a0      	cmp	r0, r4
 800140e:	d002      	beq.n	8001416 <TIM_OC6_SetConfig+0x36>
 8001410:	4c0b      	ldr	r4, [pc, #44]	@ (8001440 <TIM_OC6_SetConfig+0x60>)
 8001412:	42a0      	cmp	r0, r4
 8001414:	d104      	bne.n	8001420 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001416:	4c0b      	ldr	r4, [pc, #44]	@ (8001444 <TIM_OC6_SetConfig+0x64>)
 8001418:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800141a:	694d      	ldr	r5, [r1, #20]
 800141c:	02ad      	lsls	r5, r5, #10
 800141e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001420:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001422:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001424:	684a      	ldr	r2, [r1, #4]
 8001426:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001428:	6203      	str	r3, [r0, #32]
}
 800142a:	bd30      	pop	{r4, r5, pc}
 800142c:	ffefffff 	.word	0xffefffff
 8001430:	feff8fff 	.word	0xfeff8fff
 8001434:	ffdfffff 	.word	0xffdfffff
 8001438:	40012c00 	.word	0x40012c00
 800143c:	40014400 	.word	0x40014400
 8001440:	40014800 	.word	0x40014800
 8001444:	fffbffff 	.word	0xfffbffff

08001448 <HAL_TIM_OC_Start_DMA>:
{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	000d      	movs	r5, r1
 800144c:	0004      	movs	r4, r0
 800144e:	0011      	movs	r1, r2
 8001450:	2d10      	cmp	r5, #16
 8001452:	d803      	bhi.n	800145c <HAL_TIM_OC_Start_DMA+0x14>
 8001454:	4a6f      	ldr	r2, [pc, #444]	@ (8001614 <HAL_TIM_OC_Start_DMA+0x1cc>)
 8001456:	00a8      	lsls	r0, r5, #2
 8001458:	5812      	ldr	r2, [r2, r0]
 800145a:	4697      	mov	pc, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800145c:	2243      	movs	r2, #67	@ 0x43
 800145e:	5ca6      	ldrb	r6, [r4, r2]
 8001460:	b2f0      	uxtb	r0, r6
 8001462:	2e02      	cmp	r6, #2
 8001464:	d009      	beq.n	800147a <HAL_TIM_OC_Start_DMA+0x32>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001466:	5ca0      	ldrb	r0, [r4, r2]
 8001468:	2801      	cmp	r0, #1
 800146a:	d105      	bne.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
    if ((pData == NULL) || (Length == 0U))
 800146c:	2900      	cmp	r1, #0
 800146e:	d003      	beq.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001474:	2302      	movs	r3, #2
 8001476:	54a3      	strb	r3, [r4, r2]
      return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
}
 800147a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800147c:	223e      	movs	r2, #62	@ 0x3e
 800147e:	5ca6      	ldrb	r6, [r4, r2]
 8001480:	b2f0      	uxtb	r0, r6
 8001482:	2e02      	cmp	r6, #2
 8001484:	d0f9      	beq.n	800147a <HAL_TIM_OC_Start_DMA+0x32>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001486:	5ca0      	ldrb	r0, [r4, r2]
 8001488:	2801      	cmp	r0, #1
 800148a:	d1f5      	bne.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
    if ((pData == NULL) || (Length == 0U))
 800148c:	2900      	cmp	r1, #0
 800148e:	d0f3      	beq.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f1      	beq.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001494:	2002      	movs	r0, #2
 8001496:	54a0      	strb	r0, [r4, r2]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001498:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800149a:	4a5f      	ldr	r2, [pc, #380]	@ (8001618 <HAL_TIM_OC_Start_DMA+0x1d0>)
 800149c:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800149e:	4a5f      	ldr	r2, [pc, #380]	@ (800161c <HAL_TIM_OC_Start_DMA+0x1d4>)
 80014a0:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80014a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001620 <HAL_TIM_OC_Start_DMA+0x1d8>)
 80014a4:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	3234      	adds	r2, #52	@ 0x34
 80014aa:	f7ff fa3d 	bl	8000928 <HAL_DMA_Start_IT>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d1e2      	bne.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	68d9      	ldr	r1, [r3, #12]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80014be:	211f      	movs	r1, #31
 80014c0:	2201      	movs	r2, #1
 80014c2:	4029      	ands	r1, r5
 80014c4:	408a      	lsls	r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80014c6:	6a19      	ldr	r1, [r3, #32]
 80014c8:	4391      	bics	r1, r2
 80014ca:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80014cc:	6a19      	ldr	r1, [r3, #32]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014d2:	4a54      	ldr	r2, [pc, #336]	@ (8001624 <HAL_TIM_OC_Start_DMA+0x1dc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d100      	bne.n	80014da <HAL_TIM_OC_Start_DMA+0x92>
 80014d8:	e095      	b.n	8001606 <HAL_TIM_OC_Start_DMA+0x1be>
 80014da:	4a53      	ldr	r2, [pc, #332]	@ (8001628 <HAL_TIM_OC_Start_DMA+0x1e0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d100      	bne.n	80014e2 <HAL_TIM_OC_Start_DMA+0x9a>
 80014e0:	e08b      	b.n	80015fa <HAL_TIM_OC_Start_DMA+0x1b2>
 80014e2:	4a52      	ldr	r2, [pc, #328]	@ (800162c <HAL_TIM_OC_Start_DMA+0x1e4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d100      	bne.n	80014ea <HAL_TIM_OC_Start_DMA+0xa2>
 80014e8:	e087      	b.n	80015fa <HAL_TIM_OC_Start_DMA+0x1b2>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014ea:	4a51      	ldr	r2, [pc, #324]	@ (8001630 <HAL_TIM_OC_Start_DMA+0x1e8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d107      	bne.n	8001500 <HAL_TIM_OC_Start_DMA+0xb8>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	4950      	ldr	r1, [pc, #320]	@ (8001634 <HAL_TIM_OC_Start_DMA+0x1ec>)
 80014f4:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f6:	2a06      	cmp	r2, #6
 80014f8:	d006      	beq.n	8001508 <HAL_TIM_OC_Start_DMA+0xc0>
 80014fa:	3907      	subs	r1, #7
 80014fc:	428a      	cmp	r2, r1
 80014fe:	d003      	beq.n	8001508 <HAL_TIM_OC_Start_DMA+0xc0>
        __HAL_TIM_ENABLE(htim);
 8001500:	2101      	movs	r1, #1
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8001508:	2000      	movs	r0, #0
 800150a:	e7b6      	b.n	800147a <HAL_TIM_OC_Start_DMA+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800150c:	223f      	movs	r2, #63	@ 0x3f
 800150e:	5ca6      	ldrb	r6, [r4, r2]
 8001510:	b2f0      	uxtb	r0, r6
 8001512:	2e02      	cmp	r6, #2
 8001514:	d0b1      	beq.n	800147a <HAL_TIM_OC_Start_DMA+0x32>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001516:	5ca0      	ldrb	r0, [r4, r2]
 8001518:	2801      	cmp	r0, #1
 800151a:	d1ad      	bne.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
    if ((pData == NULL) || (Length == 0U))
 800151c:	2900      	cmp	r1, #0
 800151e:	d0ab      	beq.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0a9      	beq.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001524:	2002      	movs	r0, #2
 8001526:	54a0      	strb	r0, [r4, r2]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001528:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800152a:	4a3b      	ldr	r2, [pc, #236]	@ (8001618 <HAL_TIM_OC_Start_DMA+0x1d0>)
 800152c:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800152e:	4a3b      	ldr	r2, [pc, #236]	@ (800161c <HAL_TIM_OC_Start_DMA+0x1d4>)
 8001530:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001532:	4a3b      	ldr	r2, [pc, #236]	@ (8001620 <HAL_TIM_OC_Start_DMA+0x1d8>)
 8001534:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001536:	6822      	ldr	r2, [r4, #0]
 8001538:	3238      	adds	r2, #56	@ 0x38
 800153a:	f7ff f9f5 	bl	8000928 <HAL_DMA_Start_IT>
 800153e:	2800      	cmp	r0, #0
 8001540:	d19a      	bne.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001542:	2280      	movs	r2, #128	@ 0x80
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	00d2      	lsls	r2, r2, #3
 8001548:	68d9      	ldr	r1, [r3, #12]
 800154a:	430a      	orrs	r2, r1
 800154c:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 800154e:	e7b6      	b.n	80014be <HAL_TIM_OC_Start_DMA+0x76>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001550:	2240      	movs	r2, #64	@ 0x40
 8001552:	5ca6      	ldrb	r6, [r4, r2]
 8001554:	b2f0      	uxtb	r0, r6
 8001556:	2e02      	cmp	r6, #2
 8001558:	d100      	bne.n	800155c <HAL_TIM_OC_Start_DMA+0x114>
 800155a:	e78e      	b.n	800147a <HAL_TIM_OC_Start_DMA+0x32>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800155c:	5ca0      	ldrb	r0, [r4, r2]
 800155e:	2801      	cmp	r0, #1
 8001560:	d000      	beq.n	8001564 <HAL_TIM_OC_Start_DMA+0x11c>
 8001562:	e789      	b.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
    if ((pData == NULL) || (Length == 0U))
 8001564:	2900      	cmp	r1, #0
 8001566:	d100      	bne.n	800156a <HAL_TIM_OC_Start_DMA+0x122>
 8001568:	e786      	b.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d100      	bne.n	8001570 <HAL_TIM_OC_Start_DMA+0x128>
 800156e:	e783      	b.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001570:	2002      	movs	r0, #2
 8001572:	54a0      	strb	r0, [r4, r2]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001574:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001576:	4a28      	ldr	r2, [pc, #160]	@ (8001618 <HAL_TIM_OC_Start_DMA+0x1d0>)
 8001578:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800157a:	4a28      	ldr	r2, [pc, #160]	@ (800161c <HAL_TIM_OC_Start_DMA+0x1d4>)
 800157c:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800157e:	4a28      	ldr	r2, [pc, #160]	@ (8001620 <HAL_TIM_OC_Start_DMA+0x1d8>)
 8001580:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001582:	6822      	ldr	r2, [r4, #0]
 8001584:	323c      	adds	r2, #60	@ 0x3c
 8001586:	f7ff f9cf 	bl	8000928 <HAL_DMA_Start_IT>
 800158a:	2800      	cmp	r0, #0
 800158c:	d000      	beq.n	8001590 <HAL_TIM_OC_Start_DMA+0x148>
 800158e:	e773      	b.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001590:	2280      	movs	r2, #128	@ 0x80
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	68d9      	ldr	r1, [r3, #12]
 8001598:	430a      	orrs	r2, r1
 800159a:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 800159c:	e78f      	b.n	80014be <HAL_TIM_OC_Start_DMA+0x76>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800159e:	2241      	movs	r2, #65	@ 0x41
 80015a0:	5ca6      	ldrb	r6, [r4, r2]
 80015a2:	b2f0      	uxtb	r0, r6
 80015a4:	2e02      	cmp	r6, #2
 80015a6:	d100      	bne.n	80015aa <HAL_TIM_OC_Start_DMA+0x162>
 80015a8:	e767      	b.n	800147a <HAL_TIM_OC_Start_DMA+0x32>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80015aa:	5ca0      	ldrb	r0, [r4, r2]
 80015ac:	2801      	cmp	r0, #1
 80015ae:	d000      	beq.n	80015b2 <HAL_TIM_OC_Start_DMA+0x16a>
 80015b0:	e762      	b.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
    if ((pData == NULL) || (Length == 0U))
 80015b2:	2900      	cmp	r1, #0
 80015b4:	d100      	bne.n	80015b8 <HAL_TIM_OC_Start_DMA+0x170>
 80015b6:	e75f      	b.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d100      	bne.n	80015be <HAL_TIM_OC_Start_DMA+0x176>
 80015bc:	e75c      	b.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80015be:	2002      	movs	r0, #2
 80015c0:	54a0      	strb	r0, [r4, r2]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80015c2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <HAL_TIM_OC_Start_DMA+0x1d0>)
 80015c6:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80015c8:	4a14      	ldr	r2, [pc, #80]	@ (800161c <HAL_TIM_OC_Start_DMA+0x1d4>)
 80015ca:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <HAL_TIM_OC_Start_DMA+0x1d8>)
 80015ce:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80015d0:	6822      	ldr	r2, [r4, #0]
 80015d2:	3240      	adds	r2, #64	@ 0x40
 80015d4:	f7ff f9a8 	bl	8000928 <HAL_DMA_Start_IT>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d000      	beq.n	80015de <HAL_TIM_OC_Start_DMA+0x196>
 80015dc:	e74c      	b.n	8001478 <HAL_TIM_OC_Start_DMA+0x30>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	0152      	lsls	r2, r2, #5
 80015e4:	68d9      	ldr	r1, [r3, #12]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 80015ea:	e768      	b.n	80014be <HAL_TIM_OC_Start_DMA+0x76>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80015ec:	2242      	movs	r2, #66	@ 0x42
 80015ee:	5ca5      	ldrb	r5, [r4, r2]
 80015f0:	b2e8      	uxtb	r0, r5
 80015f2:	2d02      	cmp	r5, #2
 80015f4:	d000      	beq.n	80015f8 <HAL_TIM_OC_Start_DMA+0x1b0>
 80015f6:	e736      	b.n	8001466 <HAL_TIM_OC_Start_DMA+0x1e>
 80015f8:	e73f      	b.n	800147a <HAL_TIM_OC_Start_DMA+0x32>
      __HAL_TIM_MOE_ENABLE(htim);
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80015fe:	0212      	lsls	r2, r2, #8
 8001600:	430a      	orrs	r2, r1
 8001602:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001604:	e77c      	b.n	8001500 <HAL_TIM_OC_Start_DMA+0xb8>
      __HAL_TIM_MOE_ENABLE(htim);
 8001606:	2280      	movs	r2, #128	@ 0x80
 8001608:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800160a:	0212      	lsls	r2, r2, #8
 800160c:	430a      	orrs	r2, r1
 800160e:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001610:	e76e      	b.n	80014f0 <HAL_TIM_OC_Start_DMA+0xa8>
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	08001e08 	.word	0x08001e08
 8001618:	08001829 	.word	0x08001829
 800161c:	0800189d 	.word	0x0800189d
 8001620:	080018e1 	.word	0x080018e1
 8001624:	40012c00 	.word	0x40012c00
 8001628:	40014400 	.word	0x40014400
 800162c:	40014800 	.word	0x40014800
 8001630:	40000400 	.word	0x40000400
 8001634:	00010007 	.word	0x00010007

08001638 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8001638:	4770      	bx	lr
 800163a:	46c0      	nop			@ (mov r8, r8)

0800163c <HAL_TIM_PWM_MspDeInit>:
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
 800163c:	4770      	bx	lr
 800163e:	46c0      	nop			@ (mov r8, r8)

08001640 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001640:	233d      	movs	r3, #61	@ 0x3d
 8001642:	2202      	movs	r2, #2
{
 8001644:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8001646:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	4a16      	ldr	r2, [pc, #88]	@ (80016a4 <HAL_TIM_PWM_DeInit+0x64>)
 800164c:	6a19      	ldr	r1, [r3, #32]
{
 800164e:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 8001650:	4211      	tst	r1, r2
 8001652:	d107      	bne.n	8001664 <HAL_TIM_PWM_DeInit+0x24>
 8001654:	6a19      	ldr	r1, [r3, #32]
 8001656:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <HAL_TIM_PWM_DeInit+0x68>)
 8001658:	4211      	tst	r1, r2
 800165a:	d103      	bne.n	8001664 <HAL_TIM_PWM_DeInit+0x24>
 800165c:	2101      	movs	r1, #1
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	438a      	bics	r2, r1
 8001662:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8001664:	0020      	movs	r0, r4
 8001666:	f7ff ffe9 	bl	800163c <HAL_TIM_PWM_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	2248      	movs	r2, #72	@ 0x48
 800166e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001670:	3a0a      	subs	r2, #10
 8001672:	54a3      	strb	r3, [r4, r2]
 8001674:	3201      	adds	r2, #1
 8001676:	54a3      	strb	r3, [r4, r2]
 8001678:	3201      	adds	r2, #1
 800167a:	54a3      	strb	r3, [r4, r2]
 800167c:	3201      	adds	r2, #1
 800167e:	54a3      	strb	r3, [r4, r2]
 8001680:	3201      	adds	r2, #1
 8001682:	54a3      	strb	r3, [r4, r2]
 8001684:	3201      	adds	r2, #1
 8001686:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001688:	3201      	adds	r2, #1
 800168a:	54a3      	strb	r3, [r4, r2]
 800168c:	3201      	adds	r2, #1
 800168e:	54a3      	strb	r3, [r4, r2]
 8001690:	3201      	adds	r2, #1
 8001692:	54a3      	strb	r3, [r4, r2]
 8001694:	3201      	adds	r2, #1
 8001696:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_RESET;
 8001698:	3a0a      	subs	r2, #10
 800169a:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 800169c:	3a01      	subs	r2, #1
}
 800169e:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80016a0:	54a3      	strb	r3, [r4, r2]
}
 80016a2:	bd10      	pop	{r4, pc}
 80016a4:	00001111 	.word	0x00001111
 80016a8:	00000444 	.word	0x00000444

080016ac <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 80016ac:	b510      	push	{r4, lr}
 80016ae:	f7ff fecb 	bl	8001448 <HAL_TIM_OC_Start_DMA>
 80016b2:	bd10      	pop	{r4, pc}

080016b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80016b4:	233c      	movs	r3, #60	@ 0x3c
{
 80016b6:	b570      	push	{r4, r5, r6, lr}
 80016b8:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80016ba:	5cc0      	ldrb	r0, [r0, r3]
 80016bc:	2801      	cmp	r0, #1
 80016be:	d100      	bne.n	80016c2 <HAL_TIM_ConfigClockSource+0xe>
 80016c0:	e073      	b.n	80017aa <HAL_TIM_ConfigClockSource+0xf6>
 80016c2:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80016c4:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80016c6:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80016c8:	3301      	adds	r3, #1
 80016ca:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 80016cc:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016ce:	4d51      	ldr	r5, [pc, #324]	@ (8001814 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 80016d0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016d2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80016d4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80016d6:	680b      	ldr	r3, [r1, #0]
 80016d8:	2b60      	cmp	r3, #96	@ 0x60
 80016da:	d100      	bne.n	80016de <HAL_TIM_ConfigClockSource+0x2a>
 80016dc:	e067      	b.n	80017ae <HAL_TIM_ConfigClockSource+0xfa>
 80016de:	d81d      	bhi.n	800171c <HAL_TIM_ConfigClockSource+0x68>
 80016e0:	2b40      	cmp	r3, #64	@ 0x40
 80016e2:	d100      	bne.n	80016e6 <HAL_TIM_ConfigClockSource+0x32>
 80016e4:	e07d      	b.n	80017e2 <HAL_TIM_ConfigClockSource+0x12e>
 80016e6:	d93f      	bls.n	8001768 <HAL_TIM_ConfigClockSource+0xb4>
 80016e8:	2b50      	cmp	r3, #80	@ 0x50
 80016ea:	d135      	bne.n	8001758 <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 80016ec:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80016ee:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80016f0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016f2:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016f4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016f6:	43a6      	bics	r6, r4
 80016f8:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016fa:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80016fc:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016fe:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001700:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001702:	240a      	movs	r4, #10
 8001704:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001706:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001708:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800170a:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800170c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800170e:	4942      	ldr	r1, [pc, #264]	@ (8001818 <HAL_TIM_ConfigClockSource+0x164>)
 8001710:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001712:	2157      	movs	r1, #87	@ 0x57
 8001714:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001716:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001718:	2000      	movs	r0, #0
 800171a:	e01e      	b.n	800175a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 800171c:	2480      	movs	r4, #128	@ 0x80
 800171e:	0164      	lsls	r4, r4, #5
 8001720:	42a3      	cmp	r3, r4
 8001722:	d0f9      	beq.n	8001718 <HAL_TIM_ConfigClockSource+0x64>
 8001724:	2480      	movs	r4, #128	@ 0x80
 8001726:	01a4      	lsls	r4, r4, #6
 8001728:	42a3      	cmp	r3, r4
 800172a:	d12b      	bne.n	8001784 <HAL_TIM_ConfigClockSource+0xd0>
  tmpsmcr = TIMx->SMCR;
 800172c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800172e:	4b3b      	ldr	r3, [pc, #236]	@ (800181c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001730:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001732:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001734:	688b      	ldr	r3, [r1, #8]
 8001736:	68c9      	ldr	r1, [r1, #12]
 8001738:	432b      	orrs	r3, r5
 800173a:	0209      	lsls	r1, r1, #8
 800173c:	430b      	orrs	r3, r1
 800173e:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001740:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	6881      	ldr	r1, [r0, #8]
 8001746:	01db      	lsls	r3, r3, #7
 8001748:	430b      	orrs	r3, r1
 800174a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800174c:	2000      	movs	r0, #0
 800174e:	e004      	b.n	800175a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001750:	2110      	movs	r1, #16
 8001752:	001c      	movs	r4, r3
 8001754:	438c      	bics	r4, r1
 8001756:	d00c      	beq.n	8001772 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8001758:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800175a:	233d      	movs	r3, #61	@ 0x3d
 800175c:	2101      	movs	r1, #1
 800175e:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8001760:	2100      	movs	r1, #0
 8001762:	3b01      	subs	r3, #1
 8001764:	54d1      	strb	r1, [r2, r3]
}
 8001766:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001768:	2b20      	cmp	r3, #32
 800176a:	d002      	beq.n	8001772 <HAL_TIM_ConfigClockSource+0xbe>
 800176c:	d9f0      	bls.n	8001750 <HAL_TIM_ConfigClockSource+0x9c>
 800176e:	2b30      	cmp	r3, #48	@ 0x30
 8001770:	d1f2      	bne.n	8001758 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001772:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001774:	4c28      	ldr	r4, [pc, #160]	@ (8001818 <HAL_TIM_ConfigClockSource+0x164>)
 8001776:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001778:	430b      	orrs	r3, r1
 800177a:	2107      	movs	r1, #7
 800177c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800177e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001780:	2000      	movs	r0, #0
 8001782:	e7ea      	b.n	800175a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001784:	2b70      	cmp	r3, #112	@ 0x70
 8001786:	d1e7      	bne.n	8001758 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001788:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800178c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800178e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001790:	688b      	ldr	r3, [r1, #8]
 8001792:	68c9      	ldr	r1, [r1, #12]
 8001794:	432b      	orrs	r3, r5
 8001796:	0209      	lsls	r1, r1, #8
 8001798:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800179a:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800179c:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 800179e:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80017a0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017a2:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80017a4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2000      	movs	r0, #0
 80017a8:	e7d7      	b.n	800175a <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 80017aa:	2002      	movs	r0, #2
 80017ac:	e7db      	b.n	8001766 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017ae:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 80017b0:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017b2:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80017b4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017b6:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 80017b8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017ba:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017bc:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017be:	4e18      	ldr	r6, [pc, #96]	@ (8001820 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017c0:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017c2:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017c4:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017c6:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80017c8:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017ca:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80017cc:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 80017ce:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 80017d0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80017d2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017d4:	4910      	ldr	r1, [pc, #64]	@ (8001818 <HAL_TIM_ConfigClockSource+0x164>)
 80017d6:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017d8:	2167      	movs	r1, #103	@ 0x67
 80017da:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80017dc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2000      	movs	r0, #0
 80017e0:	e7bb      	b.n	800175a <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 80017e2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80017e4:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80017e6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017e8:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017ea:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017ec:	43a6      	bics	r6, r4
 80017ee:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017f0:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80017f2:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017f4:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017f6:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017f8:	240a      	movs	r4, #10
 80017fa:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80017fc:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80017fe:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001800:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001802:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001804:	4904      	ldr	r1, [pc, #16]	@ (8001818 <HAL_TIM_ConfigClockSource+0x164>)
 8001806:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001808:	2147      	movs	r1, #71	@ 0x47
 800180a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800180c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2000      	movs	r0, #0
 8001810:	e7a3      	b.n	800175a <HAL_TIM_ConfigClockSource+0xa6>
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	ffce0088 	.word	0xffce0088
 8001818:	ffcfff8f 	.word	0xffcfff8f
 800181c:	ffff00ff 	.word	0xffff00ff
 8001820:	ffff0fff 	.word	0xffff0fff

08001824 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8001824:	4770      	bx	lr
 8001826:	46c0      	nop			@ (mov r8, r8)

08001828 <TIM_DMADelayPulseCplt>:
{
 8001828:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800182a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800182c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800182e:	4283      	cmp	r3, r0
 8001830:	d017      	beq.n	8001862 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001832:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001834:	4283      	cmp	r3, r0
 8001836:	d00b      	beq.n	8001850 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001838:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800183a:	4283      	cmp	r3, r0
 800183c:	d019      	beq.n	8001872 <TIM_DMADelayPulseCplt+0x4a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800183e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001840:	4283      	cmp	r3, r0
 8001842:	d01f      	beq.n	8001884 <TIM_DMADelayPulseCplt+0x5c>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	0020      	movs	r0, r4
 8001846:	f7ff ffed 	bl	8001824 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	2300      	movs	r3, #0
 800184c:	7723      	strb	r3, [r4, #28]
}
 800184e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001850:	2202      	movs	r2, #2
 8001852:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f4      	bne.n	8001844 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800185a:	333f      	adds	r3, #63	@ 0x3f
 800185c:	3a01      	subs	r2, #1
 800185e:	54e2      	strb	r2, [r4, r3]
 8001860:	e7f0      	b.n	8001844 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001862:	2201      	movs	r2, #1
 8001864:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1eb      	bne.n	8001844 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800186c:	333e      	adds	r3, #62	@ 0x3e
 800186e:	54e2      	strb	r2, [r4, r3]
 8001870:	e7e8      	b.n	8001844 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001872:	2204      	movs	r2, #4
 8001874:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1e3      	bne.n	8001844 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800187c:	3340      	adds	r3, #64	@ 0x40
 800187e:	3a03      	subs	r2, #3
 8001880:	54e2      	strb	r2, [r4, r3]
 8001882:	e7df      	b.n	8001844 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001884:	2208      	movs	r2, #8
 8001886:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1da      	bne.n	8001844 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800188e:	3341      	adds	r3, #65	@ 0x41
 8001890:	3a07      	subs	r2, #7
 8001892:	54e2      	strb	r2, [r4, r3]
 8001894:	e7d6      	b.n	8001844 <TIM_DMADelayPulseCplt+0x1c>
 8001896:	46c0      	nop			@ (mov r8, r8)

08001898 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8001898:	4770      	bx	lr
 800189a:	46c0      	nop			@ (mov r8, r8)

0800189c <TIM_DMADelayPulseHalfCplt>:
{
 800189c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800189e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80018a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80018a2:	4283      	cmp	r3, r0
 80018a4:	d011      	beq.n	80018ca <TIM_DMADelayPulseHalfCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80018a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80018a8:	4283      	cmp	r3, r0
 80018aa:	d00b      	beq.n	80018c4 <TIM_DMADelayPulseHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80018ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80018ae:	4283      	cmp	r3, r0
 80018b0:	d00e      	beq.n	80018d0 <TIM_DMADelayPulseHalfCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80018b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80018b4:	4283      	cmp	r3, r0
 80018b6:	d00e      	beq.n	80018d6 <TIM_DMADelayPulseHalfCplt+0x3a>
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80018b8:	0020      	movs	r0, r4
 80018ba:	f7ff ffed 	bl	8001898 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018be:	2300      	movs	r3, #0
 80018c0:	7723      	strb	r3, [r4, #28]
}
 80018c2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	7723      	strb	r3, [r4, #28]
 80018c8:	e7f6      	b.n	80018b8 <TIM_DMADelayPulseHalfCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	7723      	strb	r3, [r4, #28]
 80018ce:	e7f3      	b.n	80018b8 <TIM_DMADelayPulseHalfCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018d0:	2304      	movs	r3, #4
 80018d2:	7723      	strb	r3, [r4, #28]
 80018d4:	e7f0      	b.n	80018b8 <TIM_DMADelayPulseHalfCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018d6:	2308      	movs	r3, #8
 80018d8:	7723      	strb	r3, [r4, #28]
 80018da:	e7ed      	b.n	80018b8 <TIM_DMADelayPulseHalfCplt+0x1c>

080018dc <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 80018dc:	4770      	bx	lr
 80018de:	46c0      	nop			@ (mov r8, r8)

080018e0 <TIM_DMAError>:
{
 80018e0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018e2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80018e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80018e6:	4283      	cmp	r3, r0
 80018e8:	d017      	beq.n	800191a <TIM_DMAError+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80018ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80018ec:	4283      	cmp	r3, r0
 80018ee:	d00e      	beq.n	800190e <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80018f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80018f2:	4283      	cmp	r3, r0
 80018f4:	d016      	beq.n	8001924 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80018f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80018f8:	4283      	cmp	r3, r0
 80018fa:	d019      	beq.n	8001930 <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 80018fc:	233d      	movs	r3, #61	@ 0x3d
 80018fe:	2201      	movs	r2, #1
 8001900:	54e2      	strb	r2, [r4, r3]
  HAL_TIM_ErrorCallback(htim);
 8001902:	0020      	movs	r0, r4
 8001904:	f7ff ffea 	bl	80018dc <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001908:	2300      	movs	r3, #0
 800190a:	7723      	strb	r3, [r4, #28]
}
 800190c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800190e:	2302      	movs	r3, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001910:	2201      	movs	r2, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001912:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001914:	333d      	adds	r3, #61	@ 0x3d
 8001916:	54e2      	strb	r2, [r4, r3]
 8001918:	e7f3      	b.n	8001902 <TIM_DMAError+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800191a:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800191c:	223e      	movs	r2, #62	@ 0x3e
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800191e:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	54a3      	strb	r3, [r4, r2]
 8001922:	e7ee      	b.n	8001902 <TIM_DMAError+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001924:	2304      	movs	r3, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001926:	2201      	movs	r2, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001928:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800192a:	333c      	adds	r3, #60	@ 0x3c
 800192c:	54e2      	strb	r2, [r4, r3]
 800192e:	e7e8      	b.n	8001902 <TIM_DMAError+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001930:	2308      	movs	r3, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001932:	2201      	movs	r2, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001934:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001936:	3339      	adds	r3, #57	@ 0x39
 8001938:	54e2      	strb	r2, [r4, r3]
 800193a:	e7e2      	b.n	8001902 <TIM_DMAError+0x22>

0800193c <TIM_Base_SetConfig>:
{
 800193c:	b570      	push	{r4, r5, r6, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800193e:	4e1e      	ldr	r6, [pc, #120]	@ (80019b8 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8001940:	6803      	ldr	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001942:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001944:	694d      	ldr	r5, [r1, #20]
  TIMx->PSC = Structure->Prescaler;
 8001946:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001948:	42b0      	cmp	r0, r6
 800194a:	d023      	beq.n	8001994 <TIM_Base_SetConfig+0x58>
 800194c:	4e1b      	ldr	r6, [pc, #108]	@ (80019bc <TIM_Base_SetConfig+0x80>)
 800194e:	42b0      	cmp	r0, r6
 8001950:	d011      	beq.n	8001976 <TIM_Base_SetConfig+0x3a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001952:	4e1b      	ldr	r6, [pc, #108]	@ (80019c0 <TIM_Base_SetConfig+0x84>)
 8001954:	42b0      	cmp	r0, r6
 8001956:	d012      	beq.n	800197e <TIM_Base_SetConfig+0x42>
 8001958:	4e1a      	ldr	r6, [pc, #104]	@ (80019c4 <TIM_Base_SetConfig+0x88>)
 800195a:	42b0      	cmp	r0, r6
 800195c:	d01e      	beq.n	800199c <TIM_Base_SetConfig+0x60>
 800195e:	4e1a      	ldr	r6, [pc, #104]	@ (80019c8 <TIM_Base_SetConfig+0x8c>)
 8001960:	42b0      	cmp	r0, r6
 8001962:	d01b      	beq.n	800199c <TIM_Base_SetConfig+0x60>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001964:	2180      	movs	r1, #128	@ 0x80
 8001966:	438b      	bics	r3, r1
 8001968:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800196a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800196c:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800196e:	6282      	str	r2, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001970:	2301      	movs	r3, #1
 8001972:	6143      	str	r3, [r0, #20]
}
 8001974:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001976:	2670      	movs	r6, #112	@ 0x70
 8001978:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 800197a:	684e      	ldr	r6, [r1, #4]
 800197c:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800197e:	4e13      	ldr	r6, [pc, #76]	@ (80019cc <TIM_Base_SetConfig+0x90>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001980:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001982:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001984:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001986:	2180      	movs	r1, #128	@ 0x80
 8001988:	438b      	bics	r3, r1
 800198a:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 800198c:	6005      	str	r5, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800198e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001990:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001992:	e7ed      	b.n	8001970 <TIM_Base_SetConfig+0x34>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001994:	2670      	movs	r6, #112	@ 0x70
 8001996:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8001998:	684e      	ldr	r6, [r1, #4]
 800199a:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800199c:	4e0b      	ldr	r6, [pc, #44]	@ (80019cc <TIM_Base_SetConfig+0x90>)
 800199e:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019a0:	68ce      	ldr	r6, [r1, #12]
 80019a2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019a4:	2680      	movs	r6, #128	@ 0x80
 80019a6:	43b3      	bics	r3, r6
 80019a8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80019aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019ac:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80019ae:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80019b0:	690b      	ldr	r3, [r1, #16]
 80019b2:	6303      	str	r3, [r0, #48]	@ 0x30
 80019b4:	e7dc      	b.n	8001970 <TIM_Base_SetConfig+0x34>
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40002000 	.word	0x40002000
 80019c4:	40014400 	.word	0x40014400
 80019c8:	40014800 	.word	0x40014800
 80019cc:	fffffcff 	.word	0xfffffcff

080019d0 <HAL_TIM_Base_Init>:
{
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80019d4:	d02a      	beq.n	8001a2c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019d6:	233d      	movs	r3, #61	@ 0x3d
 80019d8:	5cc3      	ldrb	r3, [r0, r3]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	2302      	movs	r3, #2
 80019e2:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e4:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80019e6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e8:	c901      	ldmia	r1!, {r0}
 80019ea:	f7ff ffa7 	bl	800193c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ee:	2301      	movs	r3, #1
 80019f0:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 80019f2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f6:	3a0a      	subs	r2, #10
 80019f8:	54a3      	strb	r3, [r4, r2]
 80019fa:	3201      	adds	r2, #1
 80019fc:	54a3      	strb	r3, [r4, r2]
 80019fe:	3201      	adds	r2, #1
 8001a00:	54a3      	strb	r3, [r4, r2]
 8001a02:	3201      	adds	r2, #1
 8001a04:	54a3      	strb	r3, [r4, r2]
 8001a06:	3201      	adds	r2, #1
 8001a08:	54a3      	strb	r3, [r4, r2]
 8001a0a:	3201      	adds	r2, #1
 8001a0c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a0e:	3201      	adds	r2, #1
 8001a10:	54a3      	strb	r3, [r4, r2]
 8001a12:	3201      	adds	r2, #1
 8001a14:	54a3      	strb	r3, [r4, r2]
 8001a16:	3201      	adds	r2, #1
 8001a18:	54a3      	strb	r3, [r4, r2]
 8001a1a:	3201      	adds	r2, #1
 8001a1c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001a1e:	5563      	strb	r3, [r4, r5]
}
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a22:	333c      	adds	r3, #60	@ 0x3c
 8001a24:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001a26:	f7fe fd83 	bl	8000530 <HAL_TIM_Base_MspInit>
 8001a2a:	e7d9      	b.n	80019e0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	e7f7      	b.n	8001a20 <HAL_TIM_Base_Init+0x50>

08001a30 <HAL_TIM_PWM_Init>:
{
 8001a30:	b570      	push	{r4, r5, r6, lr}
 8001a32:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001a34:	d02a      	beq.n	8001a8c <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a36:	233d      	movs	r3, #61	@ 0x3d
 8001a38:	5cc3      	ldrb	r3, [r0, r3]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a40:	2302      	movs	r3, #2
 8001a42:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a44:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8001a46:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a48:	c901      	ldmia	r1!, {r0}
 8001a4a:	f7ff ff77 	bl	800193c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8001a52:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a54:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a56:	3a0a      	subs	r2, #10
 8001a58:	54a3      	strb	r3, [r4, r2]
 8001a5a:	3201      	adds	r2, #1
 8001a5c:	54a3      	strb	r3, [r4, r2]
 8001a5e:	3201      	adds	r2, #1
 8001a60:	54a3      	strb	r3, [r4, r2]
 8001a62:	3201      	adds	r2, #1
 8001a64:	54a3      	strb	r3, [r4, r2]
 8001a66:	3201      	adds	r2, #1
 8001a68:	54a3      	strb	r3, [r4, r2]
 8001a6a:	3201      	adds	r2, #1
 8001a6c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6e:	3201      	adds	r2, #1
 8001a70:	54a3      	strb	r3, [r4, r2]
 8001a72:	3201      	adds	r2, #1
 8001a74:	54a3      	strb	r3, [r4, r2]
 8001a76:	3201      	adds	r2, #1
 8001a78:	54a3      	strb	r3, [r4, r2]
 8001a7a:	3201      	adds	r2, #1
 8001a7c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001a7e:	5563      	strb	r3, [r4, r5]
}
 8001a80:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a82:	333c      	adds	r3, #60	@ 0x3c
 8001a84:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8001a86:	f7ff fdd7 	bl	8001638 <HAL_TIM_PWM_MspInit>
 8001a8a:	e7d9      	b.n	8001a40 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	e7f7      	b.n	8001a80 <HAL_TIM_PWM_Init+0x50>

08001a90 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a90:	2210      	movs	r2, #16
{
 8001a92:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8001a94:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a96:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a98:	4d16      	ldr	r5, [pc, #88]	@ (8001af4 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001a9e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001aa0:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001aa2:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001aa4:	680d      	ldr	r5, [r1, #0]
 8001aa6:	022d      	lsls	r5, r5, #8
 8001aa8:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8001aaa:	2220      	movs	r2, #32
 8001aac:	4394      	bics	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001aae:	688a      	ldr	r2, [r1, #8]
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ab4:	4c10      	ldr	r4, [pc, #64]	@ (8001af8 <TIM_OC2_SetConfig+0x68>)
 8001ab6:	42a0      	cmp	r0, r4
 8001ab8:	d012      	beq.n	8001ae0 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001aba:	4c10      	ldr	r4, [pc, #64]	@ (8001afc <TIM_OC2_SetConfig+0x6c>)
 8001abc:	42a0      	cmp	r0, r4
 8001abe:	d002      	beq.n	8001ac6 <TIM_OC2_SetConfig+0x36>
 8001ac0:	4c0f      	ldr	r4, [pc, #60]	@ (8001b00 <TIM_OC2_SetConfig+0x70>)
 8001ac2:	42a0      	cmp	r0, r4
 8001ac4:	d106      	bne.n	8001ad4 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ac6:	4c0f      	ldr	r4, [pc, #60]	@ (8001b04 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ac8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001aca:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001acc:	698b      	ldr	r3, [r1, #24]
 8001ace:	4333      	orrs	r3, r6
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8001ad4:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001ad6:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ad8:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001ada:	6383      	str	r3, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001adc:	6202      	str	r2, [r0, #32]
}
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ae0:	2480      	movs	r4, #128	@ 0x80
 8001ae2:	43a2      	bics	r2, r4
 8001ae4:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ae6:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ae8:	3c40      	subs	r4, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001aee:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001af0:	e7e9      	b.n	8001ac6 <TIM_OC2_SetConfig+0x36>
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	feff8cff 	.word	0xfeff8cff
 8001af8:	40012c00 	.word	0x40012c00
 8001afc:	40014400 	.word	0x40014400
 8001b00:	40014800 	.word	0x40014800
 8001b04:	fffff3ff 	.word	0xfffff3ff

08001b08 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8001b08:	233c      	movs	r3, #60	@ 0x3c
{
 8001b0a:	b570      	push	{r4, r5, r6, lr}
 8001b0c:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8001b0e:	5cc1      	ldrb	r1, [r0, r3]
{
 8001b10:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001b12:	2901      	cmp	r1, #1
 8001b14:	d100      	bne.n	8001b18 <HAL_TIM_PWM_ConfigChannel+0x10>
 8001b16:	e084      	b.n	8001c22 <HAL_TIM_PWM_ConfigChannel+0x11a>
 8001b18:	2101      	movs	r1, #1
 8001b1a:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8001b1c:	2a14      	cmp	r2, #20
 8001b1e:	d803      	bhi.n	8001b28 <HAL_TIM_PWM_ConfigChannel+0x20>
 8001b20:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <HAL_TIM_PWM_ConfigChannel+0x120>)
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	589b      	ldr	r3, [r3, r2]
 8001b26:	469f      	mov	pc, r3
 8001b28:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001b2a:	233c      	movs	r3, #60	@ 0x3c
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	54e2      	strb	r2, [r4, r3]
}
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b32:	6806      	ldr	r6, [r0, #0]
 8001b34:	0029      	movs	r1, r5
 8001b36:	0030      	movs	r0, r6
 8001b38:	f7ff fc52 	bl	80013e0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4313      	orrs	r3, r2
 8001b44:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b46:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8001b48:	4a38      	ldr	r2, [pc, #224]	@ (8001c2c <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8001b4a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b50:	692b      	ldr	r3, [r5, #16]
 8001b52:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	4313      	orrs	r3, r2
 8001b58:	6573      	str	r3, [r6, #84]	@ 0x54
      break;
 8001b5a:	e7e6      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b5c:	6806      	ldr	r6, [r0, #0]
 8001b5e:	0029      	movs	r1, r5
 8001b60:	0030      	movs	r0, r6
 8001b62:	f7ff fb5f 	bl	8001224 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b66:	2208      	movs	r2, #8
 8001b68:	69b3      	ldr	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b70:	69b3      	ldr	r3, [r6, #24]
 8001b72:	3a04      	subs	r2, #4
 8001b74:	4393      	bics	r3, r2
 8001b76:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b78:	69b3      	ldr	r3, [r6, #24]
 8001b7a:	692a      	ldr	r2, [r5, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61b3      	str	r3, [r6, #24]
      break;
 8001b80:	e7d3      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b82:	6806      	ldr	r6, [r0, #0]
 8001b84:	0029      	movs	r1, r5
 8001b86:	0030      	movs	r0, r6
 8001b88:	f7ff ff82 	bl	8001a90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	69b2      	ldr	r2, [r6, #24]
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b96:	69b3      	ldr	r3, [r6, #24]
 8001b98:	4a24      	ldr	r2, [pc, #144]	@ (8001c2c <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8001b9a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ba0:	692b      	ldr	r3, [r5, #16]
 8001ba2:	69b2      	ldr	r2, [r6, #24]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61b3      	str	r3, [r6, #24]
      break;
 8001baa:	e7be      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bac:	6806      	ldr	r6, [r0, #0]
 8001bae:	0029      	movs	r1, r5
 8001bb0:	0030      	movs	r0, r6
 8001bb2:	f7ff fb6d 	bl	8001290 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	69f3      	ldr	r3, [r6, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bc0:	69f3      	ldr	r3, [r6, #28]
 8001bc2:	3a04      	subs	r2, #4
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bc8:	69f3      	ldr	r3, [r6, #28]
 8001bca:	692a      	ldr	r2, [r5, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61f3      	str	r3, [r6, #28]
      break;
 8001bd0:	e7ab      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bd2:	6806      	ldr	r6, [r0, #0]
 8001bd4:	0029      	movs	r1, r5
 8001bd6:	0030      	movs	r0, r6
 8001bd8:	f7ff fb9c 	bl	8001314 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	69f2      	ldr	r2, [r6, #28]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001be6:	69f3      	ldr	r3, [r6, #28]
 8001be8:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8001bea:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bec:	4013      	ands	r3, r2
 8001bee:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bf0:	692b      	ldr	r3, [r5, #16]
 8001bf2:	69f2      	ldr	r2, [r6, #28]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61f3      	str	r3, [r6, #28]
      break;
 8001bfa:	e796      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001bfc:	6806      	ldr	r6, [r0, #0]
 8001bfe:	0029      	movs	r1, r5
 8001c00:	0030      	movs	r0, r6
 8001c02:	f7ff fbbb 	bl	800137c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001c06:	2208      	movs	r2, #8
 8001c08:	6d73      	ldr	r3, [r6, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001c0a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001c10:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8001c12:	3a04      	subs	r2, #4
 8001c14:	4393      	bics	r3, r2
 8001c16:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001c18:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8001c1a:	692a      	ldr	r2, [r5, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	6573      	str	r3, [r6, #84]	@ 0x54
      break;
 8001c20:	e783      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x22>
  __HAL_LOCK(htim);
 8001c22:	2002      	movs	r0, #2
 8001c24:	e784      	b.n	8001b30 <HAL_TIM_PWM_ConfigChannel+0x28>
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	08001e4c 	.word	0x08001e4c
 8001c2c:	fffffbff 	.word	0xfffffbff

08001c30 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c30:	233c      	movs	r3, #60	@ 0x3c
{
 8001c32:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001c34:	5cc3      	ldrb	r3, [r0, r3]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d026      	beq.n	8001c88 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3a:	233d      	movs	r3, #61	@ 0x3d
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c40:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c42:	4d12      	ldr	r5, [pc, #72]	@ (8001c8c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 8001c44:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c46:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001c48:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c4a:	42aa      	cmp	r2, r5
 8001c4c:	d00e      	beq.n	8001c6c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c4e:	2570      	movs	r5, #112	@ 0x70
 8001c50:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c52:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c54:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d00f      	beq.n	8001c7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	233d      	movs	r3, #61	@ 0x3d
 8001c5e:	2201      	movs	r2, #1
 8001c60:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8001c62:	2200      	movs	r2, #0
 8001c64:	3b01      	subs	r3, #1
 8001c66:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8001c68:	2000      	movs	r0, #0
}
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001c6c:	4d09      	ldr	r5, [pc, #36]	@ (8001c94 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001c6e:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001c70:	684d      	ldr	r5, [r1, #4]
 8001c72:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c74:	2570      	movs	r5, #112	@ 0x70
 8001c76:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c78:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 8001c7a:	6053      	str	r3, [r2, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	439c      	bics	r4, r3
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c80:	688b      	ldr	r3, [r1, #8]
 8001c82:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8001c84:	6094      	str	r4, [r2, #8]
 8001c86:	e7e9      	b.n	8001c5c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8001c88:	2002      	movs	r0, #2
 8001c8a:	e7ee      	b.n	8001c6a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40000400 	.word	0x40000400
 8001c94:	ff0fffff 	.word	0xff0fffff

08001c98 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c98:	233c      	movs	r3, #60	@ 0x3c
{
 8001c9a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001c9c:	5cc3      	ldrb	r3, [r0, r3]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d03d      	beq.n	8001d1e <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001ca2:	4a20      	ldr	r2, [pc, #128]	@ (8001d24 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8001ca4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8001ca6:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001ca8:	4013      	ands	r3, r2
 8001caa:	688a      	ldr	r2, [r1, #8]
 8001cac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001cae:	4a1e      	ldr	r2, [pc, #120]	@ (8001d28 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	684a      	ldr	r2, [r1, #4]
 8001cb4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d2c <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	680a      	ldr	r2, [r1, #0]
 8001cbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	690a      	ldr	r2, [r1, #16]
 8001cc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d34 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	694a      	ldr	r2, [r1, #20]
 8001ccc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001cce:	4a1a      	ldr	r2, [pc, #104]	@ (8001d38 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001cd4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8001cd6:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	698a      	ldr	r2, [r1, #24]
 8001cdc:	0412      	lsls	r2, r2, #16
 8001cde:	4313      	orrs	r3, r2
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8001ce0:	4a17      	ldr	r2, [pc, #92]	@ (8001d40 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8001ce2:	4294      	cmp	r4, r2
 8001ce4:	d005      	beq.n	8001cf2 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001ce6:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	233c      	movs	r3, #60	@ 0x3c
 8001cec:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8001cee:	2000      	movs	r0, #0
}
 8001cf0:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8001cf2:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	69ca      	ldr	r2, [r1, #28]
 8001cf8:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8001cfa:	4a13      	ldr	r2, [pc, #76]	@ (8001d48 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8001d00:	0512      	lsls	r2, r2, #20
 8001d02:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001d04:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8001d06:	401a      	ands	r2, r3
 8001d08:	6a0b      	ldr	r3, [r1, #32]
 8001d0a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8001d0e:	401a      	ands	r2, r3
 8001d10:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8001d12:	431a      	orrs	r2, r3
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8001d16:	401a      	ands	r2, r3
 8001d18:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	e7e3      	b.n	8001ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
  __HAL_LOCK(htim);
 8001d1e:	2002      	movs	r0, #2
 8001d20:	e7e6      	b.n	8001cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	fffffcff 	.word	0xfffffcff
 8001d28:	fffffbff 	.word	0xfffffbff
 8001d2c:	fffff7ff 	.word	0xfffff7ff
 8001d30:	ffffefff 	.word	0xffffefff
 8001d34:	ffffdfff 	.word	0xffffdfff
 8001d38:	ffffbfff 	.word	0xffffbfff
 8001d3c:	fff0ffff 	.word	0xfff0ffff
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	efffffff 	.word	0xefffffff
 8001d48:	ff0fffff 	.word	0xff0fffff
 8001d4c:	feffffff 	.word	0xfeffffff
 8001d50:	fdffffff 	.word	0xfdffffff
 8001d54:	dfffffff 	.word	0xdfffffff

08001d58 <memset>:
 8001d58:	0003      	movs	r3, r0
 8001d5a:	1882      	adds	r2, r0, r2
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <memset+0xa>
 8001d60:	4770      	bx	lr
 8001d62:	7019      	strb	r1, [r3, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	e7f9      	b.n	8001d5c <memset+0x4>

08001d68 <__libc_init_array>:
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	2600      	movs	r6, #0
 8001d6c:	4c0c      	ldr	r4, [pc, #48]	@ (8001da0 <__libc_init_array+0x38>)
 8001d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8001da4 <__libc_init_array+0x3c>)
 8001d70:	1b64      	subs	r4, r4, r5
 8001d72:	10a4      	asrs	r4, r4, #2
 8001d74:	42a6      	cmp	r6, r4
 8001d76:	d109      	bne.n	8001d8c <__libc_init_array+0x24>
 8001d78:	2600      	movs	r6, #0
 8001d7a:	f000 f819 	bl	8001db0 <_init>
 8001d7e:	4c0a      	ldr	r4, [pc, #40]	@ (8001da8 <__libc_init_array+0x40>)
 8001d80:	4d0a      	ldr	r5, [pc, #40]	@ (8001dac <__libc_init_array+0x44>)
 8001d82:	1b64      	subs	r4, r4, r5
 8001d84:	10a4      	asrs	r4, r4, #2
 8001d86:	42a6      	cmp	r6, r4
 8001d88:	d105      	bne.n	8001d96 <__libc_init_array+0x2e>
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
 8001d8c:	00b3      	lsls	r3, r6, #2
 8001d8e:	58eb      	ldr	r3, [r5, r3]
 8001d90:	4798      	blx	r3
 8001d92:	3601      	adds	r6, #1
 8001d94:	e7ee      	b.n	8001d74 <__libc_init_array+0xc>
 8001d96:	00b3      	lsls	r3, r6, #2
 8001d98:	58eb      	ldr	r3, [r5, r3]
 8001d9a:	4798      	blx	r3
 8001d9c:	3601      	adds	r6, #1
 8001d9e:	e7f2      	b.n	8001d86 <__libc_init_array+0x1e>
 8001da0:	08001ea0 	.word	0x08001ea0
 8001da4:	08001ea0 	.word	0x08001ea0
 8001da8:	08001ea4 	.word	0x08001ea4
 8001dac:	08001ea0 	.word	0x08001ea0

08001db0 <_init>:
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001db6:	bc08      	pop	{r3}
 8001db8:	469e      	mov	lr, r3
 8001dba:	4770      	bx	lr

08001dbc <_fini>:
 8001dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc2:	bc08      	pop	{r3}
 8001dc4:	469e      	mov	lr, r3
 8001dc6:	4770      	bx	lr
