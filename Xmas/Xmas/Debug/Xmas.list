
Xmas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002adc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002b9c  08002b9c  00003b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c90  08002c90  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c90  08002c90  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c90  08002c90  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c90  08002c90  00003c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c98  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08002ca4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002ca4  00004120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009103  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001863  00000000  00000000  0000d137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0000e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e6  00000000  00000000  0000f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000123df  00000000  00000000  0000fbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b562  00000000  00000000  00021f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007533d  00000000  00000000  0002d4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a282c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000247c  00000000  00000000  000a2870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a4cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b84 	.word	0x08002b84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002b84 	.word	0x08002b84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b09f      	sub	sp, #124	@ 0x7c
 8000224:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fbac 	bl	8000982 <HAL_Init>

  /* USER CODE BEGIN Init */
 // uint32_t melody_tone[] = {800, 956, 758};
 // uint32_t melody_dur[] = {1000, 1300, 1600};
  HAL_TIM_PWM_DeInit(&htim1);
 800022a:	4b1a      	ldr	r3, [pc, #104]	@ (8000294 <main+0x74>)
 800022c:	0018      	movs	r0, r3
 800022e:	f001 fd8d 	bl	8001d4c <HAL_TIM_PWM_DeInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f839 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f9e1 	bl	80005fc <MX_GPIO_Init>
  MX_DMA_Init();
 800023a:	f000 f9c1 	bl	80005c0 <MX_DMA_Init>
  MX_TIM3_Init();
 800023e:	f000 f941 	bl	80004c4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000242:	f000 f875 	bl	8000330 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //melody1 is notes of jingle_bells melody  {E4, E4, E4, E4, E4, E4, E4, G4, C4 , D4 , E4, F4, F4, F4, F4, F4, E4, E4, E4, D4, D4, E4, D4, G4}
  uint16_t melody1[] = {329, 329, 329, 329, 329, 329, 329, 392, 261, 293, 329, 349, 349, 349, 349, 349, 329, 329, 329, 293, 293, 329, 293, 392};
 8000246:	2334      	movs	r3, #52	@ 0x34
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	4a13      	ldr	r2, [pc, #76]	@ (8000298 <main+0x78>)
 800024c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024e:	c313      	stmia	r3!, {r0, r1, r4}
 8000250:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000252:	c313      	stmia	r3!, {r0, r1, r4}
 8000254:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000256:	c313      	stmia	r3!, {r0, r1, r4}
 8000258:	ca13      	ldmia	r2!, {r0, r1, r4}
 800025a:	c313      	stmia	r3!, {r0, r1, r4}

  //duration of melodies
  uint16_t duration_melody[] = {250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4a0f      	ldr	r2, [pc, #60]	@ (800029c <main+0x7c>)
 8000260:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000262:	c313      	stmia	r3!, {r0, r1, r4}
 8000264:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000266:	c313      	stmia	r3!, {r0, r1, r4}
 8000268:	ca13      	ldmia	r2!, {r0, r1, r4}
 800026a:	c313      	stmia	r3!, {r0, r1, r4}
 800026c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800026e:	c313      	stmia	r3!, {r0, r1, r4}

  uint16_t brmelody = sizeof(melody1)/sizeof(uint16_t);
 8000270:	2366      	movs	r3, #102	@ 0x66
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	2218      	movs	r2, #24
 8000276:	801a      	strh	r2, [r3, #0]
	  setLEDS(leds, 1);
	  */



  begin(&htim3, &hdma_tim3_ch1, TIM_CHANNEL_1, 1, 1, 1, 5);
 8000278:	4909      	ldr	r1, [pc, #36]	@ (80002a0 <main+0x80>)
 800027a:	480a      	ldr	r0, [pc, #40]	@ (80002a4 <main+0x84>)
 800027c:	2305      	movs	r3, #5
 800027e:	9302      	str	r3, [sp, #8]
 8000280:	2301      	movs	r3, #1
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	2301      	movs	r3, #1
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2301      	movs	r3, #1
 800028a:	2200      	movs	r2, #0
 800028c:	f000 f9ec 	bl	8000668 <begin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	e7fd      	b.n	8000290 <main+0x70>
 8000294:	20000028 	.word	0x20000028
 8000298:	08002b9c 	.word	0x08002b9c
 800029c:	08002bcc 	.word	0x08002bcc
 80002a0:	200000c0 	.word	0x200000c0
 80002a4:	20000074 	.word	0x20000074

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b08d      	sub	sp, #52	@ 0x34
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2414      	movs	r4, #20
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	231c      	movs	r3, #28
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fc37 	bl	8002b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	003b      	movs	r3, r7
 80002c0:	0018      	movs	r0, r3
 80002c2:	2314      	movs	r3, #20
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f002 fc30 	bl	8002b2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2202      	movs	r2, #2
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2280      	movs	r2, #128	@ 0x80
 80002d6:	0052      	lsls	r2, r2, #1
 80002d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	2240      	movs	r2, #64	@ 0x40
 80002e4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 f94f 	bl	800158c <HAL_RCC_OscConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002f2:	f000 f9f6 	bl	80006e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	003b      	movs	r3, r7
 80002f8:	2207      	movs	r2, #7
 80002fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000308:	003b      	movs	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800030e:	003b      	movs	r3, r7
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000314:	003b      	movs	r3, r7
 8000316:	2101      	movs	r1, #1
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fb1b 	bl	8001954 <HAL_RCC_ClockConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000322:	f000 f9de 	bl	80006e2 <Error_Handler>
  }
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b00d      	add	sp, #52	@ 0x34
 800032c:	bd90      	pop	{r4, r7, pc}
	...

08000330 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09c      	sub	sp, #112	@ 0x70
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000336:	2360      	movs	r3, #96	@ 0x60
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2310      	movs	r3, #16
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f002 fbf3 	bl	8002b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000346:	2354      	movs	r3, #84	@ 0x54
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	230c      	movs	r3, #12
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f002 fbeb 	bl	8002b2c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000356:	2338      	movs	r3, #56	@ 0x38
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	0018      	movs	r0, r3
 800035c:	231c      	movs	r3, #28
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f002 fbe3 	bl	8002b2c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	0018      	movs	r0, r3
 800036a:	2334      	movs	r3, #52	@ 0x34
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f002 fbdc 	bl	8002b2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000374:	4b51      	ldr	r3, [pc, #324]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000376:	4a52      	ldr	r2, [pc, #328]	@ (80004c0 <MX_TIM1_Init+0x190>)
 8000378:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 800037a:	4b50      	ldr	r3, [pc, #320]	@ (80004bc <MX_TIM1_Init+0x18c>)
 800037c:	22e0      	movs	r2, #224	@ 0xe0
 800037e:	32ff      	adds	r2, #255	@ 0xff
 8000380:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b4e      	ldr	r3, [pc, #312]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000388:	4b4c      	ldr	r3, [pc, #304]	@ (80004bc <MX_TIM1_Init+0x18c>)
 800038a:	2232      	movs	r2, #50	@ 0x32
 800038c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038e:	4b4b      	ldr	r3, [pc, #300]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000394:	4b49      	ldr	r3, [pc, #292]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000396:	2200      	movs	r2, #0
 8000398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039a:	4b48      	ldr	r3, [pc, #288]	@ (80004bc <MX_TIM1_Init+0x18c>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003a0:	4b46      	ldr	r3, [pc, #280]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 fc22 	bl	8001bec <HAL_TIM_Base_Init>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80003ac:	f000 f999 	bl	80006e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b0:	2160      	movs	r1, #96	@ 0x60
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2280      	movs	r2, #128	@ 0x80
 80003b6:	0152      	lsls	r2, r2, #5
 80003b8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ba:	187a      	adds	r2, r7, r1
 80003bc:	4b3f      	ldr	r3, [pc, #252]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fe31 	bl	8002028 <HAL_TIM_ConfigClockSource>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80003ca:	f000 f98a 	bl	80006e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003ce:	4b3b      	ldr	r3, [pc, #236]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 fc63 	bl	8001c9c <HAL_TIM_PWM_Init>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80003da:	f000 f982 	bl	80006e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003de:	2154      	movs	r1, #84	@ 0x54
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f2:	187a      	adds	r2, r7, r1
 80003f4:	4b31      	ldr	r3, [pc, #196]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80003f6:	0011      	movs	r1, r2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 fa8f 	bl	800291c <HAL_TIMEx_MasterConfigSynchronization>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000402:	f000 f96e 	bl	80006e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000406:	2138      	movs	r1, #56	@ 0x38
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2260      	movs	r2, #96	@ 0x60
 800040c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000432:	1879      	adds	r1, r7, r1
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000436:	2200      	movs	r2, #0
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fcf5 	bl	8001e28 <HAL_TIM_PWM_ConfigChannel>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000442:	f000 f94e 	bl	80006e2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	0192      	lsls	r2, r2, #6
 800046a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2280      	movs	r2, #128	@ 0x80
 8000482:	0492      	lsls	r2, r2, #18
 8000484:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000498:	1d3a      	adds	r2, r7, #4
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <MX_TIM1_Init+0x18c>)
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f002 fa9e 	bl	80029e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80004a4:	1e03      	subs	r3, r0, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 80004a8:	f000 f91b 	bl	80006e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004ac:	4b03      	ldr	r3, [pc, #12]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 f9a4 	bl	80007fc <HAL_TIM_MspPostInit>

}
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b01c      	add	sp, #112	@ 0x70
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000028 	.word	0x20000028
 80004c0:	40012c00 	.word	0x40012c00

080004c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08e      	sub	sp, #56	@ 0x38
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ca:	2328      	movs	r3, #40	@ 0x28
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	0018      	movs	r0, r3
 80004d0:	2310      	movs	r3, #16
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f002 fb29 	bl	8002b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004da:	231c      	movs	r3, #28
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	230c      	movs	r3, #12
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f002 fb21 	bl	8002b2c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	231c      	movs	r3, #28
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f002 fb1a 	bl	8002b2c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004f8:	4b2f      	ldr	r3, [pc, #188]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 80004fa:	4a30      	ldr	r2, [pc, #192]	@ (80005bc <MX_TIM3_Init+0xf8>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 80004fe:	4b2e      	ldr	r3, [pc, #184]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000500:	220c      	movs	r2, #12
 8000502:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b2c      	ldr	r3, [pc, #176]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 800050a:	4b2b      	ldr	r3, [pc, #172]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800050c:	2231      	movs	r2, #49	@ 0x31
 800050e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000516:	4b28      	ldr	r3, [pc, #160]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800051c:	4b26      	ldr	r3, [pc, #152]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fb64 	bl	8001bec <HAL_TIM_Base_Init>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000528:	f000 f8db 	bl	80006e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052c:	2128      	movs	r1, #40	@ 0x28
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	0152      	lsls	r2, r2, #5
 8000534:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000536:	187a      	adds	r2, r7, r1
 8000538:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fd73 	bl	8002028 <HAL_TIM_ConfigClockSource>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000546:	f000 f8cc 	bl	80006e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800054a:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fba5 	bl	8001c9c <HAL_TIM_PWM_Init>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000556:	f000 f8c4 	bl	80006e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055a:	211c      	movs	r1, #28
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000568:	187a      	adds	r2, r7, r1
 800056a:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800056c:	0011      	movs	r1, r2
 800056e:	0018      	movs	r0, r3
 8000570:	f002 f9d4 	bl	800291c <HAL_TIMEx_MasterConfigSynchronization>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000578:	f000 f8b3 	bl	80006e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800057c:	003b      	movs	r3, r7
 800057e:	2260      	movs	r2, #96	@ 0x60
 8000580:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058e:	003b      	movs	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000594:	0039      	movs	r1, r7
 8000596:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000598:	2200      	movs	r2, #0
 800059a:	0018      	movs	r0, r3
 800059c:	f001 fc44 	bl	8001e28 <HAL_TIM_PWM_ConfigChannel>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80005a4:	f000 f89d 	bl	80006e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005a8:	4b03      	ldr	r3, [pc, #12]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f926 	bl	80007fc <HAL_TIM_MspPostInit>

}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b00e      	add	sp, #56	@ 0x38
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000074 	.word	0x20000074
 80005bc:	40000400 	.word	0x40000400

080005c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <MX_DMA_Init+0x38>)
 80005c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <MX_DMA_Init+0x38>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	430a      	orrs	r2, r1
 80005d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <MX_DMA_Init+0x38>)
 80005d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005d6:	2201      	movs	r2, #1
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2009      	movs	r0, #9
 80005e4:	f000 fb1a 	bl	8000c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005e8:	2009      	movs	r0, #9
 80005ea:	f000 fb2c 	bl	8000c46 <HAL_NVIC_EnableIRQ>

}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b002      	add	sp, #8
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	2314      	movs	r3, #20
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f002 fa8e 	bl	8002b2c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_GPIO_Init+0x68>)
 8000612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_GPIO_Init+0x68>)
 8000616:	2101      	movs	r1, #1
 8000618:	430a      	orrs	r2, r1
 800061a:	635a      	str	r2, [r3, #52]	@ 0x34
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_GPIO_Init+0x68>)
 800061e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000620:	2201      	movs	r2, #1
 8000622:	4013      	ands	r3, r2
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 8000628:	23a0      	movs	r3, #160	@ 0xa0
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	@ 0x80
 8000630:	0018      	movs	r0, r3
 8000632:	f000 ff8d 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PERIPH_SUPLLY_Pin */
  GPIO_InitStruct.Pin = PERIPH_SUPLLY_Pin;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2211      	movs	r2, #17
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2201      	movs	r2, #1
 8000646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 800064e:	1d3a      	adds	r2, r7, #4
 8000650:	23a0      	movs	r3, #160	@ 0xa0
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fe10 	bl	800127c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b006      	add	sp, #24
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <begin>:




void begin(TIM_HandleTypeDef *_htim, DMA_HandleTypeDef *_hdmaPtr,  uint32_t channel, uint32_t *num_of_leds, uint32_t pause_Pulse, uint32_t work_Pulse, uint32_t prescaler)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b09e      	sub	sp, #120	@ 0x78
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	603b      	str	r3, [r7, #0]


	uint32_t buffer[25];
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2205      	movs	r2, #5
 800067c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(_htim, 9);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2209      	movs	r2, #9
 8000684:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2209      	movs	r2, #9
 800068a:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_ENABLE_DMA(_htim, _hdmaPtr);
	__HAL_TIM_ENABLE_DMA(_htim, channel);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68d9      	ldr	r1, [r3, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	430a      	orrs	r2, r1
 800069a:	60da      	str	r2, [r3, #12]

	for(int i = 0; i < 25 ; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	677b      	str	r3, [r7, #116]	@ 0x74
 80006a0:	e008      	b.n	80006b4 <begin+0x4c>
	{

	        buffer[i] = 6;
 80006a2:	2310      	movs	r3, #16
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	2106      	movs	r1, #6
 80006ac:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 25 ; i++)
 80006ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006b0:	3301      	adds	r3, #1
 80006b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80006b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006b6:	2b18      	cmp	r3, #24
 80006b8:	ddf3      	ble.n	80006a2 <begin+0x3a>
	}



	//HAL_TIM_PWM_Start_DMA(_htim, channel, buffer, 25);
	HAL_DMA_Start(_hdmaPtr, channel, (uint32_t)buffer, 25);
 80006ba:	2310      	movs	r3, #16
 80006bc:	18fa      	adds	r2, r7, r3
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	68b8      	ldr	r0, [r7, #8]
 80006c2:	2319      	movs	r3, #25
 80006c4:	f000 fb66 	bl	8000d94 <HAL_DMA_Start>
	HAL_Delay(100);
 80006c8:	2064      	movs	r0, #100	@ 0x64
 80006ca:	f000 f9d7 	bl	8000a7c <HAL_Delay>
	HAL_DMA_PollForTransfer(_hdmaPtr, HAL_DMA_XFER_CPLT_CB_ID , 100);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	2264      	movs	r2, #100	@ 0x64
 80006d2:	2100      	movs	r1, #0
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fbab 	bl	8000e30 <HAL_DMA_PollForTransfer>
	//}


//	__HAL_TIM_ENABLE_DMA(_htim, channel);

}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b01e      	add	sp, #120	@ 0x78
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e6:	b672      	cpsid	i
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	e7fd      	b.n	80006ea <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <HAL_MspInit+0x44>)
 80006f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <HAL_MspInit+0x44>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	641a      	str	r2, [r3, #64]	@ 0x40
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <HAL_MspInit+0x44>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <HAL_MspInit+0x44>)
 8000710:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <HAL_MspInit+0x44>)
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	0549      	lsls	r1, r1, #21
 8000718:	430a      	orrs	r2, r1
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800071c:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <HAL_MspInit+0x44>)
 800071e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	055b      	lsls	r3, r3, #21
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a28      	ldr	r2, [pc, #160]	@ (80007e8 <HAL_TIM_Base_MspInit+0xb0>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d10e      	bne.n	8000768 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <HAL_TIM_Base_MspInit+0xb4>)
 800074c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800074e:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <HAL_TIM_Base_MspInit+0xb4>)
 8000750:	2180      	movs	r1, #128	@ 0x80
 8000752:	0109      	lsls	r1, r1, #4
 8000754:	430a      	orrs	r2, r1
 8000756:	641a      	str	r2, [r3, #64]	@ 0x40
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <HAL_TIM_Base_MspInit+0xb4>)
 800075a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	4013      	ands	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000766:	e03b      	b.n	80007e0 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a20      	ldr	r2, [pc, #128]	@ (80007f0 <HAL_TIM_Base_MspInit+0xb8>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d136      	bne.n	80007e0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000772:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <HAL_TIM_Base_MspInit+0xb4>)
 8000774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000776:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <HAL_TIM_Base_MspInit+0xb4>)
 8000778:	2102      	movs	r1, #2
 800077a:	430a      	orrs	r2, r1
 800077c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <HAL_TIM_Base_MspInit+0xb4>)
 8000780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000782:	2202      	movs	r2, #2
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 800078c:	4a1a      	ldr	r2, [pc, #104]	@ (80007f8 <HAL_TIM_Base_MspInit+0xc0>)
 800078e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 8000792:	2220      	movs	r2, #32
 8000794:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 8000798:	2210      	movs	r2, #16
 800079a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007b0:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 80007b2:	2280      	movs	r2, #128	@ 0x80
 80007b4:	00d2      	lsls	r2, r2, #3
 80007b6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80007c4:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fa5a 	bl	8000c80 <HAL_DMA_Init>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <HAL_TIM_Base_MspInit+0x9c>
      Error_Handler();
 80007d0:	f7ff ff87 	bl	80006e2 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 80007d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_TIM_Base_MspInit+0xbc>)
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40012c00 	.word	0x40012c00
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40000400 	.word	0x40000400
 80007f4:	200000c0 	.word	0x200000c0
 80007f8:	40020008 	.word	0x40020008

080007fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b08b      	sub	sp, #44	@ 0x2c
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	2414      	movs	r4, #20
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	2314      	movs	r3, #20
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f002 f98c 	bl	8002b2c <memset>
  if(htim->Instance==TIM1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a29      	ldr	r2, [pc, #164]	@ (80008c0 <HAL_TIM_MspPostInit+0xc4>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d123      	bne.n	8000866 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <HAL_TIM_MspPostInit+0xc8>)
 8000820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000822:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <HAL_TIM_MspPostInit+0xc8>)
 8000824:	2101      	movs	r1, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	635a      	str	r2, [r3, #52]	@ 0x34
 800082a:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <HAL_TIM_MspPostInit+0xc8>)
 800082c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000836:	0021      	movs	r1, r4
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2220      	movs	r2, #32
 800083c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2202      	movs	r2, #2
 8000842:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2202      	movs	r2, #2
 800084e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2205      	movs	r2, #5
 8000854:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	187a      	adds	r2, r7, r1
 8000858:	23a0      	movs	r3, #160	@ 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fd0c 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000864:	e027      	b.n	80008b6 <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <HAL_TIM_MspPostInit+0xcc>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d122      	bne.n	80008b6 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <HAL_TIM_MspPostInit+0xc8>)
 8000872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <HAL_TIM_MspPostInit+0xc8>)
 8000876:	2101      	movs	r1, #1
 8000878:	430a      	orrs	r2, r1
 800087a:	635a      	str	r2, [r3, #52]	@ 0x34
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_TIM_MspPostInit+0xc8>)
 800087e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000880:	2201      	movs	r2, #1
 8000882:	4013      	ands	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000888:	2114      	movs	r1, #20
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2240      	movs	r2, #64	@ 0x40
 800088e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2202      	movs	r2, #2
 8000894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2202      	movs	r2, #2
 80008a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2201      	movs	r2, #1
 80008a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	23a0      	movs	r3, #160	@ 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	0011      	movs	r1, r2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fce3 	bl	800127c <HAL_GPIO_Init>
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b00b      	add	sp, #44	@ 0x2c
 80008bc:	bd90      	pop	{r4, r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	40012c00 	.word	0x40012c00
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40000400 	.word	0x40000400

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	e7fd      	b.n	80008d0 <NMI_Handler+0x4>

080008d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	e7fd      	b.n	80008d8 <HardFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 f8a6 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8000904:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <DMA1_Channel1_IRQHandler+0x14>)
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fb76 	bl	8000ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	200000c0 	.word	0x200000c0

08000918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800091c:	4b03      	ldr	r3, [pc, #12]	@ (800092c <SystemInit+0x14>)
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	0512      	lsls	r2, r2, #20
 8000922:	609a      	str	r2, [r3, #8]
#endif
}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <LoopForever+0x2>)
 8000932:	4685      	mov	sp, r0
 8000934:	f7ff fff0 	bl	8000918 <SystemInit>
 8000938:	2100      	movs	r1, #0
 800093a:	e003      	b.n	8000944 <LoopCopyDataInit>

0800093c <CopyDataInit>:
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <LoopForever+0x6>)
 800093e:	585b      	ldr	r3, [r3, r1]
 8000940:	5043      	str	r3, [r0, r1]
 8000942:	3104      	adds	r1, #4

08000944 <LoopCopyDataInit>:
 8000944:	480a      	ldr	r0, [pc, #40]	@ (8000970 <LoopForever+0xa>)
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <LoopForever+0xe>)
 8000948:	1842      	adds	r2, r0, r1
 800094a:	429a      	cmp	r2, r3
 800094c:	d3f6      	bcc.n	800093c <CopyDataInit>
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <LoopForever+0x12>)
 8000950:	e002      	b.n	8000958 <LoopFillZerobss>

08000952 <FillZerobss>:
 8000952:	2300      	movs	r3, #0
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	3204      	adds	r2, #4

08000958 <LoopFillZerobss>:
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <LoopForever+0x16>)
 800095a:	429a      	cmp	r2, r3
 800095c:	d3f9      	bcc.n	8000952 <FillZerobss>
 800095e:	f002 f8ed 	bl	8002b3c <__libc_init_array>
 8000962:	f7ff fc5d 	bl	8000220 <main>

08000966 <LoopForever>:
 8000966:	e7fe      	b.n	8000966 <LoopForever>
 8000968:	20001800 	.word	0x20001800
 800096c:	08002c98 	.word	0x08002c98
 8000970:	20000000 	.word	0x20000000
 8000974:	2000000c 	.word	0x2000000c
 8000978:	2000000c 	.word	0x2000000c
 800097c:	20000120 	.word	0x20000120

08000980 <ADC1_IRQHandler>:
 8000980:	e7fe      	b.n	8000980 <ADC1_IRQHandler>

08000982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098e:	2003      	movs	r0, #3
 8000990:	f000 f80e 	bl	80009b0 <HAL_InitTick>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d003      	beq.n	80009a0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	e001      	b.n	80009a4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a0:	f7ff fea6 	bl	80006f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b8:	230f      	movs	r3, #15
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <HAL_InitTick+0x88>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d02b      	beq.n	8000a20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80009c8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <HAL_InitTick+0x8c>)
 80009ca:	681c      	ldr	r4, [r3, #0]
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <HAL_InitTick+0x88>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	0019      	movs	r1, r3
 80009d2:	23fa      	movs	r3, #250	@ 0xfa
 80009d4:	0098      	lsls	r0, r3, #2
 80009d6:	f7ff fb97 	bl	8000108 <__udivsi3>
 80009da:	0003      	movs	r3, r0
 80009dc:	0019      	movs	r1, r3
 80009de:	0020      	movs	r0, r4
 80009e0:	f7ff fb92 	bl	8000108 <__udivsi3>
 80009e4:	0003      	movs	r3, r0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 f93d 	bl	8000c66 <HAL_SYSTICK_Config>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d112      	bne.n	8000a16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d80a      	bhi.n	8000a0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	2301      	movs	r3, #1
 80009fa:	425b      	negs	r3, r3
 80009fc:	2200      	movs	r2, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 f90c 	bl	8000c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <HAL_InitTick+0x90>)
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	e00d      	b.n	8000a28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	e008      	b.n	8000a28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a16:	230f      	movs	r3, #15
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	e003      	b.n	8000a28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a20:	230f      	movs	r3, #15
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a28:	230f      	movs	r3, #15
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	781b      	ldrb	r3, [r3, #0]
}
 8000a2e:	0018      	movs	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b005      	add	sp, #20
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <HAL_IncTick+0x1c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	18d2      	adds	r2, r2, r3
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	20000008 	.word	0x20000008
 8000a64:	2000011c 	.word	0x2000011c

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b02      	ldr	r3, [pc, #8]	@ (8000a78 <HAL_GetTick+0x10>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	0018      	movs	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	2000011c 	.word	0x2000011c

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff fff0 	bl	8000a68 <HAL_GetTick>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	f7ff ffe0 	bl	8000a68 <HAL_GetTick>
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b004      	add	sp, #16
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	0002      	movs	r2, r0
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ad6:	d809      	bhi.n	8000aec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	001a      	movs	r2, r3
 8000ade:	231f      	movs	r3, #31
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <__NVIC_EnableIRQ+0x30>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4091      	lsls	r1, r2
 8000ae8:	000a      	movs	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	0002      	movs	r2, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b0c:	d828      	bhi.n	8000b60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bcc <__NVIC_SetPriority+0xd4>)
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	33c0      	adds	r3, #192	@ 0xc0
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	589b      	ldr	r3, [r3, r2]
 8000b1e:	1dfa      	adds	r2, r7, #7
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	0011      	movs	r1, r2
 8000b24:	2203      	movs	r2, #3
 8000b26:	400a      	ands	r2, r1
 8000b28:	00d2      	lsls	r2, r2, #3
 8000b2a:	21ff      	movs	r1, #255	@ 0xff
 8000b2c:	4091      	lsls	r1, r2
 8000b2e:	000a      	movs	r2, r1
 8000b30:	43d2      	mvns	r2, r2
 8000b32:	401a      	ands	r2, r3
 8000b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	019b      	lsls	r3, r3, #6
 8000b3a:	22ff      	movs	r2, #255	@ 0xff
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	2303      	movs	r3, #3
 8000b46:	4003      	ands	r3, r0
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	481f      	ldr	r0, [pc, #124]	@ (8000bcc <__NVIC_SetPriority+0xd4>)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	089b      	lsrs	r3, r3, #2
 8000b56:	430a      	orrs	r2, r1
 8000b58:	33c0      	adds	r3, #192	@ 0xc0
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b5e:	e031      	b.n	8000bc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd0 <__NVIC_SetPriority+0xd8>)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	0019      	movs	r1, r3
 8000b68:	230f      	movs	r3, #15
 8000b6a:	400b      	ands	r3, r1
 8000b6c:	3b08      	subs	r3, #8
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	3306      	adds	r3, #6
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	18d3      	adds	r3, r2, r3
 8000b76:	3304      	adds	r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1dfa      	adds	r2, r7, #7
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	0011      	movs	r1, r2
 8000b80:	2203      	movs	r2, #3
 8000b82:	400a      	ands	r2, r1
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	21ff      	movs	r1, #255	@ 0xff
 8000b88:	4091      	lsls	r1, r2
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	43d2      	mvns	r2, r2
 8000b8e:	401a      	ands	r2, r3
 8000b90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	019b      	lsls	r3, r3, #6
 8000b96:	22ff      	movs	r2, #255	@ 0xff
 8000b98:	401a      	ands	r2, r3
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	4003      	ands	r3, r0
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba8:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <__NVIC_SetPriority+0xd8>)
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	001c      	movs	r4, r3
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	4023      	ands	r3, r4
 8000bb4:	3b08      	subs	r3, #8
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	3306      	adds	r3, #6
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	18c3      	adds	r3, r0, r3
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	601a      	str	r2, [r3, #0]
}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b003      	add	sp, #12
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	2380      	movs	r3, #128	@ 0x80
 8000be2:	045b      	lsls	r3, r3, #17
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d301      	bcc.n	8000bec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be8:	2301      	movs	r3, #1
 8000bea:	e010      	b.n	8000c0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bec:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <SysTick_Config+0x44>)
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff ff7c 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <SysTick_Config+0x44>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <SysTick_Config+0x44>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	0018      	movs	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b002      	add	sp, #8
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	210f      	movs	r1, #15
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	1c02      	adds	r2, r0, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ff5d 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b004      	add	sp, #16
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ff33 	bl	8000ac4 <__NVIC_EnableIRQ>
}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff ffaf 	bl	8000bd4 <SysTick_Config>
 8000c76:	0003      	movs	r3, r0
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e077      	b.n	8000d82 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a3d      	ldr	r2, [pc, #244]	@ (8000d8c <HAL_DMA_Init+0x10c>)
 8000c98:	4694      	mov	ip, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	2114      	movs	r1, #20
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fa32 	bl	8000108 <__udivsi3>
 8000ca4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000ca6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2225      	movs	r2, #37	@ 0x25
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4934      	ldr	r1, [pc, #208]	@ (8000d90 <HAL_DMA_Init+0x110>)
 8000cc0:	400a      	ands	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6819      	ldr	r1, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	431a      	orrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 fa6d 	bl	80011dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	2380      	movs	r3, #128	@ 0x80
 8000d08:	01db      	lsls	r3, r3, #7
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d102      	bne.n	8000d14 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1c:	21ff      	movs	r1, #255	@ 0xff
 8000d1e:	400a      	ands	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000d2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d011      	beq.n	8000d58 <HAL_DMA_Init+0xd8>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d80d      	bhi.n	8000d58 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 fa78 	bl	8001234 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	e008      	b.n	8000d6a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2225      	movs	r2, #37	@ 0x25
 8000d74:	2101      	movs	r1, #1
 8000d76:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2224      	movs	r2, #36	@ 0x24
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	bffdfff8 	.word	0xbffdfff8
 8000d90:	ffff800f 	.word	0xffff800f

08000d94 <HAL_DMA_Start>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000da2:	2317      	movs	r3, #23
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2224      	movs	r2, #36	@ 0x24
 8000dae:	5c9b      	ldrb	r3, [r3, r2]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d101      	bne.n	8000db8 <HAL_DMA_Start+0x24>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e036      	b.n	8000e26 <HAL_DMA_Start+0x92>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2224      	movs	r2, #36	@ 0x24
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2225      	movs	r2, #37	@ 0x25
 8000dc4:	5c9b      	ldrb	r3, [r3, r2]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d11d      	bne.n	8000e08 <HAL_DMA_Start+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2225      	movs	r2, #37	@ 0x25
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	438a      	bics	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f000 f9b3 	bl	800115c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e007      	b.n	8000e18 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2224      	movs	r2, #36	@ 0x24
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	5499      	strb	r1, [r3, r2]
    status = HAL_BUSY;
 8000e10:	2317      	movs	r3, #23
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	2202      	movs	r2, #2
 8000e16:	701a      	strb	r2, [r3, #0]
  }

  /* Process locked */
  __HAL_UNLOCK(hdma);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2224      	movs	r2, #36	@ 0x24
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	5499      	strb	r1, [r3, r2]

  return status;
 8000e20:	2317      	movs	r3, #23
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b006      	add	sp, #24
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_DMA_PollForTransfer>:
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel,
                                          uint32_t Timeout)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	230b      	movs	r3, #11
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	1c0a      	adds	r2, r1, #0
 8000e40:	701a      	strb	r2, [r3, #0]
  uint32_t temp;
  uint32_t tickstart;

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2224      	movs	r2, #36	@ 0x24
 8000e46:	2100      	movs	r1, #0
 8000e48:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2225      	movs	r2, #37	@ 0x25
 8000e4e:	5c9b      	ldrb	r3, [r3, r2]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d008      	beq.n	8000e68 <HAL_DMA_PollForTransfer+0x38>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2204      	movs	r2, #4
 8000e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2224      	movs	r2, #36	@ 0x24
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e0c1      	b.n	8000fec <HAL_DMA_PollForTransfer+0x1bc>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2220      	movs	r2, #32
 8000e70:	4013      	ands	r3, r2
 8000e72:	d005      	beq.n	8000e80 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2280      	movs	r2, #128	@ 0x80
 8000e78:	0052      	lsls	r2, r2, #1
 8000e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e0b5      	b.n	8000fec <HAL_DMA_PollForTransfer+0x1bc>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000e80:	230b      	movs	r3, #11
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d108      	bne.n	8000e9c <HAL_DMA_PollForTransfer+0x6c>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	221c      	movs	r2, #28
 8000e90:	4013      	ands	r3, r2
 8000e92:	2202      	movs	r2, #2
 8000e94:	409a      	lsls	r2, r3
 8000e96:	0013      	movs	r3, r2
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e007      	b.n	8000eac <HAL_DMA_PollForTransfer+0x7c>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex  & 0x1cU);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	221c      	movs	r2, #28
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eac:	f7ff fddc 	bl	8000a68 <HAL_GetTick>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	613b      	str	r3, [r7, #16]

  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000eb4:	e03d      	b.n	8000f32 <HAL_DMA_PollForTransfer+0x102>
  {
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff4 <HAL_DMA_PollForTransfer+0x1c4>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	211c      	movs	r1, #28
 8000ec0:	400b      	ands	r3, r1
 8000ec2:	2108      	movs	r1, #8
 8000ec4:	4099      	lsls	r1, r3
 8000ec6:	000b      	movs	r3, r1
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d017      	beq.n	8000efc <HAL_DMA_PollForTransfer+0xcc>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000ecc:	4b49      	ldr	r3, [pc, #292]	@ (8000ff4 <HAL_DMA_PollForTransfer+0x1c4>)
 8000ece:	6859      	ldr	r1, [r3, #4]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	221c      	movs	r2, #28
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2201      	movs	r2, #1
 8000eda:	409a      	lsls	r2, r3
 8000edc:	4b45      	ldr	r3, [pc, #276]	@ (8000ff4 <HAL_DMA_PollForTransfer+0x1c4>)
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2225      	movs	r2, #37	@ 0x25
 8000eec:	2101      	movs	r1, #1
 8000eee:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2224      	movs	r2, #36	@ 0x24
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e077      	b.n	8000fec <HAL_DMA_PollForTransfer+0x1bc>
    }
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	d017      	beq.n	8000f32 <HAL_DMA_PollForTransfer+0x102>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f02:	f7ff fdb1 	bl	8000a68 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d302      	bcc.n	8000f18 <HAL_DMA_PollForTransfer+0xe8>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10c      	bne.n	8000f32 <HAL_DMA_PollForTransfer+0x102>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2225      	movs	r2, #37	@ 0x25
 8000f22:	2101      	movs	r1, #1
 8000f24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2224      	movs	r2, #36	@ 0x24
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e05c      	b.n	8000fec <HAL_DMA_PollForTransfer+0x1bc>
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000f32:	4b30      	ldr	r3, [pc, #192]	@ (8000ff4 <HAL_DMA_PollForTransfer+0x1c4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d0bc      	beq.n	8000eb6 <HAL_DMA_PollForTransfer+0x86>
      }
    }
  }

  /*Check for DMAMUX Request generator (if used) overrun status */
  if (hdma->DMAmuxRequestGen != 0U)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d01b      	beq.n	8000f7c <HAL_DMA_PollForTransfer+0x14c>
  {
    /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d014      	beq.n	8000f7c <HAL_DMA_PollForTransfer+0x14c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f5c:	2180      	movs	r1, #128	@ 0x80
 8000f5e:	0049      	lsls	r1, r1, #1
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f6c:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f72:	2280      	movs	r2, #128	@ 0x80
 8000f74:	00d2      	lsls	r2, r2, #3
 8000f76:	431a      	orrs	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4013      	ands	r3, r2
 8000f88:	d00b      	beq.n	8000fa2 <HAL_DMA_PollForTransfer+0x172>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000fa2:	230b      	movs	r3, #11
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10f      	bne.n	8000fcc <HAL_DMA_PollForTransfer+0x19c>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_DMA_PollForTransfer+0x1c4>)
 8000fae:	6859      	ldr	r1, [r3, #4]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	221c      	movs	r2, #28
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2202      	movs	r2, #2
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <HAL_DMA_PollForTransfer+0x1c4>)
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	605a      	str	r2, [r3, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2225      	movs	r2, #37	@ 0x25
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	5499      	strb	r1, [r3, r2]
 8000fca:	e00a      	b.n	8000fe2 <HAL_DMA_PollForTransfer+0x1b2>
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <HAL_DMA_PollForTransfer+0x1c4>)
 8000fce:	6859      	ldr	r1, [r3, #4]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	221c      	movs	r2, #28
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2204      	movs	r2, #4
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_DMA_PollForTransfer+0x1c4>)
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2224      	movs	r2, #36	@ 0x24
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b006      	add	sp, #24
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001000:	4b55      	ldr	r3, [pc, #340]	@ (8001158 <HAL_DMA_IRQHandler+0x160>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	221c      	movs	r2, #28
 8001014:	4013      	ands	r3, r2
 8001016:	2204      	movs	r2, #4
 8001018:	409a      	lsls	r2, r3
 800101a:	0013      	movs	r3, r2
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4013      	ands	r3, r2
 8001020:	d027      	beq.n	8001072 <HAL_DMA_IRQHandler+0x7a>
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	2204      	movs	r2, #4
 8001026:	4013      	ands	r3, r2
 8001028:	d023      	beq.n	8001072 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2220      	movs	r2, #32
 8001032:	4013      	ands	r3, r2
 8001034:	d107      	bne.n	8001046 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2104      	movs	r1, #4
 8001042:	438a      	bics	r2, r1
 8001044:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001046:	4b44      	ldr	r3, [pc, #272]	@ (8001158 <HAL_DMA_IRQHandler+0x160>)
 8001048:	6859      	ldr	r1, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	221c      	movs	r2, #28
 8001050:	4013      	ands	r3, r2
 8001052:	2204      	movs	r2, #4
 8001054:	409a      	lsls	r2, r3
 8001056:	4b40      	ldr	r3, [pc, #256]	@ (8001158 <HAL_DMA_IRQHandler+0x160>)
 8001058:	430a      	orrs	r2, r1
 800105a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	2b00      	cmp	r3, #0
 8001062:	d100      	bne.n	8001066 <HAL_DMA_IRQHandler+0x6e>
 8001064:	e073      	b.n	800114e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	0010      	movs	r0, r2
 800106e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001070:	e06d      	b.n	800114e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	221c      	movs	r2, #28
 8001078:	4013      	ands	r3, r2
 800107a:	2202      	movs	r2, #2
 800107c:	409a      	lsls	r2, r3
 800107e:	0013      	movs	r3, r2
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	4013      	ands	r3, r2
 8001084:	d02e      	beq.n	80010e4 <HAL_DMA_IRQHandler+0xec>
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2202      	movs	r2, #2
 800108a:	4013      	ands	r3, r2
 800108c:	d02a      	beq.n	80010e4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2220      	movs	r2, #32
 8001096:	4013      	ands	r3, r2
 8001098:	d10b      	bne.n	80010b2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	210a      	movs	r1, #10
 80010a6:	438a      	bics	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2225      	movs	r2, #37	@ 0x25
 80010ae:	2101      	movs	r1, #1
 80010b0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80010b2:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <HAL_DMA_IRQHandler+0x160>)
 80010b4:	6859      	ldr	r1, [r3, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	221c      	movs	r2, #28
 80010bc:	4013      	ands	r3, r2
 80010be:	2202      	movs	r2, #2
 80010c0:	409a      	lsls	r2, r3
 80010c2:	4b25      	ldr	r3, [pc, #148]	@ (8001158 <HAL_DMA_IRQHandler+0x160>)
 80010c4:	430a      	orrs	r2, r1
 80010c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2224      	movs	r2, #36	@ 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d03a      	beq.n	800114e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	0010      	movs	r0, r2
 80010e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80010e2:	e034      	b.n	800114e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	221c      	movs	r2, #28
 80010ea:	4013      	ands	r3, r2
 80010ec:	2208      	movs	r2, #8
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	d02b      	beq.n	8001150 <HAL_DMA_IRQHandler+0x158>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2208      	movs	r2, #8
 80010fc:	4013      	ands	r3, r2
 80010fe:	d027      	beq.n	8001150 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	210e      	movs	r1, #14
 800110c:	438a      	bics	r2, r1
 800110e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <HAL_DMA_IRQHandler+0x160>)
 8001112:	6859      	ldr	r1, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	221c      	movs	r2, #28
 800111a:	4013      	ands	r3, r2
 800111c:	2201      	movs	r2, #1
 800111e:	409a      	lsls	r2, r3
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <HAL_DMA_IRQHandler+0x160>)
 8001122:	430a      	orrs	r2, r1
 8001124:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2225      	movs	r2, #37	@ 0x25
 8001130:	2101      	movs	r1, #1
 8001132:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2224      	movs	r2, #36	@ 0x24
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	0010      	movs	r0, r2
 800114c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	46c0      	nop			@ (mov r8, r8)
}
 8001152:	46bd      	mov	sp, r7
 8001154:	b004      	add	sp, #16
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020000 	.word	0x40020000

0800115c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001172:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001178:	2b00      	cmp	r3, #0
 800117a:	d004      	beq.n	8001186 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001184:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <DMA_SetConfig+0x7c>)
 8001188:	6859      	ldr	r1, [r3, #4]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	221c      	movs	r2, #28
 8001190:	4013      	ands	r3, r2
 8001192:	2201      	movs	r2, #1
 8001194:	409a      	lsls	r2, r3
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <DMA_SetConfig+0x7c>)
 8001198:	430a      	orrs	r2, r1
 800119a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b10      	cmp	r3, #16
 80011aa:	d108      	bne.n	80011be <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011bc:	e007      	b.n	80011ce <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	60da      	str	r2, [r3, #12]
}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	40020000 	.word	0x40020000

080011dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	001a      	movs	r2, r3
 80011ea:	23ff      	movs	r3, #255	@ 0xff
 80011ec:	4013      	ands	r3, r2
 80011ee:	3b08      	subs	r3, #8
 80011f0:	2114      	movs	r1, #20
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7fe ff88 	bl	8000108 <__udivsi3>
 80011f8:	0003      	movs	r3, r0
 80011fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001204:	4694      	mov	ip, r2
 8001206:	4463      	add	r3, ip
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	001a      	movs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001214:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	221c      	movs	r2, #28
 800121a:	4013      	ands	r3, r2
 800121c:	2201      	movs	r2, #1
 800121e:	409a      	lsls	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b004      	add	sp, #16
 800122a:	bd80      	pop	{r7, pc}
 800122c:	10008200 	.word	0x10008200
 8001230:	40020880 	.word	0x40020880

08001234 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	22ff      	movs	r2, #255	@ 0xff
 8001242:	4013      	ands	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800124a:	4694      	mov	ip, r2
 800124c:	4463      	add	r3, ip
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	001a      	movs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800125a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3b01      	subs	r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	4013      	ands	r3, r2
 8001264:	2201      	movs	r2, #1
 8001266:	409a      	lsls	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b004      	add	sp, #16
 8001272:	bd80      	pop	{r7, pc}
 8001274:	1000823f 	.word	0x1000823f
 8001278:	40020940 	.word	0x40020940

0800127c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800128a:	e14d      	b.n	8001528 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4091      	lsls	r1, r2
 8001296:	000a      	movs	r2, r1
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <HAL_GPIO_Init+0x28>
 80012a2:	e13e      	b.n	8001522 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x38>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d125      	bne.n	8001300 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	58d3      	ldr	r3, [r2, r3]
 80012c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2207      	movs	r2, #7
 80012c6:	4013      	ands	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	409a      	lsls	r2, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	43da      	mvns	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4013      	ands	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	220f      	movs	r2, #15
 80012de:	401a      	ands	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2107      	movs	r1, #7
 80012e4:	400b      	ands	r3, r1
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	409a      	lsls	r2, r3
 80012ea:	0013      	movs	r3, r2
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	6979      	ldr	r1, [r7, #20]
 80012fe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	43da      	mvns	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	401a      	ands	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	4313      	orrs	r3, r2
 800132c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d00b      	beq.n	8001354 <HAL_GPIO_Init+0xd8>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001348:	2b11      	cmp	r3, #17
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b12      	cmp	r3, #18
 8001352:	d130      	bne.n	80013b6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	409a      	lsls	r2, r3
 8001362:	0013      	movs	r3, r2
 8001364:	43da      	mvns	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	4013      	ands	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	409a      	lsls	r2, r3
 8001376:	0013      	movs	r3, r2
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	4313      	orrs	r3, r2
 800137c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800138a:	2201      	movs	r2, #1
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	43da      	mvns	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	4013      	ands	r3, r2
 8001398:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	2201      	movs	r2, #1
 80013a2:	401a      	ands	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d017      	beq.n	80013ee <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	43da      	mvns	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	4013      	ands	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	2380      	movs	r3, #128	@ 0x80
 80013f4:	055b      	lsls	r3, r3, #21
 80013f6:	4013      	ands	r3, r2
 80013f8:	d100      	bne.n	80013fc <HAL_GPIO_Init+0x180>
 80013fa:	e092      	b.n	8001522 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80013fc:	4a50      	ldr	r2, [pc, #320]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3318      	adds	r3, #24
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	589b      	ldr	r3, [r3, r2]
 8001408:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2203      	movs	r2, #3
 800140e:	4013      	ands	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	220f      	movs	r2, #15
 8001414:	409a      	lsls	r2, r3
 8001416:	0013      	movs	r3, r2
 8001418:	43da      	mvns	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4013      	ands	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	23a0      	movs	r3, #160	@ 0xa0
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	429a      	cmp	r2, r3
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x1d6>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a45      	ldr	r2, [pc, #276]	@ (8001544 <HAL_GPIO_Init+0x2c8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x1d2>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a44      	ldr	r2, [pc, #272]	@ (8001548 <HAL_GPIO_Init+0x2cc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x1ce>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a43      	ldr	r2, [pc, #268]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x1ca>
 8001442:	2305      	movs	r3, #5
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x1d8>
 8001446:	2306      	movs	r3, #6
 8001448:	e004      	b.n	8001454 <HAL_GPIO_Init+0x1d8>
 800144a:	2302      	movs	r3, #2
 800144c:	e002      	b.n	8001454 <HAL_GPIO_Init+0x1d8>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x1d8>
 8001452:	2300      	movs	r3, #0
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	2103      	movs	r1, #3
 8001458:	400a      	ands	r2, r1
 800145a:	00d2      	lsls	r2, r2, #3
 800145c:	4093      	lsls	r3, r2
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001464:	4936      	ldr	r1, [pc, #216]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3318      	adds	r3, #24
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001472:	4a33      	ldr	r2, [pc, #204]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	58d3      	ldr	r3, [r2, r3]
 8001478:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43da      	mvns	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	4013      	ands	r3, r2
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001498:	4929      	ldr	r1, [pc, #164]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 800149a:	2280      	movs	r2, #128	@ 0x80
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80014a0:	4a27      	ldr	r2, [pc, #156]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 80014a2:	2384      	movs	r3, #132	@ 0x84
 80014a4:	58d3      	ldr	r3, [r2, r3]
 80014a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43da      	mvns	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4013      	ands	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	4013      	ands	r3, r2
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80014c6:	491e      	ldr	r1, [pc, #120]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 80014c8:	2284      	movs	r2, #132	@ 0x84
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43da      	mvns	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	4013      	ands	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	035b      	lsls	r3, r3, #13
 80014e6:	4013      	ands	r3, r2
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43da      	mvns	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	4013      	ands	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	039b      	lsls	r3, r3, #14
 8001510:	4013      	ands	r3, r2
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	3301      	adds	r3, #1
 8001526:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	40da      	lsrs	r2, r3
 8001530:	1e13      	subs	r3, r2, #0
 8001532:	d000      	beq.n	8001536 <HAL_GPIO_Init+0x2ba>
 8001534:	e6aa      	b.n	800128c <HAL_GPIO_Init+0x10>
  }
}
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	46c0      	nop			@ (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b006      	add	sp, #24
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021800 	.word	0x40021800
 8001544:	50000400 	.word	0x50000400
 8001548:	50000800 	.word	0x50000800
 800154c:	50001400 	.word	0x50001400

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	0008      	movs	r0, r1
 800155a:	0011      	movs	r1, r2
 800155c:	1cbb      	adds	r3, r7, #2
 800155e:	1c02      	adds	r2, r0, #0
 8001560:	801a      	strh	r2, [r3, #0]
 8001562:	1c7b      	adds	r3, r7, #1
 8001564:	1c0a      	adds	r2, r1, #0
 8001566:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001568:	1c7b      	adds	r3, r7, #1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001570:	1cbb      	adds	r3, r7, #2
 8001572:	881a      	ldrh	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157a:	1cbb      	adds	r3, r7, #2
 800157c:	881a      	ldrh	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e1d0      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	d100      	bne.n	80015aa <HAL_RCC_OscConfig+0x1e>
 80015a8:	e069      	b.n	800167e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015aa:	4bc8      	ldr	r3, [pc, #800]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2238      	movs	r2, #56	@ 0x38
 80015b0:	4013      	ands	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d105      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d15d      	bne.n	800167e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1bc      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_OscConfig+0x56>
 80015d2:	4bbe      	ldr	r3, [pc, #760]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4bbd      	ldr	r3, [pc, #756]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80015d8:	2180      	movs	r1, #128	@ 0x80
 80015da:	0249      	lsls	r1, r1, #9
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e020      	b.n	8001624 <HAL_RCC_OscConfig+0x98>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	23a0      	movs	r3, #160	@ 0xa0
 80015e8:	02db      	lsls	r3, r3, #11
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d10e      	bne.n	800160c <HAL_RCC_OscConfig+0x80>
 80015ee:	4bb7      	ldr	r3, [pc, #732]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4bb6      	ldr	r3, [pc, #728]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80015f4:	2180      	movs	r1, #128	@ 0x80
 80015f6:	02c9      	lsls	r1, r1, #11
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	4bb3      	ldr	r3, [pc, #716]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4bb2      	ldr	r3, [pc, #712]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	0249      	lsls	r1, r1, #9
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0x98>
 800160c:	4baf      	ldr	r3, [pc, #700]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4bae      	ldr	r3, [pc, #696]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001612:	49af      	ldr	r1, [pc, #700]	@ (80018d0 <HAL_RCC_OscConfig+0x344>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	4bac      	ldr	r3, [pc, #688]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4bab      	ldr	r3, [pc, #684]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800161e:	49ad      	ldr	r1, [pc, #692]	@ (80018d4 <HAL_RCC_OscConfig+0x348>)
 8001620:	400a      	ands	r2, r1
 8001622:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d014      	beq.n	8001656 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fa1c 	bl	8000a68 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001636:	f7ff fa17 	bl	8000a68 <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	@ 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e17b      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001648:	4ba0      	ldr	r3, [pc, #640]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	029b      	lsls	r3, r3, #10
 8001650:	4013      	ands	r3, r2
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0xaa>
 8001654:	e013      	b.n	800167e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff fa07 	bl	8000a68 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001660:	f7ff fa02 	bl	8000a68 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	@ 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e166      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001672:	4b96      	ldr	r3, [pc, #600]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	029b      	lsls	r3, r3, #10
 800167a:	4013      	ands	r3, r2
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2202      	movs	r2, #2
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0xfe>
 8001688:	e086      	b.n	8001798 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168a:	4b90      	ldr	r3, [pc, #576]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2238      	movs	r2, #56	@ 0x38
 8001690:	4013      	ands	r3, r2
 8001692:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d12f      	bne.n	80016fa <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e14c      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b89      	ldr	r3, [pc, #548]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a8b      	ldr	r2, [pc, #556]	@ (80018d8 <HAL_RCC_OscConfig+0x34c>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	0019      	movs	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	021a      	lsls	r2, r3, #8
 80016b6:	4b85      	ldr	r3, [pc, #532]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80016b8:	430a      	orrs	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d112      	bne.n	80016e8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016c2:	4b82      	ldr	r3, [pc, #520]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a85      	ldr	r2, [pc, #532]	@ (80018dc <HAL_RCC_OscConfig+0x350>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	4b7e      	ldr	r3, [pc, #504]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016d6:	4b7d      	ldr	r3, [pc, #500]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0adb      	lsrs	r3, r3, #11
 80016dc:	2207      	movs	r2, #7
 80016de:	4013      	ands	r3, r2
 80016e0:	4a7f      	ldr	r2, [pc, #508]	@ (80018e0 <HAL_RCC_OscConfig+0x354>)
 80016e2:	40da      	lsrs	r2, r3
 80016e4:	4b7f      	ldr	r3, [pc, #508]	@ (80018e4 <HAL_RCC_OscConfig+0x358>)
 80016e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016e8:	4b7f      	ldr	r3, [pc, #508]	@ (80018e8 <HAL_RCC_OscConfig+0x35c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff f95f 	bl	80009b0 <HAL_InitTick>
 80016f2:	1e03      	subs	r3, r0, #0
 80016f4:	d050      	beq.n	8001798 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e122      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d030      	beq.n	8001764 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001702:	4b72      	ldr	r3, [pc, #456]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a75      	ldr	r2, [pc, #468]	@ (80018dc <HAL_RCC_OscConfig+0x350>)
 8001708:	4013      	ands	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	4b6e      	ldr	r3, [pc, #440]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001716:	4b6d      	ldr	r3, [pc, #436]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b6c      	ldr	r3, [pc, #432]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800171c:	2180      	movs	r1, #128	@ 0x80
 800171e:	0049      	lsls	r1, r1, #1
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff f9a0 	bl	8000a68 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800172e:	f7ff f99b 	bl	8000a68 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0ff      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001740:	4b62      	ldr	r3, [pc, #392]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4013      	ands	r3, r2
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b5f      	ldr	r3, [pc, #380]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a61      	ldr	r2, [pc, #388]	@ (80018d8 <HAL_RCC_OscConfig+0x34c>)
 8001752:	4013      	ands	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	021a      	lsls	r2, r3, #8
 800175c:	4b5b      	ldr	r3, [pc, #364]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800175e:	430a      	orrs	r2, r1
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	e019      	b.n	8001798 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001764:	4b59      	ldr	r3, [pc, #356]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b58      	ldr	r3, [pc, #352]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800176a:	4960      	ldr	r1, [pc, #384]	@ (80018ec <HAL_RCC_OscConfig+0x360>)
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff f97a 	bl	8000a68 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800177a:	f7ff f975 	bl	8000a68 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0d9      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178c:	4b4f      	ldr	r3, [pc, #316]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4013      	ands	r3, r2
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2208      	movs	r2, #8
 800179e:	4013      	ands	r3, r2
 80017a0:	d042      	beq.n	8001828 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80017a2:	4b4a      	ldr	r3, [pc, #296]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2238      	movs	r2, #56	@ 0x38
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b18      	cmp	r3, #24
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d138      	bne.n	8001828 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0c2      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d019      	beq.n	80017f6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017c2:	4b42      	ldr	r3, [pc, #264]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80017c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017c6:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f94b 	bl	8000a68 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80017d8:	f7ff f946 	bl	8000a68 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0aa      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80017ea:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f1      	beq.n	80017d8 <HAL_RCC_OscConfig+0x24c>
 80017f4:	e018      	b.n	8001828 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017f6:	4b35      	ldr	r3, [pc, #212]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80017f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017fa:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	438a      	bics	r2, r1
 8001800:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff f931 	bl	8000a68 <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800180c:	f7ff f92c 	bl	8000a68 <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e090      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800181e:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d1f1      	bne.n	800180c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2204      	movs	r2, #4
 800182e:	4013      	ands	r3, r2
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x2a8>
 8001832:	e084      	b.n	800193e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001834:	230f      	movs	r3, #15
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800183c:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2238      	movs	r2, #56	@ 0x38
 8001842:	4013      	ands	r3, r2
 8001844:	2b20      	cmp	r3, #32
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d000      	beq.n	8001852 <HAL_RCC_OscConfig+0x2c6>
 8001850:	e075      	b.n	800193e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e074      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d106      	bne.n	800186c <HAL_RCC_OscConfig+0x2e0>
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001860:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	65da      	str	r2, [r3, #92]	@ 0x5c
 800186a:	e01c      	b.n	80018a6 <HAL_RCC_OscConfig+0x31a>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d10c      	bne.n	800188e <HAL_RCC_OscConfig+0x302>
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001876:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800187a:	2104      	movs	r1, #4
 800187c:	430a      	orrs	r2, r1
 800187e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001882:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001886:	2101      	movs	r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0x31a>
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001890:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 8001894:	2101      	movs	r1, #1
 8001896:	438a      	bics	r2, r1
 8001898:	65da      	str	r2, [r3, #92]	@ 0x5c
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 800189c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_RCC_OscConfig+0x340>)
 80018a0:	2104      	movs	r1, #4
 80018a2:	438a      	bics	r2, r1
 80018a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d028      	beq.n	8001900 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7ff f8db 	bl	8000a68 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff f8d6 	bl	8000a68 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	4a0b      	ldr	r2, [pc, #44]	@ (80018f0 <HAL_RCC_OscConfig+0x364>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d915      	bls.n	80018f4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e039      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
 80018cc:	40021000 	.word	0x40021000
 80018d0:	fffeffff 	.word	0xfffeffff
 80018d4:	fffbffff 	.word	0xfffbffff
 80018d8:	ffff80ff 	.word	0xffff80ff
 80018dc:	ffffc7ff 	.word	0xffffc7ff
 80018e0:	02dc6c00 	.word	0x02dc6c00
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004
 80018ec:	fffffeff 	.word	0xfffffeff
 80018f0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <HAL_RCC_OscConfig+0x3bc>)
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d0dc      	beq.n	80018b8 <HAL_RCC_OscConfig+0x32c>
 80018fe:	e013      	b.n	8001928 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f8b2 	bl	8000a68 <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001908:	e009      	b.n	800191e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff f8ad 	bl	8000a68 <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <HAL_RCC_OscConfig+0x3c0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e010      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <HAL_RCC_OscConfig+0x3bc>)
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001928:	230f      	movs	r3, #15
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_RCC_OscConfig+0x3bc>)
 8001934:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001936:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <HAL_RCC_OscConfig+0x3bc>)
 8001938:	4905      	ldr	r1, [pc, #20]	@ (8001950 <HAL_RCC_OscConfig+0x3c4>)
 800193a:	400a      	ands	r2, r1
 800193c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b006      	add	sp, #24
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	00001388 	.word	0x00001388
 8001950:	efffffff 	.word	0xefffffff

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0e9      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b76      	ldr	r3, [pc, #472]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2207      	movs	r2, #7
 800196e:	4013      	ands	r3, r2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d91e      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b73      	ldr	r3, [pc, #460]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2207      	movs	r2, #7
 800197c:	4393      	bics	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	4b70      	ldr	r3, [pc, #448]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001988:	f7ff f86e 	bl	8000a68 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001990:	e009      	b.n	80019a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001992:	f7ff f869 	bl	8000a68 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	4a6a      	ldr	r2, [pc, #424]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e0ca      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a6:	4b67      	ldr	r3, [pc, #412]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2207      	movs	r2, #7
 80019ac:	4013      	ands	r3, r2
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1ee      	bne.n	8001992 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2202      	movs	r2, #2
 80019ba:	4013      	ands	r3, r2
 80019bc:	d017      	beq.n	80019ee <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2204      	movs	r2, #4
 80019c4:	4013      	ands	r3, r2
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019c8:	4b60      	ldr	r3, [pc, #384]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4a60      	ldr	r2, [pc, #384]	@ (8001b50 <HAL_RCC_ClockConfig+0x1fc>)
 80019ce:	401a      	ands	r2, r3
 80019d0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	21b0      	movs	r1, #176	@ 0xb0
 80019d4:	0109      	lsls	r1, r1, #4
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019da:	4b5c      	ldr	r3, [pc, #368]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4a5d      	ldr	r2, [pc, #372]	@ (8001b54 <HAL_RCC_ClockConfig+0x200>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	4b58      	ldr	r3, [pc, #352]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2201      	movs	r2, #1
 80019f4:	4013      	ands	r3, r2
 80019f6:	d055      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80019f8:	4b54      	ldr	r3, [pc, #336]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	221c      	movs	r2, #28
 80019fe:	4393      	bics	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	4b51      	ldr	r3, [pc, #324]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a14:	4b4d      	ldr	r3, [pc, #308]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	029b      	lsls	r3, r3, #10
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d11f      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e08b      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2c:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4013      	ands	r3, r2
 8001a36:	d113      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e07f      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001a44:	4b41      	ldr	r3, [pc, #260]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d108      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e074      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a52:	4b3e      	ldr	r3, [pc, #248]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e06d      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a60:	4b3a      	ldr	r3, [pc, #232]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2207      	movs	r2, #7
 8001a66:	4393      	bics	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a74:	f7fe fff8 	bl	8000a68 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7e:	f7fe fff3 	bl	8000a68 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a2f      	ldr	r2, [pc, #188]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e054      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2238      	movs	r2, #56	@ 0x38
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1ec      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d21e      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	4393      	bics	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ac4:	f7fe ffd0 	bl	8000a68 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ace:	f7fe ffcb 	bl	8000a68 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e02c      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	4013      	ands	r3, r2
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1ee      	bne.n	8001ace <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2204      	movs	r2, #4
 8001af6:	4013      	ands	r3, r2
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	4a16      	ldr	r2, [pc, #88]	@ (8001b58 <HAL_RCC_ClockConfig+0x204>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b0e:	f000 f82b 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b12:	0001      	movs	r1, r0
 8001b14:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <HAL_RCC_ClockConfig+0x208>)
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	58d3      	ldr	r3, [r2, r3]
 8001b24:	221f      	movs	r2, #31
 8001b26:	4013      	ands	r3, r2
 8001b28:	000a      	movs	r2, r1
 8001b2a:	40da      	lsrs	r2, r3
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <HAL_RCC_ClockConfig+0x20c>)
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <HAL_RCC_ClockConfig+0x210>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7fe ff3b 	bl	80009b0 <HAL_InitTick>
 8001b3a:	0003      	movs	r3, r0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40022000 	.word	0x40022000
 8001b48:	00001388 	.word	0x00001388
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	ffff84ff 	.word	0xffff84ff
 8001b54:	fffff0ff 	.word	0xfffff0ff
 8001b58:	ffff8fff 	.word	0xffff8fff
 8001b5c:	08002bfc 	.word	0x08002bfc
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2238      	movs	r2, #56	@ 0x38
 8001b74:	4013      	ands	r3, r2
 8001b76:	d10f      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b78:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0adb      	lsrs	r3, r3, #11
 8001b7e:	2207      	movs	r2, #7
 8001b80:	4013      	ands	r3, r2
 8001b82:	2201      	movs	r2, #1
 8001b84:	409a      	lsls	r2, r3
 8001b86:	0013      	movs	r3, r2
 8001b88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	4815      	ldr	r0, [pc, #84]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001b8e:	f7fe fabb 	bl	8000108 <__udivsi3>
 8001b92:	0003      	movs	r3, r0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	e01e      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b98:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2238      	movs	r2, #56	@ 0x38
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba4:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	e015      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2238      	movs	r2, #56	@ 0x38
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d103      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	e00b      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001bbe:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2238      	movs	r2, #56	@ 0x38
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b18      	cmp	r3, #24
 8001bc8:	d103      	bne.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bca:	23fa      	movs	r3, #250	@ 0xfa
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	e001      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001bd6:	687b      	ldr	r3, [r7, #4]
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	02dc6c00 	.word	0x02dc6c00
 8001be8:	007a1200 	.word	0x007a1200

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e04a      	b.n	8001c94 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	223d      	movs	r2, #61	@ 0x3d
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	223c      	movs	r2, #60	@ 0x3c
 8001c0e:	2100      	movs	r1, #0
 8001c10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7fe fd8f 	bl	8000738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	223d      	movs	r2, #61	@ 0x3d
 8001c1e:	2102      	movs	r1, #2
 8001c20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	0010      	movs	r0, r2
 8001c2e:	f000 fad1 	bl	80021d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2248      	movs	r2, #72	@ 0x48
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	223e      	movs	r2, #62	@ 0x3e
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223f      	movs	r2, #63	@ 0x3f
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2240      	movs	r2, #64	@ 0x40
 8001c4e:	2101      	movs	r1, #1
 8001c50:	5499      	strb	r1, [r3, r2]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2241      	movs	r2, #65	@ 0x41
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2242      	movs	r2, #66	@ 0x42
 8001c5e:	2101      	movs	r1, #1
 8001c60:	5499      	strb	r1, [r3, r2]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2243      	movs	r2, #67	@ 0x43
 8001c66:	2101      	movs	r1, #1
 8001c68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2244      	movs	r2, #68	@ 0x44
 8001c6e:	2101      	movs	r1, #1
 8001c70:	5499      	strb	r1, [r3, r2]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2245      	movs	r2, #69	@ 0x45
 8001c76:	2101      	movs	r1, #1
 8001c78:	5499      	strb	r1, [r3, r2]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2246      	movs	r2, #70	@ 0x46
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2247      	movs	r2, #71	@ 0x47
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	223d      	movs	r2, #61	@ 0x3d
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e04a      	b.n	8001d44 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	223d      	movs	r2, #61	@ 0x3d
 8001cb2:	5c9b      	ldrb	r3, [r3, r2]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d107      	bne.n	8001cca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	223c      	movs	r2, #60	@ 0x3c
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f000 f89f 	bl	8001e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223d      	movs	r2, #61	@ 0x3d
 8001cce:	2102      	movs	r1, #2
 8001cd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	0019      	movs	r1, r3
 8001cdc:	0010      	movs	r0, r2
 8001cde:	f000 fa79 	bl	80021d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2248      	movs	r2, #72	@ 0x48
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	223e      	movs	r2, #62	@ 0x3e
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	223f      	movs	r2, #63	@ 0x3f
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2240      	movs	r2, #64	@ 0x40
 8001cfe:	2101      	movs	r1, #1
 8001d00:	5499      	strb	r1, [r3, r2]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2241      	movs	r2, #65	@ 0x41
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2242      	movs	r2, #66	@ 0x42
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2243      	movs	r2, #67	@ 0x43
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2244      	movs	r2, #68	@ 0x44
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2245      	movs	r2, #69	@ 0x45
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2246      	movs	r2, #70	@ 0x46
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2247      	movs	r2, #71	@ 0x47
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	223d      	movs	r2, #61	@ 0x3d
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	223d      	movs	r2, #61	@ 0x3d
 8001d58:	2102      	movs	r1, #2
 8001d5a:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a27      	ldr	r2, [pc, #156]	@ (8001e00 <HAL_TIM_PWM_DeInit+0xb4>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	d10d      	bne.n	8001d84 <HAL_TIM_PWM_DeInit+0x38>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a25      	ldr	r2, [pc, #148]	@ (8001e04 <HAL_TIM_PWM_DeInit+0xb8>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	d107      	bne.n	8001d84 <HAL_TIM_PWM_DeInit+0x38>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2101      	movs	r1, #1
 8001d80:	438a      	bics	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f000 f846 	bl	8001e18 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2248      	movs	r2, #72	@ 0x48
 8001d90:	2100      	movs	r1, #0
 8001d92:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	223e      	movs	r2, #62	@ 0x3e
 8001d98:	2100      	movs	r1, #0
 8001d9a:	5499      	strb	r1, [r3, r2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	223f      	movs	r2, #63	@ 0x3f
 8001da0:	2100      	movs	r1, #0
 8001da2:	5499      	strb	r1, [r3, r2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2240      	movs	r2, #64	@ 0x40
 8001da8:	2100      	movs	r1, #0
 8001daa:	5499      	strb	r1, [r3, r2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2241      	movs	r2, #65	@ 0x41
 8001db0:	2100      	movs	r1, #0
 8001db2:	5499      	strb	r1, [r3, r2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2242      	movs	r2, #66	@ 0x42
 8001db8:	2100      	movs	r1, #0
 8001dba:	5499      	strb	r1, [r3, r2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2243      	movs	r2, #67	@ 0x43
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2244      	movs	r2, #68	@ 0x44
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5499      	strb	r1, [r3, r2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2245      	movs	r2, #69	@ 0x45
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2246      	movs	r2, #70	@ 0x46
 8001dd8:	2100      	movs	r1, #0
 8001dda:	5499      	strb	r1, [r3, r2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2247      	movs	r2, #71	@ 0x47
 8001de0:	2100      	movs	r1, #0
 8001de2:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	223d      	movs	r2, #61	@ 0x3d
 8001de8:	2100      	movs	r1, #0
 8001dea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	223c      	movs	r2, #60	@ 0x3c
 8001df0:	2100      	movs	r1, #0
 8001df2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	00001111 	.word	0x00001111
 8001e04:	00000444 	.word	0x00000444

08001e08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b002      	add	sp, #8
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8001e20:	46c0      	nop			@ (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2317      	movs	r3, #23
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	223c      	movs	r2, #60	@ 0x3c
 8001e40:	5c9b      	ldrb	r3, [r3, r2]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e0e5      	b.n	8002016 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	223c      	movs	r2, #60	@ 0x3c
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b14      	cmp	r3, #20
 8001e56:	d900      	bls.n	8001e5a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001e58:	e0d1      	b.n	8001ffe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	009a      	lsls	r2, r3, #2
 8001e5e:	4b70      	ldr	r3, [pc, #448]	@ (8002020 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001e60:	18d3      	adds	r3, r2, r3
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 fa1c 	bl	80022ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2108      	movs	r1, #8
 8001e80:	430a      	orrs	r2, r1
 8001e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2104      	movs	r1, #4
 8001e90:	438a      	bics	r2, r1
 8001e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6999      	ldr	r1, [r3, #24]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	619a      	str	r2, [r3, #24]
      break;
 8001ea6:	e0af      	b.n	8002008 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	0011      	movs	r1, r2
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 fa7b 	bl	80023ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699a      	ldr	r2, [r3, #24]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	0109      	lsls	r1, r1, #4
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4954      	ldr	r1, [pc, #336]	@ (8002024 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6999      	ldr	r1, [r3, #24]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	021a      	lsls	r2, r3, #8
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	619a      	str	r2, [r3, #24]
      break;
 8001eec:	e08c      	b.n	8002008 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	0011      	movs	r1, r2
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 fad6 	bl	80024a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2108      	movs	r1, #8
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2104      	movs	r1, #4
 8001f18:	438a      	bics	r2, r1
 8001f1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69d9      	ldr	r1, [r3, #28]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	61da      	str	r2, [r3, #28]
      break;
 8001f2e:	e06b      	b.n	8002008 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	0011      	movs	r1, r2
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 fb37 	bl	80025ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2180      	movs	r1, #128	@ 0x80
 8001f4a:	0109      	lsls	r1, r1, #4
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4932      	ldr	r1, [pc, #200]	@ (8002024 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69d9      	ldr	r1, [r3, #28]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	021a      	lsls	r2, r3, #8
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	61da      	str	r2, [r3, #28]
      break;
 8001f74:	e048      	b.n	8002008 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	0011      	movs	r1, r2
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 fb78 	bl	8002674 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2108      	movs	r1, #8
 8001f90:	430a      	orrs	r2, r1
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2104      	movs	r1, #4
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001fb6:	e027      	b.n	8002008 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 fbb1 	bl	8002728 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2180      	movs	r1, #128	@ 0x80
 8001fd2:	0109      	lsls	r1, r1, #4
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4910      	ldr	r1, [pc, #64]	@ (8002024 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	021a      	lsls	r2, r3, #8
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001ffc:	e004      	b.n	8002008 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001ffe:	2317      	movs	r3, #23
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
      break;
 8002006:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	223c      	movs	r2, #60	@ 0x3c
 800200c:	2100      	movs	r1, #0
 800200e:	5499      	strb	r1, [r3, r2]

  return status;
 8002010:	2317      	movs	r3, #23
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	781b      	ldrb	r3, [r3, #0]
}
 8002016:	0018      	movs	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	b006      	add	sp, #24
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	08002c3c 	.word	0x08002c3c
 8002024:	fffffbff 	.word	0xfffffbff

08002028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002032:	230f      	movs	r3, #15
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	223c      	movs	r2, #60	@ 0x3c
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_TIM_ConfigClockSource+0x20>
 8002044:	2302      	movs	r3, #2
 8002046:	e0bc      	b.n	80021c2 <HAL_TIM_ConfigClockSource+0x19a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	223c      	movs	r2, #60	@ 0x3c
 800204c:	2101      	movs	r1, #1
 800204e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	223d      	movs	r2, #61	@ 0x3d
 8002054:	2102      	movs	r1, #2
 8002056:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4a5a      	ldr	r2, [pc, #360]	@ (80021cc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4a59      	ldr	r2, [pc, #356]	@ (80021d0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2280      	movs	r2, #128	@ 0x80
 800207e:	0192      	lsls	r2, r2, #6
 8002080:	4293      	cmp	r3, r2
 8002082:	d040      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0xde>
 8002084:	2280      	movs	r2, #128	@ 0x80
 8002086:	0192      	lsls	r2, r2, #6
 8002088:	4293      	cmp	r3, r2
 800208a:	d900      	bls.n	800208e <HAL_TIM_ConfigClockSource+0x66>
 800208c:	e088      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 800208e:	2280      	movs	r2, #128	@ 0x80
 8002090:	0152      	lsls	r2, r2, #5
 8002092:	4293      	cmp	r3, r2
 8002094:	d100      	bne.n	8002098 <HAL_TIM_ConfigClockSource+0x70>
 8002096:	e088      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x182>
 8002098:	2280      	movs	r2, #128	@ 0x80
 800209a:	0152      	lsls	r2, r2, #5
 800209c:	4293      	cmp	r3, r2
 800209e:	d900      	bls.n	80020a2 <HAL_TIM_ConfigClockSource+0x7a>
 80020a0:	e07e      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020a2:	2b70      	cmp	r3, #112	@ 0x70
 80020a4:	d018      	beq.n	80020d8 <HAL_TIM_ConfigClockSource+0xb0>
 80020a6:	d900      	bls.n	80020aa <HAL_TIM_ConfigClockSource+0x82>
 80020a8:	e07a      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020aa:	2b60      	cmp	r3, #96	@ 0x60
 80020ac:	d04f      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x126>
 80020ae:	d900      	bls.n	80020b2 <HAL_TIM_ConfigClockSource+0x8a>
 80020b0:	e076      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020b2:	2b50      	cmp	r3, #80	@ 0x50
 80020b4:	d03b      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x106>
 80020b6:	d900      	bls.n	80020ba <HAL_TIM_ConfigClockSource+0x92>
 80020b8:	e072      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020ba:	2b40      	cmp	r3, #64	@ 0x40
 80020bc:	d057      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x146>
 80020be:	d900      	bls.n	80020c2 <HAL_TIM_ConfigClockSource+0x9a>
 80020c0:	e06e      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020c2:	2b30      	cmp	r3, #48	@ 0x30
 80020c4:	d063      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x166>
 80020c6:	d86b      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d060      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x166>
 80020cc:	d868      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d05d      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x166>
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d05b      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x166>
 80020d6:	e063      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020e8:	f000 fbf8 	bl	80028dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2277      	movs	r2, #119	@ 0x77
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]
      break;
 8002104:	e052      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002116:	f000 fbe1 	bl	80028dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2180      	movs	r1, #128	@ 0x80
 8002126:	01c9      	lsls	r1, r1, #7
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
      break;
 800212c:	e03e      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800213a:	001a      	movs	r2, r3
 800213c:	f000 fb52 	bl	80027e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2150      	movs	r1, #80	@ 0x50
 8002146:	0018      	movs	r0, r3
 8002148:	f000 fbac 	bl	80028a4 <TIM_ITRx_SetConfig>
      break;
 800214c:	e02e      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800215a:	001a      	movs	r2, r3
 800215c:	f000 fb70 	bl	8002840 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2160      	movs	r1, #96	@ 0x60
 8002166:	0018      	movs	r0, r3
 8002168:	f000 fb9c 	bl	80028a4 <TIM_ITRx_SetConfig>
      break;
 800216c:	e01e      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800217a:	001a      	movs	r2, r3
 800217c:	f000 fb32 	bl	80027e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2140      	movs	r1, #64	@ 0x40
 8002186:	0018      	movs	r0, r3
 8002188:	f000 fb8c 	bl	80028a4 <TIM_ITRx_SetConfig>
      break;
 800218c:	e00e      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0019      	movs	r1, r3
 8002198:	0010      	movs	r0, r2
 800219a:	f000 fb83 	bl	80028a4 <TIM_ITRx_SetConfig>
      break;
 800219e:	e005      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80021a0:	230f      	movs	r3, #15
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
      break;
 80021a8:	e000      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80021aa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	223d      	movs	r2, #61	@ 0x3d
 80021b0:	2101      	movs	r1, #1
 80021b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	223c      	movs	r2, #60	@ 0x3c
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]

  return status;
 80021bc:	230f      	movs	r3, #15
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	781b      	ldrb	r3, [r3, #0]
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	ffceff88 	.word	0xffceff88
 80021d0:	ffff00ff 	.word	0xffff00ff

080021d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002294 <TIM_Base_SetConfig+0xc0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <TIM_Base_SetConfig+0x20>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002298 <TIM_Base_SetConfig+0xc4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d108      	bne.n	8002206 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2270      	movs	r2, #112	@ 0x70
 80021f8:	4393      	bics	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a22      	ldr	r2, [pc, #136]	@ (8002294 <TIM_Base_SetConfig+0xc0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00f      	beq.n	800222e <TIM_Base_SetConfig+0x5a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a21      	ldr	r2, [pc, #132]	@ (8002298 <TIM_Base_SetConfig+0xc4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00b      	beq.n	800222e <TIM_Base_SetConfig+0x5a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a20      	ldr	r2, [pc, #128]	@ (800229c <TIM_Base_SetConfig+0xc8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d007      	beq.n	800222e <TIM_Base_SetConfig+0x5a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1f      	ldr	r2, [pc, #124]	@ (80022a0 <TIM_Base_SetConfig+0xcc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d003      	beq.n	800222e <TIM_Base_SetConfig+0x5a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a1e      	ldr	r2, [pc, #120]	@ (80022a4 <TIM_Base_SetConfig+0xd0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d108      	bne.n	8002240 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a1d      	ldr	r2, [pc, #116]	@ (80022a8 <TIM_Base_SetConfig+0xd4>)
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2280      	movs	r2, #128	@ 0x80
 8002244:	4393      	bics	r3, r2
 8002246:	001a      	movs	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <TIM_Base_SetConfig+0xc0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <TIM_Base_SetConfig+0xaa>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a0b      	ldr	r2, [pc, #44]	@ (80022a0 <TIM_Base_SetConfig+0xcc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d003      	beq.n	800227e <TIM_Base_SetConfig+0xaa>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <TIM_Base_SetConfig+0xd0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d103      	bne.n	8002286 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	615a      	str	r2, [r3, #20]
}
 800228c:	46c0      	nop			@ (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b004      	add	sp, #16
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40000400 	.word	0x40000400
 800229c:	40002000 	.word	0x40002000
 80022a0:	40014400 	.word	0x40014400
 80022a4:	40014800 	.word	0x40014800
 80022a8:	fffffcff 	.word	0xfffffcff

080022ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4393      	bics	r3, r2
 80022c4:	001a      	movs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002394 <TIM_OC1_SetConfig+0xe8>)
 80022da:	4013      	ands	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2203      	movs	r2, #3
 80022e2:	4393      	bics	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4393      	bics	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a24      	ldr	r2, [pc, #144]	@ (8002398 <TIM_OC1_SetConfig+0xec>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <TIM_OC1_SetConfig+0x6e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a23      	ldr	r2, [pc, #140]	@ (800239c <TIM_OC1_SetConfig+0xf0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <TIM_OC1_SetConfig+0x6e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a22      	ldr	r2, [pc, #136]	@ (80023a0 <TIM_OC1_SetConfig+0xf4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10c      	bne.n	8002334 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2208      	movs	r2, #8
 800231e:	4393      	bics	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2204      	movs	r2, #4
 8002330:	4393      	bics	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a18      	ldr	r2, [pc, #96]	@ (8002398 <TIM_OC1_SetConfig+0xec>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <TIM_OC1_SetConfig+0xa0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a17      	ldr	r2, [pc, #92]	@ (800239c <TIM_OC1_SetConfig+0xf0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d003      	beq.n	800234c <TIM_OC1_SetConfig+0xa0>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a16      	ldr	r2, [pc, #88]	@ (80023a0 <TIM_OC1_SetConfig+0xf4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d111      	bne.n	8002370 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4a15      	ldr	r2, [pc, #84]	@ (80023a4 <TIM_OC1_SetConfig+0xf8>)
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4a14      	ldr	r2, [pc, #80]	@ (80023a8 <TIM_OC1_SetConfig+0xfc>)
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	621a      	str	r2, [r3, #32]
}
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b006      	add	sp, #24
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	fffeff8f 	.word	0xfffeff8f
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40014400 	.word	0x40014400
 80023a0:	40014800 	.word	0x40014800
 80023a4:	fffffeff 	.word	0xfffffeff
 80023a8:	fffffdff 	.word	0xfffffdff

080023ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	2210      	movs	r2, #16
 80023c2:	4393      	bics	r3, r2
 80023c4:	001a      	movs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a2c      	ldr	r2, [pc, #176]	@ (800248c <TIM_OC2_SetConfig+0xe0>)
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002490 <TIM_OC2_SetConfig+0xe4>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2220      	movs	r2, #32
 80023f6:	4393      	bics	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a22      	ldr	r2, [pc, #136]	@ (8002494 <TIM_OC2_SetConfig+0xe8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10d      	bne.n	800242a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	4393      	bics	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2240      	movs	r2, #64	@ 0x40
 8002426:	4393      	bics	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a19      	ldr	r2, [pc, #100]	@ (8002494 <TIM_OC2_SetConfig+0xe8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <TIM_OC2_SetConfig+0x96>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a18      	ldr	r2, [pc, #96]	@ (8002498 <TIM_OC2_SetConfig+0xec>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d003      	beq.n	8002442 <TIM_OC2_SetConfig+0x96>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a17      	ldr	r2, [pc, #92]	@ (800249c <TIM_OC2_SetConfig+0xf0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d113      	bne.n	800246a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <TIM_OC2_SetConfig+0xf4>)
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4a15      	ldr	r2, [pc, #84]	@ (80024a4 <TIM_OC2_SetConfig+0xf8>)
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	621a      	str	r2, [r3, #32]
}
 8002484:	46c0      	nop			@ (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b006      	add	sp, #24
 800248a:	bd80      	pop	{r7, pc}
 800248c:	feff8fff 	.word	0xfeff8fff
 8002490:	fffffcff 	.word	0xfffffcff
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40014400 	.word	0x40014400
 800249c:	40014800 	.word	0x40014800
 80024a0:	fffffbff 	.word	0xfffffbff
 80024a4:	fffff7ff 	.word	0xfffff7ff

080024a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a31      	ldr	r2, [pc, #196]	@ (8002584 <TIM_OC3_SetConfig+0xdc>)
 80024be:	401a      	ands	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002588 <TIM_OC3_SetConfig+0xe0>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2203      	movs	r2, #3
 80024dc:	4393      	bics	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	4a27      	ldr	r2, [pc, #156]	@ (800258c <TIM_OC3_SetConfig+0xe4>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a23      	ldr	r2, [pc, #140]	@ (8002590 <TIM_OC3_SetConfig+0xe8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10d      	bne.n	8002522 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <TIM_OC3_SetConfig+0xec>)
 800250a:	4013      	ands	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	4a1e      	ldr	r2, [pc, #120]	@ (8002598 <TIM_OC3_SetConfig+0xf0>)
 800251e:	4013      	ands	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a1a      	ldr	r2, [pc, #104]	@ (8002590 <TIM_OC3_SetConfig+0xe8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <TIM_OC3_SetConfig+0x92>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1b      	ldr	r2, [pc, #108]	@ (800259c <TIM_OC3_SetConfig+0xf4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d003      	beq.n	800253a <TIM_OC3_SetConfig+0x92>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <TIM_OC3_SetConfig+0xf8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d113      	bne.n	8002562 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4a19      	ldr	r2, [pc, #100]	@ (80025a4 <TIM_OC3_SetConfig+0xfc>)
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4a18      	ldr	r2, [pc, #96]	@ (80025a8 <TIM_OC3_SetConfig+0x100>)
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	621a      	str	r2, [r3, #32]
}
 800257c:	46c0      	nop			@ (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b006      	add	sp, #24
 8002582:	bd80      	pop	{r7, pc}
 8002584:	fffffeff 	.word	0xfffffeff
 8002588:	fffeff8f 	.word	0xfffeff8f
 800258c:	fffffdff 	.word	0xfffffdff
 8002590:	40012c00 	.word	0x40012c00
 8002594:	fffff7ff 	.word	0xfffff7ff
 8002598:	fffffbff 	.word	0xfffffbff
 800259c:	40014400 	.word	0x40014400
 80025a0:	40014800 	.word	0x40014800
 80025a4:	ffffefff 	.word	0xffffefff
 80025a8:	ffffdfff 	.word	0xffffdfff

080025ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a24      	ldr	r2, [pc, #144]	@ (8002654 <TIM_OC4_SetConfig+0xa8>)
 80025c2:	401a      	ands	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a20      	ldr	r2, [pc, #128]	@ (8002658 <TIM_OC4_SetConfig+0xac>)
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <TIM_OC4_SetConfig+0xb0>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002660 <TIM_OC4_SetConfig+0xb4>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	031b      	lsls	r3, r3, #12
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a17      	ldr	r2, [pc, #92]	@ (8002664 <TIM_OC4_SetConfig+0xb8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <TIM_OC4_SetConfig+0x70>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a16      	ldr	r2, [pc, #88]	@ (8002668 <TIM_OC4_SetConfig+0xbc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <TIM_OC4_SetConfig+0x70>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a15      	ldr	r2, [pc, #84]	@ (800266c <TIM_OC4_SetConfig+0xc0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d109      	bne.n	8002630 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <TIM_OC4_SetConfig+0xc4>)
 8002620:	4013      	ands	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	019b      	lsls	r3, r3, #6
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	621a      	str	r2, [r3, #32]
}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b006      	add	sp, #24
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	ffffefff 	.word	0xffffefff
 8002658:	feff8fff 	.word	0xfeff8fff
 800265c:	fffffcff 	.word	0xfffffcff
 8002660:	ffffdfff 	.word	0xffffdfff
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40014400 	.word	0x40014400
 800266c:	40014800 	.word	0x40014800
 8002670:	ffffbfff 	.word	0xffffbfff

08002674 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a21      	ldr	r2, [pc, #132]	@ (8002710 <TIM_OC5_SetConfig+0x9c>)
 800268a:	401a      	ands	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <TIM_OC5_SetConfig+0xa0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <TIM_OC5_SetConfig+0xa4>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a15      	ldr	r2, [pc, #84]	@ (800271c <TIM_OC5_SetConfig+0xa8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <TIM_OC5_SetConfig+0x66>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <TIM_OC5_SetConfig+0xac>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d003      	beq.n	80026da <TIM_OC5_SetConfig+0x66>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a13      	ldr	r2, [pc, #76]	@ (8002724 <TIM_OC5_SetConfig+0xb0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d109      	bne.n	80026ee <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002710 <TIM_OC5_SetConfig+0x9c>)
 80026de:	4013      	ands	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	621a      	str	r2, [r3, #32]
}
 8002708:	46c0      	nop			@ (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b006      	add	sp, #24
 800270e:	bd80      	pop	{r7, pc}
 8002710:	fffeffff 	.word	0xfffeffff
 8002714:	fffeff8f 	.word	0xfffeff8f
 8002718:	fffdffff 	.word	0xfffdffff
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40014400 	.word	0x40014400
 8002724:	40014800 	.word	0x40014800

08002728 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a22      	ldr	r2, [pc, #136]	@ (80027c8 <TIM_OC6_SetConfig+0xa0>)
 800273e:	401a      	ands	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a1e      	ldr	r2, [pc, #120]	@ (80027cc <TIM_OC6_SetConfig+0xa4>)
 8002754:	4013      	ands	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4a1a      	ldr	r2, [pc, #104]	@ (80027d0 <TIM_OC6_SetConfig+0xa8>)
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	051b      	lsls	r3, r3, #20
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a16      	ldr	r2, [pc, #88]	@ (80027d4 <TIM_OC6_SetConfig+0xac>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <TIM_OC6_SetConfig+0x68>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a15      	ldr	r2, [pc, #84]	@ (80027d8 <TIM_OC6_SetConfig+0xb0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d003      	beq.n	8002790 <TIM_OC6_SetConfig+0x68>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <TIM_OC6_SetConfig+0xb4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d109      	bne.n	80027a4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <TIM_OC6_SetConfig+0xb8>)
 8002794:	4013      	ands	r3, r2
 8002796:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b006      	add	sp, #24
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	ffefffff 	.word	0xffefffff
 80027cc:	feff8fff 	.word	0xfeff8fff
 80027d0:	ffdfffff 	.word	0xffdfffff
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40014400 	.word	0x40014400
 80027dc:	40014800 	.word	0x40014800
 80027e0:	fffbffff 	.word	0xfffbffff

080027e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	2201      	movs	r2, #1
 80027fc:	4393      	bics	r3, r2
 80027fe:	001a      	movs	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	22f0      	movs	r2, #240	@ 0xf0
 800280e:	4393      	bics	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	220a      	movs	r2, #10
 8002820:	4393      	bics	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	621a      	str	r2, [r3, #32]
}
 8002838:	46c0      	nop			@ (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b006      	add	sp, #24
 800283e:	bd80      	pop	{r7, pc}

08002840 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	2210      	movs	r2, #16
 8002858:	4393      	bics	r3, r2
 800285a:	001a      	movs	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <TIM_TI2_ConfigInputStage+0x60>)
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	031b      	lsls	r3, r3, #12
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	22a0      	movs	r2, #160	@ 0xa0
 800287c:	4393      	bics	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	621a      	str	r2, [r3, #32]
}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b006      	add	sp, #24
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	ffff0fff 	.word	0xffff0fff

080028a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a08      	ldr	r2, [pc, #32]	@ (80028d8 <TIM_ITRx_SetConfig+0x34>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	2207      	movs	r2, #7
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	609a      	str	r2, [r3, #8]
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b004      	add	sp, #16
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	ffcfff8f 	.word	0xffcfff8f

080028dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <TIM_ETR_SetConfig+0x3c>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	021a      	lsls	r2, r3, #8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	431a      	orrs	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	609a      	str	r2, [r3, #8]
}
 8002910:	46c0      	nop			@ (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b006      	add	sp, #24
 8002916:	bd80      	pop	{r7, pc}
 8002918:	ffff00ff 	.word	0xffff00ff

0800291c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	223c      	movs	r2, #60	@ 0x3c
 800292a:	5c9b      	ldrb	r3, [r3, r2]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002930:	2302      	movs	r3, #2
 8002932:	e04a      	b.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	223c      	movs	r2, #60	@ 0x3c
 8002938:	2101      	movs	r1, #1
 800293a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	223d      	movs	r2, #61	@ 0x3d
 8002940:	2102      	movs	r1, #2
 8002942:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a1d      	ldr	r2, [pc, #116]	@ (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2270      	movs	r2, #112	@ 0x70
 8002974:	4393      	bics	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a11      	ldr	r2, [pc, #68]	@ (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a10      	ldr	r2, [pc, #64]	@ (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10c      	bne.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2280      	movs	r2, #128	@ 0x80
 80029a2:	4393      	bics	r3, r2
 80029a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	223d      	movs	r2, #61	@ 0x3d
 80029bc:	2101      	movs	r1, #1
 80029be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	223c      	movs	r2, #60	@ 0x3c
 80029c4:	2100      	movs	r1, #0
 80029c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b004      	add	sp, #16
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	ff0fffff 	.word	0xff0fffff
 80029dc:	40000400 	.word	0x40000400

080029e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	223c      	movs	r2, #60	@ 0x3c
 80029f2:	5c9b      	ldrb	r3, [r3, r2]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e079      	b.n	8002af0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	223c      	movs	r2, #60	@ 0x3c
 8002a00:	2101      	movs	r1, #1
 8002a02:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	22ff      	movs	r2, #255	@ 0xff
 8002a08:	4393      	bics	r3, r2
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a38      	ldr	r2, [pc, #224]	@ (8002af8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002a18:	401a      	ands	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a35      	ldr	r2, [pc, #212]	@ (8002afc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002a26:	401a      	ands	r2, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a33      	ldr	r2, [pc, #204]	@ (8002b00 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002a34:	401a      	ands	r2, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a30      	ldr	r2, [pc, #192]	@ (8002b04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002a42:	401a      	ands	r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002b08 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002a50:	401a      	ands	r2, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002b0c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002a5e:	401a      	ands	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a29      	ldr	r2, [pc, #164]	@ (8002b10 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a25      	ldr	r2, [pc, #148]	@ (8002b14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d106      	bne.n	8002a90 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a24      	ldr	r2, [pc, #144]	@ (8002b18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002a86:	401a      	ands	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d121      	bne.n	8002ade <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	051b      	lsls	r3, r3, #20
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002aae:	401a      	ands	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	@ (8002b24 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002abc:	401a      	ands	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d106      	bne.n	8002ade <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a15      	ldr	r2, [pc, #84]	@ (8002b28 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	223c      	movs	r2, #60	@ 0x3c
 8002aea:	2100      	movs	r1, #0
 8002aec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b004      	add	sp, #16
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	fffffcff 	.word	0xfffffcff
 8002afc:	fffffbff 	.word	0xfffffbff
 8002b00:	fffff7ff 	.word	0xfffff7ff
 8002b04:	ffffefff 	.word	0xffffefff
 8002b08:	ffffdfff 	.word	0xffffdfff
 8002b0c:	ffffbfff 	.word	0xffffbfff
 8002b10:	fff0ffff 	.word	0xfff0ffff
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	efffffff 	.word	0xefffffff
 8002b1c:	ff0fffff 	.word	0xff0fffff
 8002b20:	feffffff 	.word	0xfeffffff
 8002b24:	fdffffff 	.word	0xfdffffff
 8002b28:	dfffffff 	.word	0xdfffffff

08002b2c <memset>:
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	1882      	adds	r2, r0, r2
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d100      	bne.n	8002b36 <memset+0xa>
 8002b34:	4770      	bx	lr
 8002b36:	7019      	strb	r1, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	e7f9      	b.n	8002b30 <memset+0x4>

08002b3c <__libc_init_array>:
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	2600      	movs	r6, #0
 8002b40:	4c0c      	ldr	r4, [pc, #48]	@ (8002b74 <__libc_init_array+0x38>)
 8002b42:	4d0d      	ldr	r5, [pc, #52]	@ (8002b78 <__libc_init_array+0x3c>)
 8002b44:	1b64      	subs	r4, r4, r5
 8002b46:	10a4      	asrs	r4, r4, #2
 8002b48:	42a6      	cmp	r6, r4
 8002b4a:	d109      	bne.n	8002b60 <__libc_init_array+0x24>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	f000 f819 	bl	8002b84 <_init>
 8002b52:	4c0a      	ldr	r4, [pc, #40]	@ (8002b7c <__libc_init_array+0x40>)
 8002b54:	4d0a      	ldr	r5, [pc, #40]	@ (8002b80 <__libc_init_array+0x44>)
 8002b56:	1b64      	subs	r4, r4, r5
 8002b58:	10a4      	asrs	r4, r4, #2
 8002b5a:	42a6      	cmp	r6, r4
 8002b5c:	d105      	bne.n	8002b6a <__libc_init_array+0x2e>
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
 8002b60:	00b3      	lsls	r3, r6, #2
 8002b62:	58eb      	ldr	r3, [r5, r3]
 8002b64:	4798      	blx	r3
 8002b66:	3601      	adds	r6, #1
 8002b68:	e7ee      	b.n	8002b48 <__libc_init_array+0xc>
 8002b6a:	00b3      	lsls	r3, r6, #2
 8002b6c:	58eb      	ldr	r3, [r5, r3]
 8002b6e:	4798      	blx	r3
 8002b70:	3601      	adds	r6, #1
 8002b72:	e7f2      	b.n	8002b5a <__libc_init_array+0x1e>
 8002b74:	08002c90 	.word	0x08002c90
 8002b78:	08002c90 	.word	0x08002c90
 8002b7c:	08002c94 	.word	0x08002c94
 8002b80:	08002c90 	.word	0x08002c90

08002b84 <_init>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8a:	bc08      	pop	{r3}
 8002b8c:	469e      	mov	lr, r3
 8002b8e:	4770      	bx	lr

08002b90 <_fini>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b96:	bc08      	pop	{r3}
 8002b98:	469e      	mov	lr, r3
 8002b9a:	4770      	bx	lr
