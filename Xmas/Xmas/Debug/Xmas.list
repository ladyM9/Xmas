
Xmas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d2c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08002dec  08002dec  00003dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f14  08002f14  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f14  08002f14  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f14  08002f14  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f14  08002f14  00003f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f18  08002f18  00003f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002f1c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  08002f78  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08002f78  000042c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009187  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001910  00000000  00000000  0000d20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0000eb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f4  00000000  00000000  0000f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001271a  00000000  00000000  0000fd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bab7  00000000  00000000  0002246e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000772f6  00000000  00000000  0002df25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a521b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e8  00000000  00000000  000a5260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a7a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002dd4 	.word	0x08002dd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08002dd4 	.word	0x08002dd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b09f      	sub	sp, #124	@ 0x7c
 8000224:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc08 	bl	8000a3a <HAL_Init>

  /* USER CODE BEGIN Init */
 // uint32_t melody_tone[] = {800, 956, 758};
 // uint32_t melody_dur[] = {1000, 1300, 1600};
  HAL_TIM_PWM_DeInit(&htim1);
 800022a:	4b1a      	ldr	r3, [pc, #104]	@ (8000294 <main+0x74>)
 800022c:	0018      	movs	r0, r3
 800022e:	f001 fc53 	bl	8001ad8 <HAL_TIM_PWM_DeInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f839 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f9e1 	bl	80005fc <MX_GPIO_Init>
  MX_DMA_Init();
 800023a:	f000 f9c1 	bl	80005c0 <MX_DMA_Init>
  MX_TIM3_Init();
 800023e:	f000 f941 	bl	80004c4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000242:	f000 f875 	bl	8000330 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //melody1 is notes of jingle_bells melody  {E4, E4, E4, E4, E4, E4, E4, G4, C4 , D4 , E4, F4, F4, F4, F4, F4, E4, E4, E4, D4, D4, E4, D4, G4}
  uint16_t melody1[] = {329, 329, 329, 329, 329, 329, 329, 392, 261, 293, 329, 349, 349, 349, 349, 349, 329, 329, 329, 293, 293, 329, 293, 392};
 8000246:	2334      	movs	r3, #52	@ 0x34
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	4a13      	ldr	r2, [pc, #76]	@ (8000298 <main+0x78>)
 800024c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024e:	c313      	stmia	r3!, {r0, r1, r4}
 8000250:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000252:	c313      	stmia	r3!, {r0, r1, r4}
 8000254:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000256:	c313      	stmia	r3!, {r0, r1, r4}
 8000258:	ca13      	ldmia	r2!, {r0, r1, r4}
 800025a:	c313      	stmia	r3!, {r0, r1, r4}

  //duration of melodies
  uint16_t duration_melody[] = {250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4a0f      	ldr	r2, [pc, #60]	@ (800029c <main+0x7c>)
 8000260:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000262:	c313      	stmia	r3!, {r0, r1, r4}
 8000264:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000266:	c313      	stmia	r3!, {r0, r1, r4}
 8000268:	ca13      	ldmia	r2!, {r0, r1, r4}
 800026a:	c313      	stmia	r3!, {r0, r1, r4}
 800026c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800026e:	c313      	stmia	r3!, {r0, r1, r4}

  uint16_t brmelody = sizeof(melody1)/sizeof(uint16_t);
 8000270:	2366      	movs	r3, #102	@ 0x66
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	2218      	movs	r2, #24
 8000276:	801a      	strh	r2, [r3, #0]

  begin(&htim3, &hdma_tim3_ch1, TIM_CHANNEL_1, 12, 12, 5, 2);
 8000278:	4909      	ldr	r1, [pc, #36]	@ (80002a0 <main+0x80>)
 800027a:	480a      	ldr	r0, [pc, #40]	@ (80002a4 <main+0x84>)
 800027c:	2302      	movs	r3, #2
 800027e:	9302      	str	r3, [sp, #8]
 8000280:	2305      	movs	r3, #5
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	230c      	movs	r3, #12
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	230c      	movs	r3, #12
 800028a:	2200      	movs	r2, #0
 800028c:	f000 f9ec 	bl	8000668 <begin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	e7fd      	b.n	8000290 <main+0x70>
 8000294:	20000078 	.word	0x20000078
 8000298:	08002dec 	.word	0x08002dec
 800029c:	08002e1c 	.word	0x08002e1c
 80002a0:	20000110 	.word	0x20000110
 80002a4:	200000c4 	.word	0x200000c4

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b08d      	sub	sp, #52	@ 0x34
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2414      	movs	r4, #20
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	231c      	movs	r3, #28
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fd3b 	bl	8002d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	003b      	movs	r3, r7
 80002c0:	0018      	movs	r0, r3
 80002c2:	2314      	movs	r3, #20
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f002 fd34 	bl	8002d34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2202      	movs	r2, #2
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2280      	movs	r2, #128	@ 0x80
 80002d6:	0052      	lsls	r2, r2, #1
 80002d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	2240      	movs	r2, #64	@ 0x40
 80002e4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 f815 	bl	8001318 <HAL_RCC_OscConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002f2:	f000 fa1b 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	003b      	movs	r3, r7
 80002f8:	2207      	movs	r2, #7
 80002fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000308:	003b      	movs	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800030e:	003b      	movs	r3, r7
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000314:	003b      	movs	r3, r7
 8000316:	2101      	movs	r1, #1
 8000318:	0018      	movs	r0, r3
 800031a:	f001 f9e1 	bl	80016e0 <HAL_RCC_ClockConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000322:	f000 fa03 	bl	800072c <Error_Handler>
  }
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b00d      	add	sp, #52	@ 0x34
 800032c:	bd90      	pop	{r4, r7, pc}
	...

08000330 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09c      	sub	sp, #112	@ 0x70
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000336:	2360      	movs	r3, #96	@ 0x60
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2310      	movs	r3, #16
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f002 fcf7 	bl	8002d34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000346:	2354      	movs	r3, #84	@ 0x54
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	230c      	movs	r3, #12
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f002 fcef 	bl	8002d34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000356:	2338      	movs	r3, #56	@ 0x38
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	0018      	movs	r0, r3
 800035c:	231c      	movs	r3, #28
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f002 fce7 	bl	8002d34 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	0018      	movs	r0, r3
 800036a:	2334      	movs	r3, #52	@ 0x34
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f002 fce0 	bl	8002d34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000374:	4b51      	ldr	r3, [pc, #324]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000376:	4a52      	ldr	r2, [pc, #328]	@ (80004c0 <MX_TIM1_Init+0x190>)
 8000378:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 800037a:	4b50      	ldr	r3, [pc, #320]	@ (80004bc <MX_TIM1_Init+0x18c>)
 800037c:	22e0      	movs	r2, #224	@ 0xe0
 800037e:	32ff      	adds	r2, #255	@ 0xff
 8000380:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b4e      	ldr	r3, [pc, #312]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000388:	4b4c      	ldr	r3, [pc, #304]	@ (80004bc <MX_TIM1_Init+0x18c>)
 800038a:	2232      	movs	r2, #50	@ 0x32
 800038c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038e:	4b4b      	ldr	r3, [pc, #300]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000394:	4b49      	ldr	r3, [pc, #292]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000396:	2200      	movs	r2, #0
 8000398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039a:	4b48      	ldr	r3, [pc, #288]	@ (80004bc <MX_TIM1_Init+0x18c>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003a0:	4b46      	ldr	r3, [pc, #280]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 fae8 	bl	8001978 <HAL_TIM_Base_Init>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80003ac:	f000 f9be 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b0:	2160      	movs	r1, #96	@ 0x60
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2280      	movs	r2, #128	@ 0x80
 80003b6:	0152      	lsls	r2, r2, #5
 80003b8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ba:	187a      	adds	r2, r7, r1
 80003bc:	4b3f      	ldr	r3, [pc, #252]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fe55 	bl	8002070 <HAL_TIM_ConfigClockSource>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80003ca:	f000 f9af 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003ce:	4b3b      	ldr	r3, [pc, #236]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 fb29 	bl	8001a28 <HAL_TIM_PWM_Init>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80003da:	f000 f9a7 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003de:	2154      	movs	r1, #84	@ 0x54
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f2:	187a      	adds	r2, r7, r1
 80003f4:	4b31      	ldr	r3, [pc, #196]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80003f6:	0011      	movs	r1, r2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 fad7 	bl	80029ac <HAL_TIMEx_MasterConfigSynchronization>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000402:	f000 f993 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000406:	2138      	movs	r1, #56	@ 0x38
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2260      	movs	r2, #96	@ 0x60
 800040c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000432:	1879      	adds	r1, r7, r1
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <MX_TIM1_Init+0x18c>)
 8000436:	2200      	movs	r2, #0
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fd19 	bl	8001e70 <HAL_TIM_PWM_ConfigChannel>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000442:	f000 f973 	bl	800072c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	0192      	lsls	r2, r2, #6
 800046a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2280      	movs	r2, #128	@ 0x80
 8000482:	0492      	lsls	r2, r2, #18
 8000484:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000498:	1d3a      	adds	r2, r7, #4
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <MX_TIM1_Init+0x18c>)
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f002 fae6 	bl	8002a70 <HAL_TIMEx_ConfigBreakDeadTime>
 80004a4:	1e03      	subs	r3, r0, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 80004a8:	f000 f940 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004ac:	4b03      	ldr	r3, [pc, #12]	@ (80004bc <MX_TIM1_Init+0x18c>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 f9ca 	bl	8000848 <HAL_TIM_MspPostInit>

}
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b01c      	add	sp, #112	@ 0x70
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000078 	.word	0x20000078
 80004c0:	40012c00 	.word	0x40012c00

080004c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08e      	sub	sp, #56	@ 0x38
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ca:	2328      	movs	r3, #40	@ 0x28
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	0018      	movs	r0, r3
 80004d0:	2310      	movs	r3, #16
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f002 fc2d 	bl	8002d34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004da:	231c      	movs	r3, #28
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	230c      	movs	r3, #12
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f002 fc25 	bl	8002d34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	231c      	movs	r3, #28
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f002 fc1e 	bl	8002d34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004f8:	4b2f      	ldr	r3, [pc, #188]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 80004fa:	4a30      	ldr	r2, [pc, #192]	@ (80005bc <MX_TIM3_Init+0xf8>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 80004fe:	4b2e      	ldr	r3, [pc, #184]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000500:	2205      	movs	r2, #5
 8000502:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b2c      	ldr	r3, [pc, #176]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800050a:	4b2b      	ldr	r3, [pc, #172]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800050c:	220a      	movs	r2, #10
 800050e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000516:	4b28      	ldr	r3, [pc, #160]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800051c:	4b26      	ldr	r3, [pc, #152]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fa2a 	bl	8001978 <HAL_TIM_Base_Init>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000528:	f000 f900 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052c:	2128      	movs	r1, #40	@ 0x28
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	0152      	lsls	r2, r2, #5
 8000534:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000536:	187a      	adds	r2, r7, r1
 8000538:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fd97 	bl	8002070 <HAL_TIM_ConfigClockSource>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000546:	f000 f8f1 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800054a:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fa6b 	bl	8001a28 <HAL_TIM_PWM_Init>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000556:	f000 f8e9 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055a:	211c      	movs	r1, #28
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000568:	187a      	adds	r2, r7, r1
 800056a:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 800056c:	0011      	movs	r1, r2
 800056e:	0018      	movs	r0, r3
 8000570:	f002 fa1c 	bl	80029ac <HAL_TIMEx_MasterConfigSynchronization>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000578:	f000 f8d8 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800057c:	003b      	movs	r3, r7
 800057e:	2260      	movs	r2, #96	@ 0x60
 8000580:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058e:	003b      	movs	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000594:	0039      	movs	r1, r7
 8000596:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 8000598:	2200      	movs	r2, #0
 800059a:	0018      	movs	r0, r3
 800059c:	f001 fc68 	bl	8001e70 <HAL_TIM_PWM_ConfigChannel>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80005a4:	f000 f8c2 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005a8:	4b03      	ldr	r3, [pc, #12]	@ (80005b8 <MX_TIM3_Init+0xf4>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f94c 	bl	8000848 <HAL_TIM_MspPostInit>

}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b00e      	add	sp, #56	@ 0x38
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000c4 	.word	0x200000c4
 80005bc:	40000400 	.word	0x40000400

080005c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <MX_DMA_Init+0x38>)
 80005c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <MX_DMA_Init+0x38>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	430a      	orrs	r2, r1
 80005d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <MX_DMA_Init+0x38>)
 80005d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005d6:	2201      	movs	r2, #1
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2009      	movs	r0, #9
 80005e4:	f000 fb52 	bl	8000c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005e8:	2009      	movs	r0, #9
 80005ea:	f000 fb64 	bl	8000cb6 <HAL_NVIC_EnableIRQ>

}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b002      	add	sp, #8
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	2314      	movs	r3, #20
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f002 fb92 	bl	8002d34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_GPIO_Init+0x68>)
 8000612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_GPIO_Init+0x68>)
 8000616:	2101      	movs	r1, #1
 8000618:	430a      	orrs	r2, r1
 800061a:	635a      	str	r2, [r3, #52]	@ 0x34
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_GPIO_Init+0x68>)
 800061e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000620:	2201      	movs	r2, #1
 8000622:	4013      	ands	r3, r2
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 8000628:	23a0      	movs	r3, #160	@ 0xa0
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	@ 0x80
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fe53 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PERIPH_SUPLLY_Pin */
  GPIO_InitStruct.Pin = PERIPH_SUPLLY_Pin;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2211      	movs	r2, #17
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2201      	movs	r2, #1
 8000646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 800064e:	1d3a      	adds	r2, r7, #4
 8000650:	23a0      	movs	r3, #160	@ 0xa0
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fcd6 	bl	8001008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b006      	add	sp, #24
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <begin>:

/* USER CODE BEGIN 4 */
void begin(TIM_HandleTypeDef *_htim, DMA_HandleTypeDef *_hdmaPtr, uint32_t channel, uint32_t num_of_leds, uint32_t pause_Pulse, uint32_t work_Pulse, uint32_t prescaler)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	603b      	str	r3, [r7, #0]
	uint16_t buffer[25] =
 8000676:	2314      	movs	r3, #20
 8000678:	18fa      	adds	r2, r7, r3
 800067a:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <begin+0xbc>)
 800067c:	0010      	movs	r0, r2
 800067e:	0019      	movs	r1, r3
 8000680:	2332      	movs	r3, #50	@ 0x32
 8000682:	001a      	movs	r2, r3
 8000684:	f002 fb9c 	bl	8002dc0 <memcpy>
			6,6,6,6,6,6,6,6,
			3,3,3,3,3,3,3,3,
			0
	};
	///prvo moras osigurat memoriju odnosno zauzet dio memorije za ledice tj buffer
	ledBuffer = (uint32_t*)malloc(num_of_leds * sizeof(uint32_t));
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fa95 	bl	8002bbc <malloc>
 8000692:	0003      	movs	r3, r0
 8000694:	001a      	movs	r2, r3
 8000696:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <begin+0xc0>)
 8000698:	601a      	str	r2, [r3, #0]
	//u datasheetu pise da je memorija na pocetku konfigurirana sa svim 0 za reset
	memset((uint32_t*)ledBuffer, 0, sizeof(uint32_t) * num_of_leds);
 800069a:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <begin+0xc0>)
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f002 fb45 	bl	8002d34 <memset>

	//inicializirat timer
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2205      	movs	r2, #5
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(_htim, 9);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2209      	movs	r2, #9
 80006b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2209      	movs	r2, #9
 80006be:	60da      	str	r2, [r3, #12]

	//inicijalizacija za DMA
//	HAL_DMA_RegisterCallback(&hdma_tim3_ch1, HAL_DMA_XFER_CPLT_CB_ID, 1);

	//_htim->Instance->CCR1 = 3;
	for(int j = 0 ; j < 12; j++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80006c4:	e025      	b.n	8000712 <begin+0xaa>
	{
	HAL_TIM_PWM_Start(_htim, channel);
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fa71 	bl	8001bb4 <HAL_TIM_PWM_Start>
	for(int i = 0 ; i < 25; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80006d6:	e010      	b.n	80006fa <begin+0x92>
	{
		_htim->Instance->CCR1 = buffer[i];
 80006d8:	2314      	movs	r3, #20
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80006de:	0052      	lsls	r2, r2, #1
 80006e0:	5ad2      	ldrh	r2, [r2, r3]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	635a      	str	r2, [r3, #52]	@ 0x34
		while(__HAL_TIM_GET_COUNTER(_htim) < 6);
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d9fa      	bls.n	80006ea <begin+0x82>
	for(int i = 0 ; i < 25; i++)
 80006f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006f6:	3301      	adds	r3, #1
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80006fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006fc:	2b18      	cmp	r3, #24
 80006fe:	ddeb      	ble.n	80006d8 <begin+0x70>
	}

	HAL_TIM_PWM_Stop(_htim, channel);
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f001 fb2c 	bl	8001d64 <HAL_TIM_PWM_Stop>
	for(int j = 0 ; j < 12; j++)
 800070c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800070e:	3301      	adds	r3, #1
 8000710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000714:	2b0b      	cmp	r3, #11
 8000716:	ddd6      	ble.n	80006c6 <begin+0x5e>
	}


//	__HAL_TIM_ENABLE_DMA(_htim, channel);

}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b014      	add	sp, #80	@ 0x50
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	08002e4c 	.word	0x08002e4c
 8000728:	2000016c 	.word	0x2000016c

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <HAL_MspInit+0x44>)
 8000740:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_MspInit+0x44>)
 8000744:	2101      	movs	r1, #1
 8000746:	430a      	orrs	r2, r1
 8000748:	641a      	str	r2, [r3, #64]	@ 0x40
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <HAL_MspInit+0x44>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	2201      	movs	r2, #1
 8000750:	4013      	ands	r3, r2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_MspInit+0x44>)
 8000758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <HAL_MspInit+0x44>)
 800075c:	2180      	movs	r1, #128	@ 0x80
 800075e:	0549      	lsls	r1, r1, #21
 8000760:	430a      	orrs	r2, r1
 8000762:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <HAL_MspInit+0x44>)
 8000766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000768:	2380      	movs	r3, #128	@ 0x80
 800076a:	055b      	lsls	r3, r3, #21
 800076c:	4013      	ands	r3, r2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a29      	ldr	r2, [pc, #164]	@ (8000834 <HAL_TIM_Base_MspInit+0xb4>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d10e      	bne.n	80007b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <HAL_TIM_Base_MspInit+0xb8>)
 8000794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <HAL_TIM_Base_MspInit+0xb8>)
 8000798:	2180      	movs	r1, #128	@ 0x80
 800079a:	0109      	lsls	r1, r1, #4
 800079c:	430a      	orrs	r2, r1
 800079e:	641a      	str	r2, [r3, #64]	@ 0x40
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <HAL_TIM_Base_MspInit+0xb8>)
 80007a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007ae:	e03c      	b.n	800082a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM3)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a21      	ldr	r2, [pc, #132]	@ (800083c <HAL_TIM_Base_MspInit+0xbc>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d137      	bne.n	800082a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <HAL_TIM_Base_MspInit+0xb8>)
 80007bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <HAL_TIM_Base_MspInit+0xb8>)
 80007c0:	2102      	movs	r1, #2
 80007c2:	430a      	orrs	r2, r1
 80007c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <HAL_TIM_Base_MspInit+0xb8>)
 80007c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007ca:	2202      	movs	r2, #2
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 80007d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000844 <HAL_TIM_Base_MspInit+0xc4>)
 80007d6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 80007da:	2220      	movs	r2, #32
 80007dc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 80007e0:	2210      	movs	r2, #16
 80007e2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 80007ec:	2280      	movs	r2, #128	@ 0x80
 80007ee:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007f0:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 80007f2:	2280      	movs	r2, #128	@ 0x80
 80007f4:	0052      	lsls	r2, r2, #1
 80007f6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 80007fa:	2280      	movs	r2, #128	@ 0x80
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 8000808:	22c0      	movs	r2, #192	@ 0xc0
 800080a:	0192      	lsls	r2, r2, #6
 800080c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fa6d 	bl	8000cf0 <HAL_DMA_Init>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <HAL_TIM_Base_MspInit+0x9e>
      Error_Handler();
 800081a:	f7ff ff87 	bl	800072c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_TIM_Base_MspInit+0xc0>)
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b004      	add	sp, #16
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	40012c00 	.word	0x40012c00
 8000838:	40021000 	.word	0x40021000
 800083c:	40000400 	.word	0x40000400
 8000840:	20000110 	.word	0x20000110
 8000844:	40020008 	.word	0x40020008

08000848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b08b      	sub	sp, #44	@ 0x2c
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	2414      	movs	r4, #20
 8000852:	193b      	adds	r3, r7, r4
 8000854:	0018      	movs	r0, r3
 8000856:	2314      	movs	r3, #20
 8000858:	001a      	movs	r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	f002 fa6a 	bl	8002d34 <memset>
  if(htim->Instance==TIM1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a29      	ldr	r2, [pc, #164]	@ (800090c <HAL_TIM_MspPostInit+0xc4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d123      	bne.n	80008b2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <HAL_TIM_MspPostInit+0xc8>)
 800086c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086e:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <HAL_TIM_MspPostInit+0xc8>)
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	635a      	str	r2, [r3, #52]	@ 0x34
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <HAL_TIM_MspPostInit+0xc8>)
 8000878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2220      	movs	r2, #32
 8000888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2202      	movs	r2, #2
 800088e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2205      	movs	r2, #5
 80008a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	187a      	adds	r2, r7, r1
 80008a4:	23a0      	movs	r3, #160	@ 0xa0
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fbac 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008b0:	e027      	b.n	8000902 <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <HAL_TIM_MspPostInit+0xcc>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d122      	bne.n	8000902 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <HAL_TIM_MspPostInit+0xc8>)
 80008be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008c0:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <HAL_TIM_MspPostInit+0xc8>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	430a      	orrs	r2, r1
 80008c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <HAL_TIM_MspPostInit+0xc8>)
 80008ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008cc:	2201      	movs	r2, #1
 80008ce:	4013      	ands	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008d4:	2114      	movs	r1, #20
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2240      	movs	r2, #64	@ 0x40
 80008da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2202      	movs	r2, #2
 80008e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2203      	movs	r2, #3
 80008ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2201      	movs	r2, #1
 80008f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	187a      	adds	r2, r7, r1
 80008f6:	23a0      	movs	r3, #160	@ 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fb83 	bl	8001008 <HAL_GPIO_Init>
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b00b      	add	sp, #44	@ 0x2c
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	40012c00 	.word	0x40012c00
 8000910:	40021000 	.word	0x40021000
 8000914:	40000400 	.word	0x40000400

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	e7fd      	b.n	800091c <NMI_Handler+0x4>

08000920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	e7fd      	b.n	8000924 <HardFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000940:	f000 f8dc 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <DMA1_Channel1_IRQHandler+0x14>)
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fa56 	bl	8000e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	20000110 	.word	0x20000110

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	18d3      	adds	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f002 f9e8 	bl	8002d68 <__errno>
 8000998:	0003      	movs	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	2301      	movs	r3, #1
 80009a0:	425b      	negs	r3, r3
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	18d2      	adds	r2, r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <_sbrk+0x64>)
 80009b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b006      	add	sp, #24
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20001800 	.word	0x20001800
 80009c4:	00000400 	.word	0x00000400
 80009c8:	20000170 	.word	0x20000170
 80009cc:	200002c0 	.word	0x200002c0

080009d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d4:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <SystemInit+0x14>)
 80009d6:	2280      	movs	r2, #128	@ 0x80
 80009d8:	0512      	lsls	r2, r2, #20
 80009da:	609a      	str	r2, [r3, #8]
#endif
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e8:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ec:	f7ff fff0 	bl	80009d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009f2:	e003      	b.n	80009fc <LoopCopyDataInit>

080009f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009fa:	3104      	adds	r1, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009fc:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <LoopForever+0xa>)
  ldr r3, =_edata
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <LoopForever+0xe>)
  adds r2, r0, r1
 8000a00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a04:	d3f6      	bcc.n	80009f4 <CopyDataInit>
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <LoopForever+0x12>)
  b LoopFillZerobss
 8000a08:	e002      	b.n	8000a10 <LoopFillZerobss>

08000a0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0e:	3204      	adds	r2, #4

08000a10 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <LoopForever+0x16>)
  cmp r2, r3
 8000a12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a14:	d3f9      	bcc.n	8000a0a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a16:	f002 f9ad 	bl	8002d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff fc01 	bl	8000220 <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   r0, =_estack
 8000a20:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000a24:	08002f1c 	.word	0x08002f1c
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000a30:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000a34:	200002c0 	.word	0x200002c0

08000a38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_IRQHandler>

08000a3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a46:	2003      	movs	r0, #3
 8000a48:	f000 f80e 	bl	8000a68 <HAL_InitTick>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d003      	beq.n	8000a58 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e001      	b.n	8000a5c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a58:	f7ff fe6e 	bl	8000738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	230f      	movs	r3, #15
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000a78:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <HAL_InitTick+0x88>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d02b      	beq.n	8000ad8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <HAL_InitTick+0x8c>)
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <HAL_InitTick+0x88>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	23fa      	movs	r3, #250	@ 0xfa
 8000a8c:	0098      	lsls	r0, r3, #2
 8000a8e:	f7ff fb3b 	bl	8000108 <__udivsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	0019      	movs	r1, r3
 8000a96:	0020      	movs	r0, r4
 8000a98:	f7ff fb36 	bl	8000108 <__udivsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f919 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d112      	bne.n	8000ace <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d80a      	bhi.n	8000ac4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	425b      	negs	r3, r3
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 f8e8 	bl	8000c8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_InitTick+0x90>)
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	e00d      	b.n	8000ae0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	e008      	b.n	8000ae0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ace:	230f      	movs	r3, #15
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e003      	b.n	8000ae0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ad8:	230f      	movs	r3, #15
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	781b      	ldrb	r3, [r3, #0]
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b005      	add	sp, #20
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	001a      	movs	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	18d2      	adds	r2, r2, r3
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000174 	.word	0x20000174

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	20000174 	.word	0x20000174

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b46:	d809      	bhi.n	8000b5c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	231f      	movs	r3, #31
 8000b50:	401a      	ands	r2, r3
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <__NVIC_EnableIRQ+0x30>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	4091      	lsls	r1, r2
 8000b58:	000a      	movs	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b7c:	d828      	bhi.n	8000bd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c3c <__NVIC_SetPriority+0xd4>)
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	33c0      	adds	r3, #192	@ 0xc0
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	589b      	ldr	r3, [r3, r2]
 8000b8e:	1dfa      	adds	r2, r7, #7
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	0011      	movs	r1, r2
 8000b94:	2203      	movs	r2, #3
 8000b96:	400a      	ands	r2, r1
 8000b98:	00d2      	lsls	r2, r2, #3
 8000b9a:	21ff      	movs	r1, #255	@ 0xff
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	019b      	lsls	r3, r3, #6
 8000baa:	22ff      	movs	r2, #255	@ 0xff
 8000bac:	401a      	ands	r2, r3
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	4003      	ands	r3, r0
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	481f      	ldr	r0, [pc, #124]	@ (8000c3c <__NVIC_SetPriority+0xd4>)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	33c0      	adds	r3, #192	@ 0xc0
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bce:	e031      	b.n	8000c34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <__NVIC_SetPriority+0xd8>)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	230f      	movs	r3, #15
 8000bda:	400b      	ands	r3, r1
 8000bdc:	3b08      	subs	r3, #8
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3306      	adds	r3, #6
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	18d3      	adds	r3, r2, r3
 8000be6:	3304      	adds	r3, #4
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1dfa      	adds	r2, r7, #7
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	0011      	movs	r1, r2
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	00d2      	lsls	r2, r2, #3
 8000bf6:	21ff      	movs	r1, #255	@ 0xff
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	43d2      	mvns	r2, r2
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	22ff      	movs	r2, #255	@ 0xff
 8000c08:	401a      	ands	r2, r3
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	4003      	ands	r3, r0
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <__NVIC_SetPriority+0xd8>)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	001c      	movs	r4, r3
 8000c20:	230f      	movs	r3, #15
 8000c22:	4023      	ands	r3, r4
 8000c24:	3b08      	subs	r3, #8
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	3306      	adds	r3, #6
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	18c3      	adds	r3, r0, r3
 8000c30:	3304      	adds	r3, #4
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1e5a      	subs	r2, r3, #1
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	045b      	lsls	r3, r3, #17
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d301      	bcc.n	8000c5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e010      	b.n	8000c7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <SysTick_Config+0x44>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	3a01      	subs	r2, #1
 8000c62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c64:	2301      	movs	r3, #1
 8000c66:	425b      	negs	r3, r3
 8000c68:	2103      	movs	r1, #3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff ff7c 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <SysTick_Config+0x44>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <SysTick_Config+0x44>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	210f      	movs	r1, #15
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	1c02      	adds	r2, r0, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff ff33 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ffaf 	bl	8000c44 <SysTick_Config>
 8000ce6:	0003      	movs	r3, r0
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e077      	b.n	8000df2 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a3d      	ldr	r2, [pc, #244]	@ (8000dfc <HAL_DMA_Init+0x10c>)
 8000d08:	4694      	mov	ip, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	2114      	movs	r1, #20
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff f9fa 	bl	8000108 <__udivsi3>
 8000d14:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000d16:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2225      	movs	r2, #37	@ 0x25
 8000d20:	2102      	movs	r1, #2
 8000d22:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4934      	ldr	r1, [pc, #208]	@ (8000e00 <HAL_DMA_Init+0x110>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f000 f8fb 	bl	8000f68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	2380      	movs	r3, #128	@ 0x80
 8000d78:	01db      	lsls	r3, r3, #7
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d102      	bne.n	8000d84 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8c:	21ff      	movs	r1, #255	@ 0xff
 8000d8e:	400a      	ands	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000d9a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d011      	beq.n	8000dc8 <HAL_DMA_Init+0xd8>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d80d      	bhi.n	8000dc8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 f906 	bl	8000fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	e008      	b.n	8000dda <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2225      	movs	r2, #37	@ 0x25
 8000de4:	2101      	movs	r1, #1
 8000de6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2224      	movs	r2, #36	@ 0x24
 8000dec:	2100      	movs	r1, #0
 8000dee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	0018      	movs	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	bffdfff8 	.word	0xbffdfff8
 8000e00:	ffff800f 	.word	0xffff800f

08000e04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8000e0c:	4b55      	ldr	r3, [pc, #340]	@ (8000f64 <HAL_DMA_IRQHandler+0x160>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	221c      	movs	r2, #28
 8000e20:	4013      	ands	r3, r2
 8000e22:	2204      	movs	r2, #4
 8000e24:	409a      	lsls	r2, r3
 8000e26:	0013      	movs	r3, r2
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d027      	beq.n	8000e7e <HAL_DMA_IRQHandler+0x7a>
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	2204      	movs	r2, #4
 8000e32:	4013      	ands	r3, r2
 8000e34:	d023      	beq.n	8000e7e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d107      	bne.n	8000e52 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	438a      	bics	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000e52:	4b44      	ldr	r3, [pc, #272]	@ (8000f64 <HAL_DMA_IRQHandler+0x160>)
 8000e54:	6859      	ldr	r1, [r3, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	221c      	movs	r2, #28
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2204      	movs	r2, #4
 8000e60:	409a      	lsls	r2, r3
 8000e62:	4b40      	ldr	r3, [pc, #256]	@ (8000f64 <HAL_DMA_IRQHandler+0x160>)
 8000e64:	430a      	orrs	r2, r1
 8000e66:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d100      	bne.n	8000e72 <HAL_DMA_IRQHandler+0x6e>
 8000e70:	e073      	b.n	8000f5a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	0010      	movs	r0, r2
 8000e7a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000e7c:	e06d      	b.n	8000f5a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	221c      	movs	r2, #28
 8000e84:	4013      	ands	r3, r2
 8000e86:	2202      	movs	r2, #2
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	0013      	movs	r3, r2
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d02e      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0xec>
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2202      	movs	r2, #2
 8000e96:	4013      	ands	r3, r2
 8000e98:	d02a      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d10b      	bne.n	8000ebe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	210a      	movs	r1, #10
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2225      	movs	r2, #37	@ 0x25
 8000eba:	2101      	movs	r1, #1
 8000ebc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000ebe:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <HAL_DMA_IRQHandler+0x160>)
 8000ec0:	6859      	ldr	r1, [r3, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	221c      	movs	r2, #28
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2202      	movs	r2, #2
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <HAL_DMA_IRQHandler+0x160>)
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2224      	movs	r2, #36	@ 0x24
 8000ed8:	2100      	movs	r1, #0
 8000eda:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03a      	beq.n	8000f5a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	0010      	movs	r0, r2
 8000eec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000eee:	e034      	b.n	8000f5a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	221c      	movs	r2, #28
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2208      	movs	r2, #8
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4013      	ands	r3, r2
 8000f02:	d02b      	beq.n	8000f5c <HAL_DMA_IRQHandler+0x158>
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2208      	movs	r2, #8
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d027      	beq.n	8000f5c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	210e      	movs	r1, #14
 8000f18:	438a      	bics	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <HAL_DMA_IRQHandler+0x160>)
 8000f1e:	6859      	ldr	r1, [r3, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	221c      	movs	r2, #28
 8000f26:	4013      	ands	r3, r2
 8000f28:	2201      	movs	r2, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_DMA_IRQHandler+0x160>)
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2225      	movs	r2, #37	@ 0x25
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2224      	movs	r2, #36	@ 0x24
 8000f44:	2100      	movs	r1, #0
 8000f46:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	0010      	movs	r0, r2
 8000f58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46c0      	nop			@ (mov r8, r8)
}
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b004      	add	sp, #16
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40020000 	.word	0x40020000

08000f68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	001a      	movs	r2, r3
 8000f76:	23ff      	movs	r3, #255	@ 0xff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	2114      	movs	r1, #20
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff f8c2 	bl	8000108 <__udivsi3>
 8000f84:	0003      	movs	r3, r0
 8000f86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000f90:	4694      	mov	ip, r2
 8000f92:	4463      	add	r3, ip
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	001a      	movs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000fa0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	221c      	movs	r2, #28
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2201      	movs	r2, #1
 8000faa:	409a      	lsls	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b004      	add	sp, #16
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	10008200 	.word	0x10008200
 8000fbc:	40020880 	.word	0x40020880

08000fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	22ff      	movs	r2, #255	@ 0xff
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000fd6:	4694      	mov	ip, r2
 8000fd8:	4463      	add	r3, ip
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	001a      	movs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000fe6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8000ff8:	46c0      	nop			@ (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b004      	add	sp, #16
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	1000823f 	.word	0x1000823f
 8001004:	40020940 	.word	0x40020940

08001008 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001016:	e14d      	b.n	80012b4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4091      	lsls	r1, r2
 8001022:	000a      	movs	r2, r1
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d100      	bne.n	8001030 <HAL_GPIO_Init+0x28>
 800102e:	e13e      	b.n	80012ae <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x38>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b12      	cmp	r3, #18
 800103e:	d125      	bne.n	800108c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	58d3      	ldr	r3, [r2, r3]
 800104c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2207      	movs	r2, #7
 8001052:	4013      	ands	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	409a      	lsls	r2, r3
 800105a:	0013      	movs	r3, r2
 800105c:	43da      	mvns	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	4013      	ands	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	220f      	movs	r2, #15
 800106a:	401a      	ands	r2, r3
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	2107      	movs	r1, #7
 8001070:	400b      	ands	r3, r1
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	409a      	lsls	r2, r3
 8001076:	0013      	movs	r3, r2
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4313      	orrs	r3, r2
 800107c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	6979      	ldr	r1, [r7, #20]
 800108a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	409a      	lsls	r2, r3
 800109a:	0013      	movs	r3, r2
 800109c:	43da      	mvns	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	401a      	ands	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	409a      	lsls	r2, r3
 80010b2:	0013      	movs	r3, r2
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d00b      	beq.n	80010e0 <HAL_GPIO_Init+0xd8>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d007      	beq.n	80010e0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d4:	2b11      	cmp	r3, #17
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b12      	cmp	r3, #18
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	409a      	lsls	r2, r3
 80010ee:	0013      	movs	r3, r2
 80010f0:	43da      	mvns	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	409a      	lsls	r2, r3
 8001102:	0013      	movs	r3, r2
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	4313      	orrs	r3, r2
 8001108:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	43da      	mvns	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	4013      	ands	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	2201      	movs	r2, #1
 800112e:	401a      	ands	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d017      	beq.n	800117a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	43da      	mvns	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	4013      	ands	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4313      	orrs	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	2380      	movs	r3, #128	@ 0x80
 8001180:	055b      	lsls	r3, r3, #21
 8001182:	4013      	ands	r3, r2
 8001184:	d100      	bne.n	8001188 <HAL_GPIO_Init+0x180>
 8001186:	e092      	b.n	80012ae <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001188:	4a50      	ldr	r2, [pc, #320]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3318      	adds	r3, #24
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	589b      	ldr	r3, [r3, r2]
 8001194:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	2203      	movs	r2, #3
 800119a:	4013      	ands	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	220f      	movs	r2, #15
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	43da      	mvns	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	23a0      	movs	r3, #160	@ 0xa0
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x1d6>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a45      	ldr	r2, [pc, #276]	@ (80012d0 <HAL_GPIO_Init+0x2c8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x1d2>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a44      	ldr	r2, [pc, #272]	@ (80012d4 <HAL_GPIO_Init+0x2cc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x1ce>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a43      	ldr	r2, [pc, #268]	@ (80012d8 <HAL_GPIO_Init+0x2d0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x1ca>
 80011ce:	2305      	movs	r3, #5
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x1d8>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x1d8>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x1d8>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x1d8>
 80011de:	2300      	movs	r3, #0
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	2103      	movs	r1, #3
 80011e4:	400a      	ands	r2, r1
 80011e6:	00d2      	lsls	r2, r2, #3
 80011e8:	4093      	lsls	r3, r2
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011f0:	4936      	ldr	r1, [pc, #216]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3318      	adds	r3, #24
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80011fe:	4a33      	ldr	r2, [pc, #204]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	58d3      	ldr	r3, [r2, r3]
 8001204:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43da      	mvns	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	025b      	lsls	r3, r3, #9
 8001218:	4013      	ands	r3, r2
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001224:	4929      	ldr	r1, [pc, #164]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800122c:	4a27      	ldr	r2, [pc, #156]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 800122e:	2384      	movs	r3, #132	@ 0x84
 8001230:	58d3      	ldr	r3, [r2, r3]
 8001232:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43da      	mvns	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4013      	ands	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	029b      	lsls	r3, r3, #10
 8001246:	4013      	ands	r3, r2
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001252:	491e      	ldr	r1, [pc, #120]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 8001254:	2284      	movs	r2, #132	@ 0x84
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43da      	mvns	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	4013      	ands	r3, r2
 8001268:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	2380      	movs	r3, #128	@ 0x80
 8001270:	035b      	lsls	r3, r3, #13
 8001272:	4013      	ands	r3, r2
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43da      	mvns	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	039b      	lsls	r3, r3, #14
 800129c:	4013      	ands	r3, r2
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <HAL_GPIO_Init+0x2c4>)
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	3301      	adds	r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	40da      	lsrs	r2, r3
 80012bc:	1e13      	subs	r3, r2, #0
 80012be:	d000      	beq.n	80012c2 <HAL_GPIO_Init+0x2ba>
 80012c0:	e6aa      	b.n	8001018 <HAL_GPIO_Init+0x10>
  }
}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b006      	add	sp, #24
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021800 	.word	0x40021800
 80012d0:	50000400 	.word	0x50000400
 80012d4:	50000800 	.word	0x50000800
 80012d8:	50001400 	.word	0x50001400

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	0008      	movs	r0, r1
 80012e6:	0011      	movs	r1, r2
 80012e8:	1cbb      	adds	r3, r7, #2
 80012ea:	1c02      	adds	r2, r0, #0
 80012ec:	801a      	strh	r2, [r3, #0]
 80012ee:	1c7b      	adds	r3, r7, #1
 80012f0:	1c0a      	adds	r2, r1, #0
 80012f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f4:	1c7b      	adds	r3, r7, #1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fc:	1cbb      	adds	r3, r7, #2
 80012fe:	881a      	ldrh	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001306:	1cbb      	adds	r3, r7, #2
 8001308:	881a      	ldrh	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1d0      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2201      	movs	r2, #1
 8001330:	4013      	ands	r3, r2
 8001332:	d100      	bne.n	8001336 <HAL_RCC_OscConfig+0x1e>
 8001334:	e069      	b.n	800140a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001336:	4bc8      	ldr	r3, [pc, #800]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2238      	movs	r2, #56	@ 0x38
 800133c:	4013      	ands	r3, r2
 800133e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b08      	cmp	r3, #8
 8001344:	d105      	bne.n	8001352 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d15d      	bne.n	800140a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1bc      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	2380      	movs	r3, #128	@ 0x80
 8001358:	025b      	lsls	r3, r3, #9
 800135a:	429a      	cmp	r2, r3
 800135c:	d107      	bne.n	800136e <HAL_RCC_OscConfig+0x56>
 800135e:	4bbe      	ldr	r3, [pc, #760]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4bbd      	ldr	r3, [pc, #756]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001364:	2180      	movs	r1, #128	@ 0x80
 8001366:	0249      	lsls	r1, r1, #9
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e020      	b.n	80013b0 <HAL_RCC_OscConfig+0x98>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	23a0      	movs	r3, #160	@ 0xa0
 8001374:	02db      	lsls	r3, r3, #11
 8001376:	429a      	cmp	r2, r3
 8001378:	d10e      	bne.n	8001398 <HAL_RCC_OscConfig+0x80>
 800137a:	4bb7      	ldr	r3, [pc, #732]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4bb6      	ldr	r3, [pc, #728]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001380:	2180      	movs	r1, #128	@ 0x80
 8001382:	02c9      	lsls	r1, r1, #11
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	4bb3      	ldr	r3, [pc, #716]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4bb2      	ldr	r3, [pc, #712]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800138e:	2180      	movs	r1, #128	@ 0x80
 8001390:	0249      	lsls	r1, r1, #9
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	e00b      	b.n	80013b0 <HAL_RCC_OscConfig+0x98>
 8001398:	4baf      	ldr	r3, [pc, #700]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4bae      	ldr	r3, [pc, #696]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800139e:	49af      	ldr	r1, [pc, #700]	@ (800165c <HAL_RCC_OscConfig+0x344>)
 80013a0:	400a      	ands	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4bac      	ldr	r3, [pc, #688]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4bab      	ldr	r3, [pc, #684]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80013aa:	49ad      	ldr	r1, [pc, #692]	@ (8001660 <HAL_RCC_OscConfig+0x348>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d014      	beq.n	80013e2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fbb2 	bl	8000b20 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80013c2:	f7ff fbad 	bl	8000b20 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b64      	cmp	r3, #100	@ 0x64
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e17b      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0xaa>
 80013e0:	e013      	b.n	800140a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb9d 	bl	8000b20 <HAL_GetTick>
 80013e6:	0003      	movs	r3, r0
 80013e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fb98 	bl	8000b20 <HAL_GetTick>
 80013f0:	0002      	movs	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	@ 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e166      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fe:	4b96      	ldr	r3, [pc, #600]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	@ 0x80
 8001404:	029b      	lsls	r3, r3, #10
 8001406:	4013      	ands	r3, r2
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d100      	bne.n	8001416 <HAL_RCC_OscConfig+0xfe>
 8001414:	e086      	b.n	8001524 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001416:	4b90      	ldr	r3, [pc, #576]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2238      	movs	r2, #56	@ 0x38
 800141c:	4013      	ands	r3, r2
 800141e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d12f      	bne.n	8001486 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e14c      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b89      	ldr	r3, [pc, #548]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a8b      	ldr	r2, [pc, #556]	@ (8001664 <HAL_RCC_OscConfig+0x34c>)
 8001438:	4013      	ands	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	021a      	lsls	r2, r3, #8
 8001442:	4b85      	ldr	r3, [pc, #532]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d112      	bne.n	8001474 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800144e:	4b82      	ldr	r3, [pc, #520]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a85      	ldr	r2, [pc, #532]	@ (8001668 <HAL_RCC_OscConfig+0x350>)
 8001454:	4013      	ands	r3, r2
 8001456:	0019      	movs	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	4b7e      	ldr	r3, [pc, #504]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001462:	4b7d      	ldr	r3, [pc, #500]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	0adb      	lsrs	r3, r3, #11
 8001468:	2207      	movs	r2, #7
 800146a:	4013      	ands	r3, r2
 800146c:	4a7f      	ldr	r2, [pc, #508]	@ (800166c <HAL_RCC_OscConfig+0x354>)
 800146e:	40da      	lsrs	r2, r3
 8001470:	4b7f      	ldr	r3, [pc, #508]	@ (8001670 <HAL_RCC_OscConfig+0x358>)
 8001472:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001474:	4b7f      	ldr	r3, [pc, #508]	@ (8001674 <HAL_RCC_OscConfig+0x35c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff faf5 	bl	8000a68 <HAL_InitTick>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d050      	beq.n	8001524 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e122      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d030      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800148e:	4b72      	ldr	r3, [pc, #456]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a75      	ldr	r2, [pc, #468]	@ (8001668 <HAL_RCC_OscConfig+0x350>)
 8001494:	4013      	ands	r3, r2
 8001496:	0019      	movs	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	4b6e      	ldr	r3, [pc, #440]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80014a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	0049      	lsls	r1, r1, #1
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb36 	bl	8000b20 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fb31 	bl	8000b20 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e0ff      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014cc:	4b62      	ldr	r3, [pc, #392]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a61      	ldr	r2, [pc, #388]	@ (8001664 <HAL_RCC_OscConfig+0x34c>)
 80014de:	4013      	ands	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	021a      	lsls	r2, r3, #8
 80014e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	e019      	b.n	8001524 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80014f0:	4b59      	ldr	r3, [pc, #356]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b58      	ldr	r3, [pc, #352]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80014f6:	4960      	ldr	r1, [pc, #384]	@ (8001678 <HAL_RCC_OscConfig+0x360>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb10 	bl	8000b20 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001506:	f7ff fb0b 	bl	8000b20 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0d9      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001518:	4b4f      	ldr	r3, [pc, #316]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	@ 0x80
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4013      	ands	r3, r2
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2208      	movs	r2, #8
 800152a:	4013      	ands	r3, r2
 800152c:	d042      	beq.n	80015b4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800152e:	4b4a      	ldr	r3, [pc, #296]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2238      	movs	r2, #56	@ 0x38
 8001534:	4013      	ands	r3, r2
 8001536:	2b18      	cmp	r3, #24
 8001538:	d105      	bne.n	8001546 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d138      	bne.n	80015b4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0c2      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d019      	beq.n	8001582 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800154e:	4b42      	ldr	r3, [pc, #264]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001550:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001552:	4b41      	ldr	r3, [pc, #260]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001554:	2101      	movs	r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fae1 	bl	8000b20 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001564:	f7ff fadc 	bl	8000b20 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0aa      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001576:	4b38      	ldr	r3, [pc, #224]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	d0f1      	beq.n	8001564 <HAL_RCC_OscConfig+0x24c>
 8001580:	e018      	b.n	80015b4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001582:	4b35      	ldr	r3, [pc, #212]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001584:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001586:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001588:	2101      	movs	r1, #1
 800158a:	438a      	bics	r2, r1
 800158c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fac7 	bl	8000b20 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001598:	f7ff fac2 	bl	8000b20 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e090      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80015aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ae:	2202      	movs	r2, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	d1f1      	bne.n	8001598 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2204      	movs	r2, #4
 80015ba:	4013      	ands	r3, r2
 80015bc:	d100      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2a8>
 80015be:	e084      	b.n	80016ca <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c0:	230f      	movs	r3, #15
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2238      	movs	r2, #56	@ 0x38
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d000      	beq.n	80015de <HAL_RCC_OscConfig+0x2c6>
 80015dc:	e075      	b.n	80016ca <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e074      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2e0>
 80015ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80015ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015f6:	e01c      	b.n	8001632 <HAL_RCC_OscConfig+0x31a>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0x302>
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001602:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001606:	2104      	movs	r1, #4
 8001608:	430a      	orrs	r2, r1
 800160a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800160e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001612:	2101      	movs	r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001618:	e00b      	b.n	8001632 <HAL_RCC_OscConfig+0x31a>
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800161c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001620:	2101      	movs	r1, #1
 8001622:	438a      	bics	r2, r1
 8001624:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 8001628:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_RCC_OscConfig+0x340>)
 800162c:	2104      	movs	r1, #4
 800162e:	438a      	bics	r2, r1
 8001630:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d028      	beq.n	800168c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fa71 	bl	8000b20 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001642:	e01d      	b.n	8001680 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff fa6c 	bl	8000b20 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	4a0b      	ldr	r2, [pc, #44]	@ (800167c <HAL_RCC_OscConfig+0x364>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d915      	bls.n	8001680 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e039      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
 8001658:	40021000 	.word	0x40021000
 800165c:	fffeffff 	.word	0xfffeffff
 8001660:	fffbffff 	.word	0xfffbffff
 8001664:	ffff80ff 	.word	0xffff80ff
 8001668:	ffffc7ff 	.word	0xffffc7ff
 800166c:	02dc6c00 	.word	0x02dc6c00
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004
 8001678:	fffffeff 	.word	0xfffffeff
 800167c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001680:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <HAL_RCC_OscConfig+0x3bc>)
 8001682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d0dc      	beq.n	8001644 <HAL_RCC_OscConfig+0x32c>
 800168a:	e013      	b.n	80016b4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fa48 	bl	8000b20 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001694:	e009      	b.n	80016aa <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fa43 	bl	8000b20 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <HAL_RCC_OscConfig+0x3c0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e010      	b.n	80016cc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_RCC_OscConfig+0x3bc>)
 80016ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ae:	2202      	movs	r2, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d105      	bne.n	80016ca <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_RCC_OscConfig+0x3bc>)
 80016c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <HAL_RCC_OscConfig+0x3bc>)
 80016c4:	4905      	ldr	r1, [pc, #20]	@ (80016dc <HAL_RCC_OscConfig+0x3c4>)
 80016c6:	400a      	ands	r2, r1
 80016c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b006      	add	sp, #24
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	00001388 	.word	0x00001388
 80016dc:	efffffff 	.word	0xefffffff

080016e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0e9      	b.n	80018c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b76      	ldr	r3, [pc, #472]	@ (80018d0 <HAL_RCC_ClockConfig+0x1f0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2207      	movs	r2, #7
 80016fa:	4013      	ands	r3, r2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d91e      	bls.n	8001740 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b73      	ldr	r3, [pc, #460]	@ (80018d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2207      	movs	r2, #7
 8001708:	4393      	bics	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	4b70      	ldr	r3, [pc, #448]	@ (80018d0 <HAL_RCC_ClockConfig+0x1f0>)
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001714:	f7ff fa04 	bl	8000b20 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800171c:	e009      	b.n	8001732 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800171e:	f7ff f9ff 	bl	8000b20 <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	4a6a      	ldr	r2, [pc, #424]	@ (80018d4 <HAL_RCC_ClockConfig+0x1f4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0ca      	b.n	80018c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001732:	4b67      	ldr	r3, [pc, #412]	@ (80018d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2207      	movs	r2, #7
 8001738:	4013      	ands	r3, r2
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d1ee      	bne.n	800171e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d017      	beq.n	800177a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2204      	movs	r2, #4
 8001750:	4013      	ands	r3, r2
 8001752:	d008      	beq.n	8001766 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001754:	4b60      	ldr	r3, [pc, #384]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a60      	ldr	r2, [pc, #384]	@ (80018dc <HAL_RCC_ClockConfig+0x1fc>)
 800175a:	401a      	ands	r2, r3
 800175c:	4b5e      	ldr	r3, [pc, #376]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	21b0      	movs	r1, #176	@ 0xb0
 8001760:	0109      	lsls	r1, r1, #4
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001766:	4b5c      	ldr	r3, [pc, #368]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	4a5d      	ldr	r2, [pc, #372]	@ (80018e0 <HAL_RCC_ClockConfig+0x200>)
 800176c:	4013      	ands	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	4b58      	ldr	r3, [pc, #352]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	d055      	beq.n	8001830 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001784:	4b54      	ldr	r3, [pc, #336]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	221c      	movs	r2, #28
 800178a:	4393      	bics	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	4b51      	ldr	r3, [pc, #324]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a0:	4b4d      	ldr	r3, [pc, #308]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	4013      	ands	r3, r2
 80017aa:	d11f      	bne.n	80017ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e08b      	b.n	80018c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b8:	4b47      	ldr	r3, [pc, #284]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	@ 0x80
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4013      	ands	r3, r2
 80017c2:	d113      	bne.n	80017ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e07f      	b.n	80018c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d106      	bne.n	80017de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80017d0:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 80017d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d4:	2202      	movs	r2, #2
 80017d6:	4013      	ands	r3, r2
 80017d8:	d108      	bne.n	80017ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e074      	b.n	80018c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017de:	4b3e      	ldr	r3, [pc, #248]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 80017e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e06d      	b.n	80018c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ec:	4b3a      	ldr	r3, [pc, #232]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2207      	movs	r2, #7
 80017f2:	4393      	bics	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4b37      	ldr	r3, [pc, #220]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001800:	f7ff f98e 	bl	8000b20 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001808:	e009      	b.n	800181e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800180a:	f7ff f989 	bl	8000b20 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	4a2f      	ldr	r2, [pc, #188]	@ (80018d4 <HAL_RCC_ClockConfig+0x1f4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e054      	b.n	80018c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2238      	movs	r2, #56	@ 0x38
 8001824:	401a      	ands	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	429a      	cmp	r2, r3
 800182e:	d1ec      	bne.n	800180a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2207      	movs	r2, #7
 8001836:	4013      	ands	r3, r2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d21e      	bcs.n	800187c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2207      	movs	r2, #7
 8001844:	4393      	bics	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <HAL_RCC_ClockConfig+0x1f0>)
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001850:	f7ff f966 	bl	8000b20 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001858:	e009      	b.n	800186e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800185a:	f7ff f961 	bl	8000b20 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4a1b      	ldr	r2, [pc, #108]	@ (80018d4 <HAL_RCC_ClockConfig+0x1f4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e02c      	b.n	80018c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2207      	movs	r2, #7
 8001874:	4013      	ands	r3, r2
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d1ee      	bne.n	800185a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2204      	movs	r2, #4
 8001882:	4013      	ands	r3, r2
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <HAL_RCC_ClockConfig+0x204>)
 800188c:	4013      	ands	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	430a      	orrs	r2, r1
 8001898:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800189a:	f000 f82b 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 800189e:	0001      	movs	r1, r0
 80018a0:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	220f      	movs	r2, #15
 80018a8:	401a      	ands	r2, r3
 80018aa:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <HAL_RCC_ClockConfig+0x208>)
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	58d3      	ldr	r3, [r2, r3]
 80018b0:	221f      	movs	r2, #31
 80018b2:	4013      	ands	r3, r2
 80018b4:	000a      	movs	r2, r1
 80018b6:	40da      	lsrs	r2, r3
 80018b8:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <HAL_RCC_ClockConfig+0x20c>)
 80018ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HAL_RCC_ClockConfig+0x210>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff f8d1 	bl	8000a68 <HAL_InitTick>
 80018c6:	0003      	movs	r3, r0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40022000 	.word	0x40022000
 80018d4:	00001388 	.word	0x00001388
 80018d8:	40021000 	.word	0x40021000
 80018dc:	ffff84ff 	.word	0xffff84ff
 80018e0:	fffff0ff 	.word	0xfffff0ff
 80018e4:	ffff8fff 	.word	0xffff8fff
 80018e8:	08002e80 	.word	0x08002e80
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_RCC_GetSysClockFreq+0x78>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2238      	movs	r2, #56	@ 0x38
 8001900:	4013      	ands	r3, r2
 8001902:	d10f      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_RCC_GetSysClockFreq+0x78>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0adb      	lsrs	r3, r3, #11
 800190a:	2207      	movs	r2, #7
 800190c:	4013      	ands	r3, r2
 800190e:	2201      	movs	r2, #1
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	4815      	ldr	r0, [pc, #84]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x7c>)
 800191a:	f7fe fbf5 	bl	8000108 <__udivsi3>
 800191e:	0003      	movs	r3, r0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	e01e      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <HAL_RCC_GetSysClockFreq+0x78>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2238      	movs	r2, #56	@ 0x38
 800192a:	4013      	ands	r3, r2
 800192c:	2b08      	cmp	r3, #8
 800192e:	d102      	bne.n	8001936 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001930:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x80>)
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	e015      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_RCC_GetSysClockFreq+0x78>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2238      	movs	r2, #56	@ 0x38
 800193c:	4013      	ands	r3, r2
 800193e:	2b20      	cmp	r3, #32
 8001940:	d103      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001942:	2380      	movs	r3, #128	@ 0x80
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	e00b      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <HAL_RCC_GetSysClockFreq+0x78>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2238      	movs	r2, #56	@ 0x38
 8001950:	4013      	ands	r3, r2
 8001952:	2b18      	cmp	r3, #24
 8001954:	d103      	bne.n	800195e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001956:	23fa      	movs	r3, #250	@ 0xfa
 8001958:	01db      	lsls	r3, r3, #7
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	e001      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001962:	687b      	ldr	r3, [r7, #4]
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	02dc6c00 	.word	0x02dc6c00
 8001974:	007a1200 	.word	0x007a1200

08001978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e04a      	b.n	8001a20 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	223d      	movs	r2, #61	@ 0x3d
 800198e:	5c9b      	ldrb	r3, [r3, r2]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	223c      	movs	r2, #60	@ 0x3c
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7fe feed 	bl	8000780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	223d      	movs	r2, #61	@ 0x3d
 80019aa:	2102      	movs	r1, #2
 80019ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3304      	adds	r3, #4
 80019b6:	0019      	movs	r1, r3
 80019b8:	0010      	movs	r0, r2
 80019ba:	f000 fc2f 	bl	800221c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2248      	movs	r2, #72	@ 0x48
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	223e      	movs	r2, #62	@ 0x3e
 80019ca:	2101      	movs	r1, #1
 80019cc:	5499      	strb	r1, [r3, r2]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	223f      	movs	r2, #63	@ 0x3f
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2240      	movs	r2, #64	@ 0x40
 80019da:	2101      	movs	r1, #1
 80019dc:	5499      	strb	r1, [r3, r2]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2241      	movs	r2, #65	@ 0x41
 80019e2:	2101      	movs	r1, #1
 80019e4:	5499      	strb	r1, [r3, r2]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2242      	movs	r2, #66	@ 0x42
 80019ea:	2101      	movs	r1, #1
 80019ec:	5499      	strb	r1, [r3, r2]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2243      	movs	r2, #67	@ 0x43
 80019f2:	2101      	movs	r1, #1
 80019f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2244      	movs	r2, #68	@ 0x44
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2245      	movs	r2, #69	@ 0x45
 8001a02:	2101      	movs	r1, #1
 8001a04:	5499      	strb	r1, [r3, r2]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2246      	movs	r2, #70	@ 0x46
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	5499      	strb	r1, [r3, r2]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2247      	movs	r2, #71	@ 0x47
 8001a12:	2101      	movs	r1, #1
 8001a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	223d      	movs	r2, #61	@ 0x3d
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e04a      	b.n	8001ad0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	223d      	movs	r2, #61	@ 0x3d
 8001a3e:	5c9b      	ldrb	r3, [r3, r2]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d107      	bne.n	8001a56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	223c      	movs	r2, #60	@ 0x3c
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 f89f 	bl	8001b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	223d      	movs	r2, #61	@ 0x3d
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3304      	adds	r3, #4
 8001a66:	0019      	movs	r1, r3
 8001a68:	0010      	movs	r0, r2
 8001a6a:	f000 fbd7 	bl	800221c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2248      	movs	r2, #72	@ 0x48
 8001a72:	2101      	movs	r1, #1
 8001a74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	223e      	movs	r2, #62	@ 0x3e
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	5499      	strb	r1, [r3, r2]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	223f      	movs	r2, #63	@ 0x3f
 8001a82:	2101      	movs	r1, #1
 8001a84:	5499      	strb	r1, [r3, r2]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2240      	movs	r2, #64	@ 0x40
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	5499      	strb	r1, [r3, r2]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2241      	movs	r2, #65	@ 0x41
 8001a92:	2101      	movs	r1, #1
 8001a94:	5499      	strb	r1, [r3, r2]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2242      	movs	r2, #66	@ 0x42
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	5499      	strb	r1, [r3, r2]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2243      	movs	r2, #67	@ 0x43
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2244      	movs	r2, #68	@ 0x44
 8001aaa:	2101      	movs	r1, #1
 8001aac:	5499      	strb	r1, [r3, r2]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2245      	movs	r2, #69	@ 0x45
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	5499      	strb	r1, [r3, r2]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2246      	movs	r2, #70	@ 0x46
 8001aba:	2101      	movs	r1, #1
 8001abc:	5499      	strb	r1, [r3, r2]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2247      	movs	r2, #71	@ 0x47
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	223d      	movs	r2, #61	@ 0x3d
 8001aca:	2101      	movs	r1, #1
 8001acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	223d      	movs	r2, #61	@ 0x3d
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a27      	ldr	r2, [pc, #156]	@ (8001b8c <HAL_TIM_PWM_DeInit+0xb4>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	d10d      	bne.n	8001b10 <HAL_TIM_PWM_DeInit+0x38>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a25      	ldr	r2, [pc, #148]	@ (8001b90 <HAL_TIM_PWM_DeInit+0xb8>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	d107      	bne.n	8001b10 <HAL_TIM_PWM_DeInit+0x38>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f846 	bl	8001ba4 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2248      	movs	r2, #72	@ 0x48
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	223e      	movs	r2, #62	@ 0x3e
 8001b24:	2100      	movs	r1, #0
 8001b26:	5499      	strb	r1, [r3, r2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	223f      	movs	r2, #63	@ 0x3f
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5499      	strb	r1, [r3, r2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2240      	movs	r2, #64	@ 0x40
 8001b34:	2100      	movs	r1, #0
 8001b36:	5499      	strb	r1, [r3, r2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2241      	movs	r2, #65	@ 0x41
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2242      	movs	r2, #66	@ 0x42
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2243      	movs	r2, #67	@ 0x43
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2244      	movs	r2, #68	@ 0x44
 8001b54:	2100      	movs	r1, #0
 8001b56:	5499      	strb	r1, [r3, r2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2245      	movs	r2, #69	@ 0x45
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	5499      	strb	r1, [r3, r2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2246      	movs	r2, #70	@ 0x46
 8001b64:	2100      	movs	r1, #0
 8001b66:	5499      	strb	r1, [r3, r2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2247      	movs	r2, #71	@ 0x47
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	223d      	movs	r2, #61	@ 0x3d
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	223c      	movs	r2, #60	@ 0x3c
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	00001111 	.word	0x00001111
 8001b90:	00000444 	.word	0x00000444

08001b94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b9c:	46c0      	nop			@ (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8001bac:	46c0      	nop			@ (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d108      	bne.n	8001bd6 <HAL_TIM_PWM_Start+0x22>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	223e      	movs	r2, #62	@ 0x3e
 8001bc8:	5c9b      	ldrb	r3, [r3, r2]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	1e5a      	subs	r2, r3, #1
 8001bd0:	4193      	sbcs	r3, r2
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	e037      	b.n	8001c46 <HAL_TIM_PWM_Start+0x92>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d108      	bne.n	8001bee <HAL_TIM_PWM_Start+0x3a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	223f      	movs	r2, #63	@ 0x3f
 8001be0:	5c9b      	ldrb	r3, [r3, r2]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	4193      	sbcs	r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	e02b      	b.n	8001c46 <HAL_TIM_PWM_Start+0x92>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d108      	bne.n	8001c06 <HAL_TIM_PWM_Start+0x52>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2240      	movs	r2, #64	@ 0x40
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	1e5a      	subs	r2, r3, #1
 8001c00:	4193      	sbcs	r3, r2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	e01f      	b.n	8001c46 <HAL_TIM_PWM_Start+0x92>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	d108      	bne.n	8001c1e <HAL_TIM_PWM_Start+0x6a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2241      	movs	r2, #65	@ 0x41
 8001c10:	5c9b      	ldrb	r3, [r3, r2]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	4193      	sbcs	r3, r2
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	e013      	b.n	8001c46 <HAL_TIM_PWM_Start+0x92>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b10      	cmp	r3, #16
 8001c22:	d108      	bne.n	8001c36 <HAL_TIM_PWM_Start+0x82>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2242      	movs	r2, #66	@ 0x42
 8001c28:	5c9b      	ldrb	r3, [r3, r2]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	4193      	sbcs	r3, r2
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	e007      	b.n	8001c46 <HAL_TIM_PWM_Start+0x92>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2243      	movs	r2, #67	@ 0x43
 8001c3a:	5c9b      	ldrb	r3, [r3, r2]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	4193      	sbcs	r3, r2
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e07b      	b.n	8001d46 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d104      	bne.n	8001c5e <HAL_TIM_PWM_Start+0xaa>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	223e      	movs	r2, #62	@ 0x3e
 8001c58:	2102      	movs	r1, #2
 8001c5a:	5499      	strb	r1, [r3, r2]
 8001c5c:	e023      	b.n	8001ca6 <HAL_TIM_PWM_Start+0xf2>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d104      	bne.n	8001c6e <HAL_TIM_PWM_Start+0xba>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	223f      	movs	r2, #63	@ 0x3f
 8001c68:	2102      	movs	r1, #2
 8001c6a:	5499      	strb	r1, [r3, r2]
 8001c6c:	e01b      	b.n	8001ca6 <HAL_TIM_PWM_Start+0xf2>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d104      	bne.n	8001c7e <HAL_TIM_PWM_Start+0xca>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2240      	movs	r2, #64	@ 0x40
 8001c78:	2102      	movs	r1, #2
 8001c7a:	5499      	strb	r1, [r3, r2]
 8001c7c:	e013      	b.n	8001ca6 <HAL_TIM_PWM_Start+0xf2>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d104      	bne.n	8001c8e <HAL_TIM_PWM_Start+0xda>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2241      	movs	r2, #65	@ 0x41
 8001c88:	2102      	movs	r1, #2
 8001c8a:	5499      	strb	r1, [r3, r2]
 8001c8c:	e00b      	b.n	8001ca6 <HAL_TIM_PWM_Start+0xf2>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d104      	bne.n	8001c9e <HAL_TIM_PWM_Start+0xea>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2242      	movs	r2, #66	@ 0x42
 8001c98:	2102      	movs	r1, #2
 8001c9a:	5499      	strb	r1, [r3, r2]
 8001c9c:	e003      	b.n	8001ca6 <HAL_TIM_PWM_Start+0xf2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2243      	movs	r2, #67	@ 0x43
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6839      	ldr	r1, [r7, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 fe58 	bl	8002964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a25      	ldr	r2, [pc, #148]	@ (8001d50 <HAL_TIM_PWM_Start+0x19c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d009      	beq.n	8001cd2 <HAL_TIM_PWM_Start+0x11e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a24      	ldr	r2, [pc, #144]	@ (8001d54 <HAL_TIM_PWM_Start+0x1a0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d004      	beq.n	8001cd2 <HAL_TIM_PWM_Start+0x11e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a22      	ldr	r2, [pc, #136]	@ (8001d58 <HAL_TIM_PWM_Start+0x1a4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_PWM_Start+0x122>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_TIM_PWM_Start+0x124>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2180      	movs	r1, #128	@ 0x80
 8001ce8:	0209      	lsls	r1, r1, #8
 8001cea:	430a      	orrs	r2, r1
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_TIM_PWM_Start+0x19c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_TIM_PWM_Start+0x14e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a17      	ldr	r2, [pc, #92]	@ (8001d5c <HAL_TIM_PWM_Start+0x1a8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d116      	bne.n	8001d30 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <HAL_TIM_PWM_Start+0x1ac>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d016      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x18e>
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	025b      	lsls	r3, r3, #9
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d011      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2e:	e008      	b.n	8001d42 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e000      	b.n	8001d44 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d42:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40014400 	.word	0x40014400
 8001d58:	40014800 	.word	0x40014800
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	00010007 	.word	0x00010007

08001d64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6839      	ldr	r1, [r7, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 fdf4 	bl	8002964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a35      	ldr	r2, [pc, #212]	@ (8001e58 <HAL_TIM_PWM_Stop+0xf4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_TIM_PWM_Stop+0x36>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a34      	ldr	r2, [pc, #208]	@ (8001e5c <HAL_TIM_PWM_Stop+0xf8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_TIM_PWM_Stop+0x36>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a32      	ldr	r2, [pc, #200]	@ (8001e60 <HAL_TIM_PWM_Stop+0xfc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_PWM_Stop+0x3a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_TIM_PWM_Stop+0x3c>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a2e      	ldr	r2, [pc, #184]	@ (8001e64 <HAL_TIM_PWM_Stop+0x100>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	d10d      	bne.n	8001dcc <HAL_TIM_PWM_Stop+0x68>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a2c      	ldr	r2, [pc, #176]	@ (8001e68 <HAL_TIM_PWM_Stop+0x104>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	d107      	bne.n	8001dcc <HAL_TIM_PWM_Stop+0x68>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4929      	ldr	r1, [pc, #164]	@ (8001e6c <HAL_TIM_PWM_Stop+0x108>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a24      	ldr	r2, [pc, #144]	@ (8001e64 <HAL_TIM_PWM_Stop+0x100>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d10d      	bne.n	8001df4 <HAL_TIM_PWM_Stop+0x90>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a22      	ldr	r2, [pc, #136]	@ (8001e68 <HAL_TIM_PWM_Stop+0x104>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_PWM_Stop+0x90>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2101      	movs	r1, #1
 8001df0:	438a      	bics	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d104      	bne.n	8001e04 <HAL_TIM_PWM_Stop+0xa0>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	223e      	movs	r2, #62	@ 0x3e
 8001dfe:	2101      	movs	r1, #1
 8001e00:	5499      	strb	r1, [r3, r2]
 8001e02:	e023      	b.n	8001e4c <HAL_TIM_PWM_Stop+0xe8>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d104      	bne.n	8001e14 <HAL_TIM_PWM_Stop+0xb0>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	223f      	movs	r2, #63	@ 0x3f
 8001e0e:	2101      	movs	r1, #1
 8001e10:	5499      	strb	r1, [r3, r2]
 8001e12:	e01b      	b.n	8001e4c <HAL_TIM_PWM_Stop+0xe8>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d104      	bne.n	8001e24 <HAL_TIM_PWM_Stop+0xc0>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2240      	movs	r2, #64	@ 0x40
 8001e1e:	2101      	movs	r1, #1
 8001e20:	5499      	strb	r1, [r3, r2]
 8001e22:	e013      	b.n	8001e4c <HAL_TIM_PWM_Stop+0xe8>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d104      	bne.n	8001e34 <HAL_TIM_PWM_Stop+0xd0>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2241      	movs	r2, #65	@ 0x41
 8001e2e:	2101      	movs	r1, #1
 8001e30:	5499      	strb	r1, [r3, r2]
 8001e32:	e00b      	b.n	8001e4c <HAL_TIM_PWM_Stop+0xe8>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d104      	bne.n	8001e44 <HAL_TIM_PWM_Stop+0xe0>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2242      	movs	r2, #66	@ 0x42
 8001e3e:	2101      	movs	r1, #1
 8001e40:	5499      	strb	r1, [r3, r2]
 8001e42:	e003      	b.n	8001e4c <HAL_TIM_PWM_Stop+0xe8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2243      	movs	r2, #67	@ 0x43
 8001e48:	2101      	movs	r1, #1
 8001e4a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	0018      	movs	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b002      	add	sp, #8
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	40012c00 	.word	0x40012c00
 8001e5c:	40014400 	.word	0x40014400
 8001e60:	40014800 	.word	0x40014800
 8001e64:	00001111 	.word	0x00001111
 8001e68:	00000444 	.word	0x00000444
 8001e6c:	ffff7fff 	.word	0xffff7fff

08001e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7c:	2317      	movs	r3, #23
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	223c      	movs	r2, #60	@ 0x3c
 8001e88:	5c9b      	ldrb	r3, [r3, r2]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0e5      	b.n	800205e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	223c      	movs	r2, #60	@ 0x3c
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b14      	cmp	r3, #20
 8001e9e:	d900      	bls.n	8001ea2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ea0:	e0d1      	b.n	8002046 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	009a      	lsls	r2, r3, #2
 8001ea6:	4b70      	ldr	r3, [pc, #448]	@ (8002068 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001ea8:	18d3      	adds	r3, r2, r3
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	0011      	movs	r1, r2
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 fa1c 	bl	80022f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	438a      	bics	r2, r1
 8001eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6999      	ldr	r1, [r3, #24]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	619a      	str	r2, [r3, #24]
      break;
 8001eee:	e0af      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fa7b 	bl	80023f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2180      	movs	r1, #128	@ 0x80
 8001f0a:	0109      	lsls	r1, r1, #4
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4954      	ldr	r1, [pc, #336]	@ (800206c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6999      	ldr	r1, [r3, #24]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	021a      	lsls	r2, r3, #8
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	619a      	str	r2, [r3, #24]
      break;
 8001f34:	e08c      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 fad6 	bl	80024f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2108      	movs	r1, #8
 8001f50:	430a      	orrs	r2, r1
 8001f52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2104      	movs	r1, #4
 8001f60:	438a      	bics	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69d9      	ldr	r1, [r3, #28]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	61da      	str	r2, [r3, #28]
      break;
 8001f76:	e06b      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	0011      	movs	r1, r2
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 fb37 	bl	80025f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2180      	movs	r1, #128	@ 0x80
 8001f92:	0109      	lsls	r1, r1, #4
 8001f94:	430a      	orrs	r2, r1
 8001f96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4932      	ldr	r1, [pc, #200]	@ (800206c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69d9      	ldr	r1, [r3, #28]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	021a      	lsls	r2, r3, #8
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	61da      	str	r2, [r3, #28]
      break;
 8001fbc:	e048      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	0011      	movs	r1, r2
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 fb78 	bl	80026bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2108      	movs	r1, #8
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	438a      	bics	r2, r1
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001ffe:	e027      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	0011      	movs	r1, r2
 8002008:	0018      	movs	r0, r3
 800200a:	f000 fbb1 	bl	8002770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	0109      	lsls	r1, r1, #4
 800201c:	430a      	orrs	r2, r1
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4910      	ldr	r1, [pc, #64]	@ (800206c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800202c:	400a      	ands	r2, r1
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	021a      	lsls	r2, r3, #8
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002044:	e004      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002046:	2317      	movs	r3, #23
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
      break;
 800204e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	223c      	movs	r2, #60	@ 0x3c
 8002054:	2100      	movs	r1, #0
 8002056:	5499      	strb	r1, [r3, r2]

  return status;
 8002058:	2317      	movs	r3, #23
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	781b      	ldrb	r3, [r3, #0]
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b006      	add	sp, #24
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	08002ec0 	.word	0x08002ec0
 800206c:	fffffbff 	.word	0xfffffbff

08002070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	230f      	movs	r3, #15
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	223c      	movs	r2, #60	@ 0x3c
 8002086:	5c9b      	ldrb	r3, [r3, r2]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_TIM_ConfigClockSource+0x20>
 800208c:	2302      	movs	r3, #2
 800208e:	e0bc      	b.n	800220a <HAL_TIM_ConfigClockSource+0x19a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	223c      	movs	r2, #60	@ 0x3c
 8002094:	2101      	movs	r1, #1
 8002096:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	223d      	movs	r2, #61	@ 0x3d
 800209c:	2102      	movs	r1, #2
 800209e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4a5a      	ldr	r2, [pc, #360]	@ (8002214 <HAL_TIM_ConfigClockSource+0x1a4>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4a59      	ldr	r2, [pc, #356]	@ (8002218 <HAL_TIM_ConfigClockSource+0x1a8>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	0192      	lsls	r2, r2, #6
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d040      	beq.n	800214e <HAL_TIM_ConfigClockSource+0xde>
 80020cc:	2280      	movs	r2, #128	@ 0x80
 80020ce:	0192      	lsls	r2, r2, #6
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d900      	bls.n	80020d6 <HAL_TIM_ConfigClockSource+0x66>
 80020d4:	e088      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	0152      	lsls	r2, r2, #5
 80020da:	4293      	cmp	r3, r2
 80020dc:	d100      	bne.n	80020e0 <HAL_TIM_ConfigClockSource+0x70>
 80020de:	e088      	b.n	80021f2 <HAL_TIM_ConfigClockSource+0x182>
 80020e0:	2280      	movs	r2, #128	@ 0x80
 80020e2:	0152      	lsls	r2, r2, #5
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d900      	bls.n	80020ea <HAL_TIM_ConfigClockSource+0x7a>
 80020e8:	e07e      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 80020ea:	2b70      	cmp	r3, #112	@ 0x70
 80020ec:	d018      	beq.n	8002120 <HAL_TIM_ConfigClockSource+0xb0>
 80020ee:	d900      	bls.n	80020f2 <HAL_TIM_ConfigClockSource+0x82>
 80020f0:	e07a      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 80020f2:	2b60      	cmp	r3, #96	@ 0x60
 80020f4:	d04f      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x126>
 80020f6:	d900      	bls.n	80020fa <HAL_TIM_ConfigClockSource+0x8a>
 80020f8:	e076      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 80020fa:	2b50      	cmp	r3, #80	@ 0x50
 80020fc:	d03b      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0x106>
 80020fe:	d900      	bls.n	8002102 <HAL_TIM_ConfigClockSource+0x92>
 8002100:	e072      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 8002102:	2b40      	cmp	r3, #64	@ 0x40
 8002104:	d057      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x146>
 8002106:	d900      	bls.n	800210a <HAL_TIM_ConfigClockSource+0x9a>
 8002108:	e06e      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 800210a:	2b30      	cmp	r3, #48	@ 0x30
 800210c:	d063      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x166>
 800210e:	d86b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 8002110:	2b20      	cmp	r3, #32
 8002112:	d060      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x166>
 8002114:	d868      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d05d      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x166>
 800211a:	2b10      	cmp	r3, #16
 800211c:	d05b      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x166>
 800211e:	e063      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002130:	f000 fbf8 	bl	8002924 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2277      	movs	r2, #119	@ 0x77
 8002140:	4313      	orrs	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	609a      	str	r2, [r3, #8]
      break;
 800214c:	e052      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800215e:	f000 fbe1 	bl	8002924 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2180      	movs	r1, #128	@ 0x80
 800216e:	01c9      	lsls	r1, r1, #7
 8002170:	430a      	orrs	r2, r1
 8002172:	609a      	str	r2, [r3, #8]
      break;
 8002174:	e03e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002182:	001a      	movs	r2, r3
 8002184:	f000 fb52 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2150      	movs	r1, #80	@ 0x50
 800218e:	0018      	movs	r0, r3
 8002190:	f000 fbac 	bl	80028ec <TIM_ITRx_SetConfig>
      break;
 8002194:	e02e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a2:	001a      	movs	r2, r3
 80021a4:	f000 fb70 	bl	8002888 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2160      	movs	r1, #96	@ 0x60
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 fb9c 	bl	80028ec <TIM_ITRx_SetConfig>
      break;
 80021b4:	e01e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c2:	001a      	movs	r2, r3
 80021c4:	f000 fb32 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2140      	movs	r1, #64	@ 0x40
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 fb8c 	bl	80028ec <TIM_ITRx_SetConfig>
      break;
 80021d4:	e00e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0019      	movs	r1, r3
 80021e0:	0010      	movs	r0, r2
 80021e2:	f000 fb83 	bl	80028ec <TIM_ITRx_SetConfig>
      break;
 80021e6:	e005      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80021e8:	230f      	movs	r3, #15
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
      break;
 80021f0:	e000      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80021f2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	223d      	movs	r2, #61	@ 0x3d
 80021f8:	2101      	movs	r1, #1
 80021fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	223c      	movs	r2, #60	@ 0x3c
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

  return status;
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	ffceff88 	.word	0xffceff88
 8002218:	ffff00ff 	.word	0xffff00ff

0800221c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a2b      	ldr	r2, [pc, #172]	@ (80022dc <TIM_Base_SetConfig+0xc0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d003      	beq.n	800223c <TIM_Base_SetConfig+0x20>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a2a      	ldr	r2, [pc, #168]	@ (80022e0 <TIM_Base_SetConfig+0xc4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d108      	bne.n	800224e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2270      	movs	r2, #112	@ 0x70
 8002240:	4393      	bics	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a22      	ldr	r2, [pc, #136]	@ (80022dc <TIM_Base_SetConfig+0xc0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00f      	beq.n	8002276 <TIM_Base_SetConfig+0x5a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a21      	ldr	r2, [pc, #132]	@ (80022e0 <TIM_Base_SetConfig+0xc4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00b      	beq.n	8002276 <TIM_Base_SetConfig+0x5a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a20      	ldr	r2, [pc, #128]	@ (80022e4 <TIM_Base_SetConfig+0xc8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <TIM_Base_SetConfig+0x5a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1f      	ldr	r2, [pc, #124]	@ (80022e8 <TIM_Base_SetConfig+0xcc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d003      	beq.n	8002276 <TIM_Base_SetConfig+0x5a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1e      	ldr	r2, [pc, #120]	@ (80022ec <TIM_Base_SetConfig+0xd0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d108      	bne.n	8002288 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a1d      	ldr	r2, [pc, #116]	@ (80022f0 <TIM_Base_SetConfig+0xd4>)
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2280      	movs	r2, #128	@ 0x80
 800228c:	4393      	bics	r3, r2
 800228e:	001a      	movs	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <TIM_Base_SetConfig+0xc0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0xaa>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a0b      	ldr	r2, [pc, #44]	@ (80022e8 <TIM_Base_SetConfig+0xcc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0xaa>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <TIM_Base_SetConfig+0xd0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d103      	bne.n	80022ce <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	615a      	str	r2, [r3, #20]
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40012c00 	.word	0x40012c00
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40002000 	.word	0x40002000
 80022e8:	40014400 	.word	0x40014400
 80022ec:	40014800 	.word	0x40014800
 80022f0:	fffffcff 	.word	0xfffffcff

080022f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	2201      	movs	r2, #1
 800230a:	4393      	bics	r3, r2
 800230c:	001a      	movs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a2e      	ldr	r2, [pc, #184]	@ (80023dc <TIM_OC1_SetConfig+0xe8>)
 8002322:	4013      	ands	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2203      	movs	r2, #3
 800232a:	4393      	bics	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2202      	movs	r2, #2
 800233c:	4393      	bics	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a24      	ldr	r2, [pc, #144]	@ (80023e0 <TIM_OC1_SetConfig+0xec>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <TIM_OC1_SetConfig+0x6e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <TIM_OC1_SetConfig+0xf0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d003      	beq.n	8002362 <TIM_OC1_SetConfig+0x6e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a22      	ldr	r2, [pc, #136]	@ (80023e8 <TIM_OC1_SetConfig+0xf4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10c      	bne.n	800237c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2208      	movs	r2, #8
 8002366:	4393      	bics	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2204      	movs	r2, #4
 8002378:	4393      	bics	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a18      	ldr	r2, [pc, #96]	@ (80023e0 <TIM_OC1_SetConfig+0xec>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <TIM_OC1_SetConfig+0xa0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <TIM_OC1_SetConfig+0xf0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d003      	beq.n	8002394 <TIM_OC1_SetConfig+0xa0>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a16      	ldr	r2, [pc, #88]	@ (80023e8 <TIM_OC1_SetConfig+0xf4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d111      	bne.n	80023b8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4a15      	ldr	r2, [pc, #84]	@ (80023ec <TIM_OC1_SetConfig+0xf8>)
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4a14      	ldr	r2, [pc, #80]	@ (80023f0 <TIM_OC1_SetConfig+0xfc>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	621a      	str	r2, [r3, #32]
}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b006      	add	sp, #24
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	fffeff8f 	.word	0xfffeff8f
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40014400 	.word	0x40014400
 80023e8:	40014800 	.word	0x40014800
 80023ec:	fffffeff 	.word	0xfffffeff
 80023f0:	fffffdff 	.word	0xfffffdff

080023f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	2210      	movs	r2, #16
 800240a:	4393      	bics	r3, r2
 800240c:	001a      	movs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a2c      	ldr	r2, [pc, #176]	@ (80024d4 <TIM_OC2_SetConfig+0xe0>)
 8002422:	4013      	ands	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a2b      	ldr	r2, [pc, #172]	@ (80024d8 <TIM_OC2_SetConfig+0xe4>)
 800242a:	4013      	ands	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2220      	movs	r2, #32
 800243e:	4393      	bics	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a22      	ldr	r2, [pc, #136]	@ (80024dc <TIM_OC2_SetConfig+0xe8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d10d      	bne.n	8002472 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2280      	movs	r2, #128	@ 0x80
 800245a:	4393      	bics	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2240      	movs	r2, #64	@ 0x40
 800246e:	4393      	bics	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a19      	ldr	r2, [pc, #100]	@ (80024dc <TIM_OC2_SetConfig+0xe8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <TIM_OC2_SetConfig+0x96>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a18      	ldr	r2, [pc, #96]	@ (80024e0 <TIM_OC2_SetConfig+0xec>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d003      	beq.n	800248a <TIM_OC2_SetConfig+0x96>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a17      	ldr	r2, [pc, #92]	@ (80024e4 <TIM_OC2_SetConfig+0xf0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d113      	bne.n	80024b2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4a16      	ldr	r2, [pc, #88]	@ (80024e8 <TIM_OC2_SetConfig+0xf4>)
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4a15      	ldr	r2, [pc, #84]	@ (80024ec <TIM_OC2_SetConfig+0xf8>)
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	621a      	str	r2, [r3, #32]
}
 80024cc:	46c0      	nop			@ (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b006      	add	sp, #24
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	feff8fff 	.word	0xfeff8fff
 80024d8:	fffffcff 	.word	0xfffffcff
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40014400 	.word	0x40014400
 80024e4:	40014800 	.word	0x40014800
 80024e8:	fffffbff 	.word	0xfffffbff
 80024ec:	fffff7ff 	.word	0xfffff7ff

080024f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a31      	ldr	r2, [pc, #196]	@ (80025cc <TIM_OC3_SetConfig+0xdc>)
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a2d      	ldr	r2, [pc, #180]	@ (80025d0 <TIM_OC3_SetConfig+0xe0>)
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2203      	movs	r2, #3
 8002524:	4393      	bics	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	4a27      	ldr	r2, [pc, #156]	@ (80025d4 <TIM_OC3_SetConfig+0xe4>)
 8002536:	4013      	ands	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a23      	ldr	r2, [pc, #140]	@ (80025d8 <TIM_OC3_SetConfig+0xe8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10d      	bne.n	800256a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <TIM_OC3_SetConfig+0xec>)
 8002552:	4013      	ands	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	4a1e      	ldr	r2, [pc, #120]	@ (80025e0 <TIM_OC3_SetConfig+0xf0>)
 8002566:	4013      	ands	r3, r2
 8002568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1a      	ldr	r2, [pc, #104]	@ (80025d8 <TIM_OC3_SetConfig+0xe8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <TIM_OC3_SetConfig+0x92>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1b      	ldr	r2, [pc, #108]	@ (80025e4 <TIM_OC3_SetConfig+0xf4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_OC3_SetConfig+0x92>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <TIM_OC3_SetConfig+0xf8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d113      	bne.n	80025aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4a19      	ldr	r2, [pc, #100]	@ (80025ec <TIM_OC3_SetConfig+0xfc>)
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4a18      	ldr	r2, [pc, #96]	@ (80025f0 <TIM_OC3_SetConfig+0x100>)
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	621a      	str	r2, [r3, #32]
}
 80025c4:	46c0      	nop			@ (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b006      	add	sp, #24
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	fffffeff 	.word	0xfffffeff
 80025d0:	fffeff8f 	.word	0xfffeff8f
 80025d4:	fffffdff 	.word	0xfffffdff
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	fffff7ff 	.word	0xfffff7ff
 80025e0:	fffffbff 	.word	0xfffffbff
 80025e4:	40014400 	.word	0x40014400
 80025e8:	40014800 	.word	0x40014800
 80025ec:	ffffefff 	.word	0xffffefff
 80025f0:	ffffdfff 	.word	0xffffdfff

080025f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a24      	ldr	r2, [pc, #144]	@ (800269c <TIM_OC4_SetConfig+0xa8>)
 800260a:	401a      	ands	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a20      	ldr	r2, [pc, #128]	@ (80026a0 <TIM_OC4_SetConfig+0xac>)
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a1f      	ldr	r2, [pc, #124]	@ (80026a4 <TIM_OC4_SetConfig+0xb0>)
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4a1b      	ldr	r2, [pc, #108]	@ (80026a8 <TIM_OC4_SetConfig+0xb4>)
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	031b      	lsls	r3, r3, #12
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a17      	ldr	r2, [pc, #92]	@ (80026ac <TIM_OC4_SetConfig+0xb8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d007      	beq.n	8002664 <TIM_OC4_SetConfig+0x70>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a16      	ldr	r2, [pc, #88]	@ (80026b0 <TIM_OC4_SetConfig+0xbc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_OC4_SetConfig+0x70>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a15      	ldr	r2, [pc, #84]	@ (80026b4 <TIM_OC4_SetConfig+0xc0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d109      	bne.n	8002678 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	4a14      	ldr	r2, [pc, #80]	@ (80026b8 <TIM_OC4_SetConfig+0xc4>)
 8002668:	4013      	ands	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	019b      	lsls	r3, r3, #6
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	621a      	str	r2, [r3, #32]
}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b006      	add	sp, #24
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	ffffefff 	.word	0xffffefff
 80026a0:	feff8fff 	.word	0xfeff8fff
 80026a4:	fffffcff 	.word	0xfffffcff
 80026a8:	ffffdfff 	.word	0xffffdfff
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40014400 	.word	0x40014400
 80026b4:	40014800 	.word	0x40014800
 80026b8:	ffffbfff 	.word	0xffffbfff

080026bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a21      	ldr	r2, [pc, #132]	@ (8002758 <TIM_OC5_SetConfig+0x9c>)
 80026d2:	401a      	ands	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a1d      	ldr	r2, [pc, #116]	@ (800275c <TIM_OC5_SetConfig+0xa0>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4a19      	ldr	r2, [pc, #100]	@ (8002760 <TIM_OC5_SetConfig+0xa4>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a15      	ldr	r2, [pc, #84]	@ (8002764 <TIM_OC5_SetConfig+0xa8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <TIM_OC5_SetConfig+0x66>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a14      	ldr	r2, [pc, #80]	@ (8002768 <TIM_OC5_SetConfig+0xac>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d003      	beq.n	8002722 <TIM_OC5_SetConfig+0x66>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a13      	ldr	r2, [pc, #76]	@ (800276c <TIM_OC5_SetConfig+0xb0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d109      	bne.n	8002736 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	4a0c      	ldr	r2, [pc, #48]	@ (8002758 <TIM_OC5_SetConfig+0x9c>)
 8002726:	4013      	ands	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	621a      	str	r2, [r3, #32]
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b006      	add	sp, #24
 8002756:	bd80      	pop	{r7, pc}
 8002758:	fffeffff 	.word	0xfffeffff
 800275c:	fffeff8f 	.word	0xfffeff8f
 8002760:	fffdffff 	.word	0xfffdffff
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40014400 	.word	0x40014400
 800276c:	40014800 	.word	0x40014800

08002770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4a22      	ldr	r2, [pc, #136]	@ (8002810 <TIM_OC6_SetConfig+0xa0>)
 8002786:	401a      	ands	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <TIM_OC6_SetConfig+0xa4>)
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <TIM_OC6_SetConfig+0xa8>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	051b      	lsls	r3, r3, #20
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a16      	ldr	r2, [pc, #88]	@ (800281c <TIM_OC6_SetConfig+0xac>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d007      	beq.n	80027d8 <TIM_OC6_SetConfig+0x68>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a15      	ldr	r2, [pc, #84]	@ (8002820 <TIM_OC6_SetConfig+0xb0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d003      	beq.n	80027d8 <TIM_OC6_SetConfig+0x68>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <TIM_OC6_SetConfig+0xb4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d109      	bne.n	80027ec <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	4a13      	ldr	r2, [pc, #76]	@ (8002828 <TIM_OC6_SetConfig+0xb8>)
 80027dc:	4013      	ands	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	029b      	lsls	r3, r3, #10
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b006      	add	sp, #24
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	ffefffff 	.word	0xffefffff
 8002814:	feff8fff 	.word	0xfeff8fff
 8002818:	ffdfffff 	.word	0xffdfffff
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40014400 	.word	0x40014400
 8002824:	40014800 	.word	0x40014800
 8002828:	fffbffff 	.word	0xfffbffff

0800282c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	2201      	movs	r2, #1
 8002844:	4393      	bics	r3, r2
 8002846:	001a      	movs	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	22f0      	movs	r2, #240	@ 0xf0
 8002856:	4393      	bics	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	220a      	movs	r2, #10
 8002868:	4393      	bics	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	621a      	str	r2, [r3, #32]
}
 8002880:	46c0      	nop			@ (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b006      	add	sp, #24
 8002886:	bd80      	pop	{r7, pc}

08002888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	2210      	movs	r2, #16
 80028a0:	4393      	bics	r3, r2
 80028a2:	001a      	movs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <TIM_TI2_ConfigInputStage+0x60>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	031b      	lsls	r3, r3, #12
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	22a0      	movs	r2, #160	@ 0xa0
 80028c4:	4393      	bics	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	621a      	str	r2, [r3, #32]
}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b006      	add	sp, #24
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	ffff0fff 	.word	0xffff0fff

080028ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a08      	ldr	r2, [pc, #32]	@ (8002920 <TIM_ITRx_SetConfig+0x34>)
 8002900:	4013      	ands	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	2207      	movs	r2, #7
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	609a      	str	r2, [r3, #8]
}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	b004      	add	sp, #16
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	ffcfff8f 	.word	0xffcfff8f

08002924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4a09      	ldr	r2, [pc, #36]	@ (8002960 <TIM_ETR_SetConfig+0x3c>)
 800293c:	4013      	ands	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	021a      	lsls	r2, r3, #8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	431a      	orrs	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b006      	add	sp, #24
 800295e:	bd80      	pop	{r7, pc}
 8002960:	ffff00ff 	.word	0xffff00ff

08002964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	221f      	movs	r2, #31
 8002974:	4013      	ands	r3, r2
 8002976:	2201      	movs	r2, #1
 8002978:	409a      	lsls	r2, r3
 800297a:	0013      	movs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	43d2      	mvns	r2, r2
 8002986:	401a      	ands	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	211f      	movs	r1, #31
 8002994:	400b      	ands	r3, r1
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4099      	lsls	r1, r3
 800299a:	000b      	movs	r3, r1
 800299c:	431a      	orrs	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b006      	add	sp, #24
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	223c      	movs	r2, #60	@ 0x3c
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e04a      	b.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	223c      	movs	r2, #60	@ 0x3c
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	223d      	movs	r2, #61	@ 0x3d
 80029d0:	2102      	movs	r1, #2
 80029d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d108      	bne.n	8002a00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2270      	movs	r2, #112	@ 0x70
 8002a04:	4393      	bics	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a11      	ldr	r2, [pc, #68]	@ (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a10      	ldr	r2, [pc, #64]	@ (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10c      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2280      	movs	r2, #128	@ 0x80
 8002a32:	4393      	bics	r3, r2
 8002a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	223d      	movs	r2, #61	@ 0x3d
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	223c      	movs	r2, #60	@ 0x3c
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	ff0fffff 	.word	0xff0fffff
 8002a6c:	40000400 	.word	0x40000400

08002a70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223c      	movs	r2, #60	@ 0x3c
 8002a82:	5c9b      	ldrb	r3, [r3, r2]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e079      	b.n	8002b80 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	223c      	movs	r2, #60	@ 0x3c
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	22ff      	movs	r2, #255	@ 0xff
 8002a98:	4393      	bics	r3, r2
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a38      	ldr	r2, [pc, #224]	@ (8002b88 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a35      	ldr	r2, [pc, #212]	@ (8002b8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a33      	ldr	r2, [pc, #204]	@ (8002b90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a30      	ldr	r2, [pc, #192]	@ (8002b94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a2e      	ldr	r2, [pc, #184]	@ (8002b98 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a2b      	ldr	r2, [pc, #172]	@ (8002b9c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002aee:	401a      	ands	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a29      	ldr	r2, [pc, #164]	@ (8002ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002afc:	401a      	ands	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a25      	ldr	r2, [pc, #148]	@ (8002ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d106      	bne.n	8002b20 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a24      	ldr	r2, [pc, #144]	@ (8002ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002b16:	401a      	ands	r2, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d121      	bne.n	8002b6e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002b2e:	401a      	ands	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	051b      	lsls	r3, r3, #20
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002b3e:	401a      	ands	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d106      	bne.n	8002b6e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a15      	ldr	r2, [pc, #84]	@ (8002bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002b64:	401a      	ands	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223c      	movs	r2, #60	@ 0x3c
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b004      	add	sp, #16
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	fffffcff 	.word	0xfffffcff
 8002b8c:	fffffbff 	.word	0xfffffbff
 8002b90:	fffff7ff 	.word	0xfffff7ff
 8002b94:	ffffefff 	.word	0xffffefff
 8002b98:	ffffdfff 	.word	0xffffdfff
 8002b9c:	ffffbfff 	.word	0xffffbfff
 8002ba0:	fff0ffff 	.word	0xfff0ffff
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	efffffff 	.word	0xefffffff
 8002bac:	ff0fffff 	.word	0xff0fffff
 8002bb0:	feffffff 	.word	0xfeffffff
 8002bb4:	fdffffff 	.word	0xfdffffff
 8002bb8:	dfffffff 	.word	0xdfffffff

08002bbc <malloc>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	4b03      	ldr	r3, [pc, #12]	@ (8002bcc <malloc+0x10>)
 8002bc0:	0001      	movs	r1, r0
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	f000 f826 	bl	8002c14 <_malloc_r>
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	2000000c 	.word	0x2000000c

08002bd0 <sbrk_aligned>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	4e0f      	ldr	r6, [pc, #60]	@ (8002c10 <sbrk_aligned+0x40>)
 8002bd4:	000d      	movs	r5, r1
 8002bd6:	6831      	ldr	r1, [r6, #0]
 8002bd8:	0004      	movs	r4, r0
 8002bda:	2900      	cmp	r1, #0
 8002bdc:	d102      	bne.n	8002be4 <sbrk_aligned+0x14>
 8002bde:	f000 f8b1 	bl	8002d44 <_sbrk_r>
 8002be2:	6030      	str	r0, [r6, #0]
 8002be4:	0029      	movs	r1, r5
 8002be6:	0020      	movs	r0, r4
 8002be8:	f000 f8ac 	bl	8002d44 <_sbrk_r>
 8002bec:	1c43      	adds	r3, r0, #1
 8002bee:	d103      	bne.n	8002bf8 <sbrk_aligned+0x28>
 8002bf0:	2501      	movs	r5, #1
 8002bf2:	426d      	negs	r5, r5
 8002bf4:	0028      	movs	r0, r5
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	1cc5      	adds	r5, r0, #3
 8002bfc:	439d      	bics	r5, r3
 8002bfe:	42a8      	cmp	r0, r5
 8002c00:	d0f8      	beq.n	8002bf4 <sbrk_aligned+0x24>
 8002c02:	1a29      	subs	r1, r5, r0
 8002c04:	0020      	movs	r0, r4
 8002c06:	f000 f89d 	bl	8002d44 <_sbrk_r>
 8002c0a:	3001      	adds	r0, #1
 8002c0c:	d1f2      	bne.n	8002bf4 <sbrk_aligned+0x24>
 8002c0e:	e7ef      	b.n	8002bf0 <sbrk_aligned+0x20>
 8002c10:	20000178 	.word	0x20000178

08002c14 <_malloc_r>:
 8002c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c16:	2203      	movs	r2, #3
 8002c18:	1ccb      	adds	r3, r1, #3
 8002c1a:	4393      	bics	r3, r2
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	0005      	movs	r5, r0
 8002c20:	001f      	movs	r7, r3
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d234      	bcs.n	8002c90 <_malloc_r+0x7c>
 8002c26:	270c      	movs	r7, #12
 8002c28:	42b9      	cmp	r1, r7
 8002c2a:	d833      	bhi.n	8002c94 <_malloc_r+0x80>
 8002c2c:	0028      	movs	r0, r5
 8002c2e:	f000 f871 	bl	8002d14 <__malloc_lock>
 8002c32:	4e37      	ldr	r6, [pc, #220]	@ (8002d10 <_malloc_r+0xfc>)
 8002c34:	6833      	ldr	r3, [r6, #0]
 8002c36:	001c      	movs	r4, r3
 8002c38:	2c00      	cmp	r4, #0
 8002c3a:	d12f      	bne.n	8002c9c <_malloc_r+0x88>
 8002c3c:	0039      	movs	r1, r7
 8002c3e:	0028      	movs	r0, r5
 8002c40:	f7ff ffc6 	bl	8002bd0 <sbrk_aligned>
 8002c44:	0004      	movs	r4, r0
 8002c46:	1c43      	adds	r3, r0, #1
 8002c48:	d15f      	bne.n	8002d0a <_malloc_r+0xf6>
 8002c4a:	6834      	ldr	r4, [r6, #0]
 8002c4c:	9400      	str	r4, [sp, #0]
 8002c4e:	9b00      	ldr	r3, [sp, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d14a      	bne.n	8002cea <_malloc_r+0xd6>
 8002c54:	2c00      	cmp	r4, #0
 8002c56:	d052      	beq.n	8002cfe <_malloc_r+0xea>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	0028      	movs	r0, r5
 8002c5c:	18e3      	adds	r3, r4, r3
 8002c5e:	9900      	ldr	r1, [sp, #0]
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	f000 f86f 	bl	8002d44 <_sbrk_r>
 8002c66:	9b01      	ldr	r3, [sp, #4]
 8002c68:	4283      	cmp	r3, r0
 8002c6a:	d148      	bne.n	8002cfe <_malloc_r+0xea>
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	0028      	movs	r0, r5
 8002c70:	1aff      	subs	r7, r7, r3
 8002c72:	0039      	movs	r1, r7
 8002c74:	f7ff ffac 	bl	8002bd0 <sbrk_aligned>
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d040      	beq.n	8002cfe <_malloc_r+0xea>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	19db      	adds	r3, r3, r7
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	6833      	ldr	r3, [r6, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	2a00      	cmp	r2, #0
 8002c88:	d133      	bne.n	8002cf2 <_malloc_r+0xde>
 8002c8a:	9b00      	ldr	r3, [sp, #0]
 8002c8c:	6033      	str	r3, [r6, #0]
 8002c8e:	e019      	b.n	8002cc4 <_malloc_r+0xb0>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	dac9      	bge.n	8002c28 <_malloc_r+0x14>
 8002c94:	230c      	movs	r3, #12
 8002c96:	602b      	str	r3, [r5, #0]
 8002c98:	2000      	movs	r0, #0
 8002c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c9c:	6821      	ldr	r1, [r4, #0]
 8002c9e:	1bc9      	subs	r1, r1, r7
 8002ca0:	d420      	bmi.n	8002ce4 <_malloc_r+0xd0>
 8002ca2:	290b      	cmp	r1, #11
 8002ca4:	d90a      	bls.n	8002cbc <_malloc_r+0xa8>
 8002ca6:	19e2      	adds	r2, r4, r7
 8002ca8:	6027      	str	r7, [r4, #0]
 8002caa:	42a3      	cmp	r3, r4
 8002cac:	d104      	bne.n	8002cb8 <_malloc_r+0xa4>
 8002cae:	6032      	str	r2, [r6, #0]
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	6011      	str	r1, [r2, #0]
 8002cb4:	6053      	str	r3, [r2, #4]
 8002cb6:	e005      	b.n	8002cc4 <_malloc_r+0xb0>
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e7f9      	b.n	8002cb0 <_malloc_r+0x9c>
 8002cbc:	6862      	ldr	r2, [r4, #4]
 8002cbe:	42a3      	cmp	r3, r4
 8002cc0:	d10e      	bne.n	8002ce0 <_malloc_r+0xcc>
 8002cc2:	6032      	str	r2, [r6, #0]
 8002cc4:	0028      	movs	r0, r5
 8002cc6:	f000 f82d 	bl	8002d24 <__malloc_unlock>
 8002cca:	0020      	movs	r0, r4
 8002ccc:	2207      	movs	r2, #7
 8002cce:	300b      	adds	r0, #11
 8002cd0:	1d23      	adds	r3, r4, #4
 8002cd2:	4390      	bics	r0, r2
 8002cd4:	1ac2      	subs	r2, r0, r3
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d0df      	beq.n	8002c9a <_malloc_r+0x86>
 8002cda:	1a1b      	subs	r3, r3, r0
 8002cdc:	50a3      	str	r3, [r4, r2]
 8002cde:	e7dc      	b.n	8002c9a <_malloc_r+0x86>
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	e7ef      	b.n	8002cc4 <_malloc_r+0xb0>
 8002ce4:	0023      	movs	r3, r4
 8002ce6:	6864      	ldr	r4, [r4, #4]
 8002ce8:	e7a6      	b.n	8002c38 <_malloc_r+0x24>
 8002cea:	9c00      	ldr	r4, [sp, #0]
 8002cec:	6863      	ldr	r3, [r4, #4]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	e7ad      	b.n	8002c4e <_malloc_r+0x3a>
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	42a3      	cmp	r3, r4
 8002cf8:	d1fb      	bne.n	8002cf2 <_malloc_r+0xde>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e7da      	b.n	8002cb4 <_malloc_r+0xa0>
 8002cfe:	230c      	movs	r3, #12
 8002d00:	0028      	movs	r0, r5
 8002d02:	602b      	str	r3, [r5, #0]
 8002d04:	f000 f80e 	bl	8002d24 <__malloc_unlock>
 8002d08:	e7c6      	b.n	8002c98 <_malloc_r+0x84>
 8002d0a:	6007      	str	r7, [r0, #0]
 8002d0c:	e7da      	b.n	8002cc4 <_malloc_r+0xb0>
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	2000017c 	.word	0x2000017c

08002d14 <__malloc_lock>:
 8002d14:	b510      	push	{r4, lr}
 8002d16:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <__malloc_lock+0xc>)
 8002d18:	f000 f850 	bl	8002dbc <__retarget_lock_acquire_recursive>
 8002d1c:	bd10      	pop	{r4, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	200002bc 	.word	0x200002bc

08002d24 <__malloc_unlock>:
 8002d24:	b510      	push	{r4, lr}
 8002d26:	4802      	ldr	r0, [pc, #8]	@ (8002d30 <__malloc_unlock+0xc>)
 8002d28:	f000 f849 	bl	8002dbe <__retarget_lock_release_recursive>
 8002d2c:	bd10      	pop	{r4, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	200002bc 	.word	0x200002bc

08002d34 <memset>:
 8002d34:	0003      	movs	r3, r0
 8002d36:	1882      	adds	r2, r0, r2
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d100      	bne.n	8002d3e <memset+0xa>
 8002d3c:	4770      	bx	lr
 8002d3e:	7019      	strb	r1, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	e7f9      	b.n	8002d38 <memset+0x4>

08002d44 <_sbrk_r>:
 8002d44:	2300      	movs	r3, #0
 8002d46:	b570      	push	{r4, r5, r6, lr}
 8002d48:	4d06      	ldr	r5, [pc, #24]	@ (8002d64 <_sbrk_r+0x20>)
 8002d4a:	0004      	movs	r4, r0
 8002d4c:	0008      	movs	r0, r1
 8002d4e:	602b      	str	r3, [r5, #0]
 8002d50:	f7fd fe08 	bl	8000964 <_sbrk>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d103      	bne.n	8002d60 <_sbrk_r+0x1c>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d000      	beq.n	8002d60 <_sbrk_r+0x1c>
 8002d5e:	6023      	str	r3, [r4, #0]
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	200002b8 	.word	0x200002b8

08002d68 <__errno>:
 8002d68:	4b01      	ldr	r3, [pc, #4]	@ (8002d70 <__errno+0x8>)
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	4770      	bx	lr
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	2000000c 	.word	0x2000000c

08002d74 <__libc_init_array>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	2600      	movs	r6, #0
 8002d78:	4c0c      	ldr	r4, [pc, #48]	@ (8002dac <__libc_init_array+0x38>)
 8002d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8002db0 <__libc_init_array+0x3c>)
 8002d7c:	1b64      	subs	r4, r4, r5
 8002d7e:	10a4      	asrs	r4, r4, #2
 8002d80:	42a6      	cmp	r6, r4
 8002d82:	d109      	bne.n	8002d98 <__libc_init_array+0x24>
 8002d84:	2600      	movs	r6, #0
 8002d86:	f000 f825 	bl	8002dd4 <_init>
 8002d8a:	4c0a      	ldr	r4, [pc, #40]	@ (8002db4 <__libc_init_array+0x40>)
 8002d8c:	4d0a      	ldr	r5, [pc, #40]	@ (8002db8 <__libc_init_array+0x44>)
 8002d8e:	1b64      	subs	r4, r4, r5
 8002d90:	10a4      	asrs	r4, r4, #2
 8002d92:	42a6      	cmp	r6, r4
 8002d94:	d105      	bne.n	8002da2 <__libc_init_array+0x2e>
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	00b3      	lsls	r3, r6, #2
 8002d9a:	58eb      	ldr	r3, [r5, r3]
 8002d9c:	4798      	blx	r3
 8002d9e:	3601      	adds	r6, #1
 8002da0:	e7ee      	b.n	8002d80 <__libc_init_array+0xc>
 8002da2:	00b3      	lsls	r3, r6, #2
 8002da4:	58eb      	ldr	r3, [r5, r3]
 8002da6:	4798      	blx	r3
 8002da8:	3601      	adds	r6, #1
 8002daa:	e7f2      	b.n	8002d92 <__libc_init_array+0x1e>
 8002dac:	08002f14 	.word	0x08002f14
 8002db0:	08002f14 	.word	0x08002f14
 8002db4:	08002f18 	.word	0x08002f18
 8002db8:	08002f14 	.word	0x08002f14

08002dbc <__retarget_lock_acquire_recursive>:
 8002dbc:	4770      	bx	lr

08002dbe <__retarget_lock_release_recursive>:
 8002dbe:	4770      	bx	lr

08002dc0 <memcpy>:
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	b510      	push	{r4, lr}
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d100      	bne.n	8002dca <memcpy+0xa>
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	5ccc      	ldrb	r4, [r1, r3]
 8002dcc:	54c4      	strb	r4, [r0, r3]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	e7f8      	b.n	8002dc4 <memcpy+0x4>
	...

08002dd4 <_init>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr

08002de0 <_fini>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr
