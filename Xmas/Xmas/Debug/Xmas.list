
Xmas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000251c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080025dc  080025dc  000035dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026d0  080026d0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080026d0  080026d0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026d0  080026d0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026d0  080026d0  000036d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026d4  080026d4  000036d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080026d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080026e4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080026e4  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087dd  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e0  00000000  00000000  0000c811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0000def8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000766  00000000  00000000  0000e888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000123d4  00000000  00000000  0000efee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae21  00000000  00000000  000213c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074f8b  00000000  00000000  0002c1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a116e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002220  00000000  00000000  000a11b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000a33d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025c4 	.word	0x080025c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080025c4 	.word	0x080025c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b09b      	sub	sp, #108	@ 0x6c
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa56 	bl	80006d6 <HAL_Init>

  /* USER CODE BEGIN Init */
 // uint32_t melody_tone[] = {800, 956, 758};
 // uint32_t melody_dur[] = {1000, 1300, 1600};
  HAL_TIM_PWM_DeInit(&htim1);
 800022a:	4b2b      	ldr	r3, [pc, #172]	@ (80002d8 <main+0xb8>)
 800022c:	0018      	movs	r0, r3
 800022e:	f001 f8f1 	bl	8001414 <HAL_TIM_PWM_DeInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f857 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f963 	bl	8000500 <MX_GPIO_Init>
  MX_TIM1_Init();
 800023a:	f000 f897 	bl	800036c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //melody1 is notes of jingle_bells melody  {E4, E4, E4, E4, E4, E4, E4, G4, C4 , D4 , E4, F4, F4, F4, F4, F4, E4, E4, E4, D4, D4, E4, D4, G4}
  uint16_t melody1[] = {329, 329, 329, 329, 329, 329, 329, 392, 261, 293, 329, 349, 349, 349, 349, 349, 329, 329, 329, 293, 293, 329, 293, 392};
 800023e:	2330      	movs	r3, #48	@ 0x30
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	4a26      	ldr	r2, [pc, #152]	@ (80002dc <main+0xbc>)
 8000244:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000246:	c313      	stmia	r3!, {r0, r1, r4}
 8000248:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024a:	c313      	stmia	r3!, {r0, r1, r4}
 800024c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024e:	c313      	stmia	r3!, {r0, r1, r4}
 8000250:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000252:	c313      	stmia	r3!, {r0, r1, r4}

  //duration of melodies
  uint16_t duration_melody[] = {250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250};
 8000254:	003b      	movs	r3, r7
 8000256:	4a22      	ldr	r2, [pc, #136]	@ (80002e0 <main+0xc0>)
 8000258:	ca13      	ldmia	r2!, {r0, r1, r4}
 800025a:	c313      	stmia	r3!, {r0, r1, r4}
 800025c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800025e:	c313      	stmia	r3!, {r0, r1, r4}
 8000260:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000262:	c313      	stmia	r3!, {r0, r1, r4}
 8000264:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000266:	c313      	stmia	r3!, {r0, r1, r4}

  uint16_t brmelody = sizeof(melody1)/sizeof(uint16_t);
 8000268:	2362      	movs	r3, #98	@ 0x62
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	2218      	movs	r2, #24
 800026e:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  htim1.Instance->CCR1 = 50;
 8000270:	4b19      	ldr	r3, [pc, #100]	@ (80002d8 <main+0xb8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2232      	movs	r2, #50	@ 0x32
 8000276:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000278:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <main+0xb8>)
 800027a:	2100      	movs	r1, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f937 	bl	80014f0 <HAL_TIM_PWM_Start>
	  for(int i = 0 ; i < brmelody; i++)
 8000282:	2300      	movs	r3, #0
 8000284:	667b      	str	r3, [r7, #100]	@ 0x64
 8000286:	e011      	b.n	80002ac <main+0x8c>
	  {
		  melody(&htim1, melody1[i], duration_melody[i]);
 8000288:	2330      	movs	r3, #48	@ 0x30
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	5ad3      	ldrh	r3, [r2, r3]
 8000292:	0019      	movs	r1, r3
 8000294:	003b      	movs	r3, r7
 8000296:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000298:	0052      	lsls	r2, r2, #1
 800029a:	5ad3      	ldrh	r3, [r2, r3]
 800029c:	001a      	movs	r2, r3
 800029e:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <main+0xb8>)
 80002a0:	0018      	movs	r0, r3
 80002a2:	f002 f929 	bl	80024f8 <melody>
	  for(int i = 0 ; i < brmelody; i++)
 80002a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80002a8:	3301      	adds	r3, #1
 80002aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80002ac:	2362      	movs	r3, #98	@ 0x62
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80002b4:	429a      	cmp	r2, r3
 80002b6:	dbe7      	blt.n	8000288 <main+0x68>

	  }

	  //HAL_Delay(100ULL);
	  htim1.Instance->CCR1 = 0;
 80002b8:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <main+0xb8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2200      	movs	r2, #0
 80002be:	635a      	str	r2, [r3, #52]	@ 0x34

	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80002c0:	4b05      	ldr	r3, [pc, #20]	@ (80002d8 <main+0xb8>)
 80002c2:	2100      	movs	r1, #0
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 f9eb 	bl	80016a0 <HAL_TIM_PWM_Stop>
	  HAL_Delay(1000ULL);
 80002ca:	23fa      	movs	r3, #250	@ 0xfa
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fa7e 	bl	80007d0 <HAL_Delay>
	  htim1.Instance->CCR1 = 50;
 80002d4:	e7cc      	b.n	8000270 <main+0x50>
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	20000028 	.word	0x20000028
 80002dc:	080025dc 	.word	0x080025dc
 80002e0:	0800260c 	.word	0x0800260c

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b590      	push	{r4, r7, lr}
 80002e6:	b08d      	sub	sp, #52	@ 0x34
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	2414      	movs	r4, #20
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	0018      	movs	r0, r3
 80002f0:	231c      	movs	r3, #28
 80002f2:	001a      	movs	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	f002 f939 	bl	800256c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fa:	003b      	movs	r3, r7
 80002fc:	0018      	movs	r0, r3
 80002fe:	2314      	movs	r3, #20
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f002 f932 	bl	800256c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2202      	movs	r2, #2
 800030c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2280      	movs	r2, #128	@ 0x80
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000316:	193b      	adds	r3, r7, r4
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031c:	193b      	adds	r3, r7, r4
 800031e:	2240      	movs	r2, #64	@ 0x40
 8000320:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	193b      	adds	r3, r7, r4
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fc95 	bl	8000c54 <HAL_RCC_OscConfig>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800032e:	f000 f8fd 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	003b      	movs	r3, r7
 8000334:	2207      	movs	r2, #7
 8000336:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000338:	003b      	movs	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	003b      	movs	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000344:	003b      	movs	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	003b      	movs	r3, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0018      	movs	r0, r3
 8000356:	f000 fe61 	bl	800101c <HAL_RCC_ClockConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800035e:	f000 f8e5 	bl	800052c <Error_Handler>
  }
}
 8000362:	46c0      	nop			@ (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	b00d      	add	sp, #52	@ 0x34
 8000368:	bd90      	pop	{r4, r7, pc}
	...

0800036c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b09c      	sub	sp, #112	@ 0x70
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000372:	2360      	movs	r3, #96	@ 0x60
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	0018      	movs	r0, r3
 8000378:	2310      	movs	r3, #16
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 f8f5 	bl	800256c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000382:	2354      	movs	r3, #84	@ 0x54
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	0018      	movs	r0, r3
 8000388:	230c      	movs	r3, #12
 800038a:	001a      	movs	r2, r3
 800038c:	2100      	movs	r1, #0
 800038e:	f002 f8ed 	bl	800256c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000392:	2338      	movs	r3, #56	@ 0x38
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	0018      	movs	r0, r3
 8000398:	231c      	movs	r3, #28
 800039a:	001a      	movs	r2, r3
 800039c:	2100      	movs	r1, #0
 800039e:	f002 f8e5 	bl	800256c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	0018      	movs	r0, r3
 80003a6:	2334      	movs	r3, #52	@ 0x34
 80003a8:	001a      	movs	r2, r3
 80003aa:	2100      	movs	r1, #0
 80003ac:	f002 f8de 	bl	800256c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b0:	4b51      	ldr	r3, [pc, #324]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80003b2:	4a52      	ldr	r2, [pc, #328]	@ (80004fc <MX_TIM1_Init+0x190>)
 80003b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 80003b6:	4b50      	ldr	r3, [pc, #320]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80003b8:	22e0      	movs	r2, #224	@ 0xe0
 80003ba:	32ff      	adds	r2, #255	@ 0xff
 80003bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b4e      	ldr	r3, [pc, #312]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80003c4:	4b4c      	ldr	r3, [pc, #304]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80003c6:	2232      	movs	r2, #50	@ 0x32
 80003c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ca:	4b4b      	ldr	r3, [pc, #300]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d0:	4b49      	ldr	r3, [pc, #292]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d6:	4b48      	ldr	r3, [pc, #288]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003dc:	4b46      	ldr	r3, [pc, #280]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 ff68 	bl	80012b4 <HAL_TIM_Base_Init>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80003e8:	f000 f8a0 	bl	800052c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ec:	2160      	movs	r1, #96	@ 0x60
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2280      	movs	r2, #128	@ 0x80
 80003f2:	0152      	lsls	r2, r2, #5
 80003f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003f6:	187a      	adds	r2, r7, r1
 80003f8:	4b3f      	ldr	r3, [pc, #252]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80003fa:	0011      	movs	r1, r2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fad5 	bl	80019ac <HAL_TIM_ConfigClockSource>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000406:	f000 f891 	bl	800052c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800040a:	4b3b      	ldr	r3, [pc, #236]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 800040c:	0018      	movs	r0, r3
 800040e:	f000 ffa9 	bl	8001364 <HAL_TIM_PWM_Init>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000416:	f000 f889 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041a:	2154      	movs	r1, #84	@ 0x54
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2200      	movs	r2, #0
 8000426:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800042e:	187a      	adds	r2, r7, r1
 8000430:	4b31      	ldr	r3, [pc, #196]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 8000432:	0011      	movs	r1, r2
 8000434:	0018      	movs	r0, r3
 8000436:	f001 ff57 	bl	80022e8 <HAL_TIMEx_MasterConfigSynchronization>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800043e:	f000 f875 	bl	800052c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000442:	2138      	movs	r1, #56	@ 0x38
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2260      	movs	r2, #96	@ 0x60
 8000448:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2200      	movs	r2, #0
 800044e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800046e:	1879      	adds	r1, r7, r1
 8000470:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 8000472:	2200      	movs	r2, #0
 8000474:	0018      	movs	r0, r3
 8000476:	f001 f999 	bl	80017ac <HAL_TIM_PWM_ConfigChannel>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800047e:	f000 f855 	bl	800052c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2280      	movs	r2, #128	@ 0x80
 80004a4:	0192      	lsls	r2, r2, #6
 80004a6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0492      	lsls	r2, r2, #18
 80004c0:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004d4:	1d3a      	adds	r2, r7, #4
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 ff66 	bl	80023ac <HAL_TIMEx_ConfigBreakDeadTime>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 80004e4:	f000 f822 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <MX_TIM1_Init+0x18c>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 f868 	bl	80005c0 <HAL_TIM_MspPostInit>

}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b01c      	add	sp, #112	@ 0x70
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000028 	.word	0x20000028
 80004fc:	40012c00 	.word	0x40012c00

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <MX_GPIO_Init+0x28>)
 8000508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800050a:	4b07      	ldr	r3, [pc, #28]	@ (8000528 <MX_GPIO_Init+0x28>)
 800050c:	2101      	movs	r1, #1
 800050e:	430a      	orrs	r2, r1
 8000510:	635a      	str	r2, [r3, #52]	@ 0x34
 8000512:	4b05      	ldr	r3, [pc, #20]	@ (8000528 <MX_GPIO_Init+0x28>)
 8000514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	40021000 	.word	0x40021000

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	e7fd      	b.n	8000534 <Error_Handler+0x8>

08000538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <HAL_MspInit+0x44>)
 8000540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <HAL_MspInit+0x44>)
 8000544:	2101      	movs	r1, #1
 8000546:	430a      	orrs	r2, r1
 8000548:	641a      	str	r2, [r3, #64]	@ 0x40
 800054a:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <HAL_MspInit+0x44>)
 800054c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054e:	2201      	movs	r2, #1
 8000550:	4013      	ands	r3, r2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <HAL_MspInit+0x44>)
 8000558:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800055a:	4b08      	ldr	r3, [pc, #32]	@ (800057c <HAL_MspInit+0x44>)
 800055c:	2180      	movs	r1, #128	@ 0x80
 800055e:	0549      	lsls	r1, r1, #21
 8000560:	430a      	orrs	r2, r1
 8000562:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000564:	4b05      	ldr	r3, [pc, #20]	@ (800057c <HAL_MspInit+0x44>)
 8000566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000568:	2380      	movs	r3, #128	@ 0x80
 800056a:	055b      	lsls	r3, r3, #21
 800056c:	4013      	ands	r3, r2
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b002      	add	sp, #8
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	40021000 	.word	0x40021000

08000580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <HAL_TIM_Base_MspInit+0x38>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d10d      	bne.n	80005ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <HAL_TIM_Base_MspInit+0x3c>)
 8000594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <HAL_TIM_Base_MspInit+0x3c>)
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	0109      	lsls	r1, r1, #4
 800059c:	430a      	orrs	r2, r1
 800059e:	641a      	str	r2, [r3, #64]	@ 0x40
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <HAL_TIM_Base_MspInit+0x3c>)
 80005a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b004      	add	sp, #16
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	40012c00 	.word	0x40012c00
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b089      	sub	sp, #36	@ 0x24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	240c      	movs	r4, #12
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	0018      	movs	r0, r3
 80005ce:	2314      	movs	r3, #20
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f001 ffca 	bl	800256c <memset>
  if(htim->Instance==TIM1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a14      	ldr	r2, [pc, #80]	@ (8000630 <HAL_TIM_MspPostInit+0x70>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d122      	bne.n	8000628 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <HAL_TIM_MspPostInit+0x74>)
 80005e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <HAL_TIM_MspPostInit+0x74>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <HAL_TIM_MspPostInit+0x74>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005fa:	0021      	movs	r1, r4
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2220      	movs	r2, #32
 8000600:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2202      	movs	r2, #2
 8000606:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2202      	movs	r2, #2
 8000612:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2205      	movs	r2, #5
 8000618:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	187a      	adds	r2, r7, r1
 800061c:	23a0      	movs	r3, #160	@ 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f9ac 	bl	8000980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b009      	add	sp, #36	@ 0x24
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	40012c00 	.word	0x40012c00
 8000634:	40021000 	.word	0x40021000

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	e7fd      	b.n	800063c <NMI_Handler+0x4>

08000640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	e7fd      	b.n	8000644 <HardFault_Handler+0x4>

08000648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000660:	f000 f89a 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000670:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <SystemInit+0x14>)
 8000672:	2280      	movs	r2, #128	@ 0x80
 8000674:	0512      	lsls	r2, r2, #20
 8000676:	609a      	str	r2, [r3, #8]
#endif
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000684:	480d      	ldr	r0, [pc, #52]	@ (80006bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000686:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000688:	f7ff fff0 	bl	800066c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800068c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800068e:	e003      	b.n	8000698 <LoopCopyDataInit>

08000690 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000692:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000694:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000696:	3104      	adds	r1, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000698:	480a      	ldr	r0, [pc, #40]	@ (80006c4 <LoopForever+0xa>)
  ldr r3, =_edata
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <LoopForever+0xe>)
  adds r2, r0, r1
 800069c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800069e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a0:	d3f6      	bcc.n	8000690 <CopyDataInit>
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <LoopForever+0x12>)
  b LoopFillZerobss
 80006a4:	e002      	b.n	80006ac <LoopFillZerobss>

080006a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80006a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006aa:	3204      	adds	r2, #4

080006ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <LoopForever+0x16>)
  cmp r2, r3
 80006ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b0:	d3f9      	bcc.n	80006a6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80006b2:	f001 ff63 	bl	800257c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fdb3 	bl	8000220 <main>

080006ba <LoopForever>:

LoopForever:
    b LoopForever
 80006ba:	e7fe      	b.n	80006ba <LoopForever>
  ldr   r0, =_estack
 80006bc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80006c0:	080026d8 	.word	0x080026d8
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006cc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80006d0:	20000078 	.word	0x20000078

080006d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_IRQHandler>

080006d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006e2:	2003      	movs	r0, #3
 80006e4:	f000 f80e 	bl	8000704 <HAL_InitTick>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d003      	beq.n	80006f4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
 80006f2:	e001      	b.n	80006f8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006f4:	f7ff ff20 	bl	8000538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	781b      	ldrb	r3, [r3, #0]
}
 80006fc:	0018      	movs	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	b002      	add	sp, #8
 8000702:	bd80      	pop	{r7, pc}

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800070c:	230f      	movs	r3, #15
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000714:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <HAL_InitTick+0x88>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d02b      	beq.n	8000774 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800071c:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <HAL_InitTick+0x8c>)
 800071e:	681c      	ldr	r4, [r3, #0]
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <HAL_InitTick+0x88>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	0019      	movs	r1, r3
 8000726:	23fa      	movs	r3, #250	@ 0xfa
 8000728:	0098      	lsls	r0, r3, #2
 800072a:	f7ff fced 	bl	8000108 <__udivsi3>
 800072e:	0003      	movs	r3, r0
 8000730:	0019      	movs	r1, r3
 8000732:	0020      	movs	r0, r4
 8000734:	f7ff fce8 	bl	8000108 <__udivsi3>
 8000738:	0003      	movs	r3, r0
 800073a:	0018      	movs	r0, r3
 800073c:	f000 f913 	bl	8000966 <HAL_SYSTICK_Config>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d112      	bne.n	800076a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d80a      	bhi.n	8000760 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	2301      	movs	r3, #1
 800074e:	425b      	negs	r3, r3
 8000750:	2200      	movs	r2, #0
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f8f2 	bl	800093c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <HAL_InitTick+0x90>)
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	e00d      	b.n	800077c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000760:	230f      	movs	r3, #15
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e008      	b.n	800077c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800076a:	230f      	movs	r3, #15
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e003      	b.n	800077c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000774:	230f      	movs	r3, #15
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800077c:	230f      	movs	r3, #15
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	781b      	ldrb	r3, [r3, #0]
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	b005      	add	sp, #20
 8000788:	bd90      	pop	{r4, r7, pc}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	20000008 	.word	0x20000008
 8000790:	20000000 	.word	0x20000000
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_IncTick+0x1c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	001a      	movs	r2, r3
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_IncTick+0x20>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	18d2      	adds	r2, r2, r3
 80007a8:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <HAL_IncTick+0x20>)
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000074 	.word	0x20000074

080007bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b02      	ldr	r3, [pc, #8]	@ (80007cc <HAL_GetTick+0x10>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	20000074 	.word	0x20000074

080007d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d8:	f7ff fff0 	bl	80007bc <HAL_GetTick>
 80007dc:	0003      	movs	r3, r0
 80007de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	d005      	beq.n	80007f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <HAL_Delay+0x44>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	001a      	movs	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	189b      	adds	r3, r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	f7ff ffe0 	bl	80007bc <HAL_GetTick>
 80007fc:	0002      	movs	r2, r0
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	429a      	cmp	r2, r3
 8000806:	d8f7      	bhi.n	80007f8 <HAL_Delay+0x28>
  {
  }
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b004      	add	sp, #16
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	20000008 	.word	0x20000008

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	0002      	movs	r2, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b7f      	cmp	r3, #127	@ 0x7f
 800082c:	d828      	bhi.n	8000880 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082e:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <__NVIC_SetPriority+0xd4>)
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b25b      	sxtb	r3, r3
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	33c0      	adds	r3, #192	@ 0xc0
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	589b      	ldr	r3, [r3, r2]
 800083e:	1dfa      	adds	r2, r7, #7
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	0011      	movs	r1, r2
 8000844:	2203      	movs	r2, #3
 8000846:	400a      	ands	r2, r1
 8000848:	00d2      	lsls	r2, r2, #3
 800084a:	21ff      	movs	r1, #255	@ 0xff
 800084c:	4091      	lsls	r1, r2
 800084e:	000a      	movs	r2, r1
 8000850:	43d2      	mvns	r2, r2
 8000852:	401a      	ands	r2, r3
 8000854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	019b      	lsls	r3, r3, #6
 800085a:	22ff      	movs	r2, #255	@ 0xff
 800085c:	401a      	ands	r2, r3
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	0018      	movs	r0, r3
 8000864:	2303      	movs	r3, #3
 8000866:	4003      	ands	r3, r0
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086c:	481f      	ldr	r0, [pc, #124]	@ (80008ec <__NVIC_SetPriority+0xd4>)
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b25b      	sxtb	r3, r3
 8000874:	089b      	lsrs	r3, r3, #2
 8000876:	430a      	orrs	r2, r1
 8000878:	33c0      	adds	r3, #192	@ 0xc0
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800087e:	e031      	b.n	80008e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <__NVIC_SetPriority+0xd8>)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	0019      	movs	r1, r3
 8000888:	230f      	movs	r3, #15
 800088a:	400b      	ands	r3, r1
 800088c:	3b08      	subs	r3, #8
 800088e:	089b      	lsrs	r3, r3, #2
 8000890:	3306      	adds	r3, #6
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	18d3      	adds	r3, r2, r3
 8000896:	3304      	adds	r3, #4
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1dfa      	adds	r2, r7, #7
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	0011      	movs	r1, r2
 80008a0:	2203      	movs	r2, #3
 80008a2:	400a      	ands	r2, r1
 80008a4:	00d2      	lsls	r2, r2, #3
 80008a6:	21ff      	movs	r1, #255	@ 0xff
 80008a8:	4091      	lsls	r1, r2
 80008aa:	000a      	movs	r2, r1
 80008ac:	43d2      	mvns	r2, r2
 80008ae:	401a      	ands	r2, r3
 80008b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	22ff      	movs	r2, #255	@ 0xff
 80008b8:	401a      	ands	r2, r3
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	0018      	movs	r0, r3
 80008c0:	2303      	movs	r3, #3
 80008c2:	4003      	ands	r3, r0
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c8:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <__NVIC_SetPriority+0xd8>)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	001c      	movs	r4, r3
 80008d0:	230f      	movs	r3, #15
 80008d2:	4023      	ands	r3, r4
 80008d4:	3b08      	subs	r3, #8
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	430a      	orrs	r2, r1
 80008da:	3306      	adds	r3, #6
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	18c3      	adds	r3, r0, r3
 80008e0:	3304      	adds	r3, #4
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b003      	add	sp, #12
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	1e5a      	subs	r2, r3, #1
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	045b      	lsls	r3, r3, #17
 8000904:	429a      	cmp	r2, r3
 8000906:	d301      	bcc.n	800090c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000908:	2301      	movs	r3, #1
 800090a:	e010      	b.n	800092e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <SysTick_Config+0x44>)
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	3a01      	subs	r2, #1
 8000912:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000914:	2301      	movs	r3, #1
 8000916:	425b      	negs	r3, r3
 8000918:	2103      	movs	r1, #3
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff ff7c 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <SysTick_Config+0x44>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000926:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <SysTick_Config+0x44>)
 8000928:	2207      	movs	r2, #7
 800092a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800092c:	2300      	movs	r3, #0
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	e000e010 	.word	0xe000e010

0800093c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	210f      	movs	r1, #15
 8000948:	187b      	adds	r3, r7, r1
 800094a:	1c02      	adds	r2, r0, #0
 800094c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	187b      	adds	r3, r7, r1
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b25b      	sxtb	r3, r3
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ff5d 	bl	8000818 <__NVIC_SetPriority>
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b004      	add	sp, #16
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff ffbf 	bl	80008f4 <SysTick_Config>
 8000976:	0003      	movs	r3, r0
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800098e:	e14d      	b.n	8000c2c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4091      	lsls	r1, r2
 800099a:	000a      	movs	r2, r1
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d100      	bne.n	80009a8 <HAL_GPIO_Init+0x28>
 80009a6:	e13e      	b.n	8000c26 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0x38>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2b12      	cmp	r3, #18
 80009b6:	d125      	bne.n	8000a04 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	0092      	lsls	r2, r2, #2
 80009c2:	58d3      	ldr	r3, [r2, r3]
 80009c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	2207      	movs	r2, #7
 80009ca:	4013      	ands	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	220f      	movs	r2, #15
 80009d0:	409a      	lsls	r2, r3
 80009d2:	0013      	movs	r3, r2
 80009d4:	43da      	mvns	r2, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	4013      	ands	r3, r2
 80009da:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	220f      	movs	r2, #15
 80009e2:	401a      	ands	r2, r3
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	2107      	movs	r1, #7
 80009e8:	400b      	ands	r3, r1
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	409a      	lsls	r2, r3
 80009ee:	0013      	movs	r3, r2
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	08da      	lsrs	r2, r3, #3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3208      	adds	r2, #8
 80009fe:	0092      	lsls	r2, r2, #2
 8000a00:	6979      	ldr	r1, [r7, #20]
 8000a02:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	409a      	lsls	r2, r3
 8000a12:	0013      	movs	r3, r2
 8000a14:	43da      	mvns	r2, r3
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	2203      	movs	r2, #3
 8000a22:	401a      	ands	r2, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d00b      	beq.n	8000a58 <HAL_GPIO_Init+0xd8>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d007      	beq.n	8000a58 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a4c:	2b11      	cmp	r3, #17
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2b12      	cmp	r3, #18
 8000a56:	d130      	bne.n	8000aba <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2203      	movs	r2, #3
 8000a64:	409a      	lsls	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68da      	ldr	r2, [r3, #12]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a8e:	2201      	movs	r2, #1
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	43da      	mvns	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	091b      	lsrs	r3, r3, #4
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d017      	beq.n	8000af2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	2380      	movs	r3, #128	@ 0x80
 8000af8:	055b      	lsls	r3, r3, #21
 8000afa:	4013      	ands	r3, r2
 8000afc:	d100      	bne.n	8000b00 <HAL_GPIO_Init+0x180>
 8000afe:	e092      	b.n	8000c26 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000b00:	4a50      	ldr	r2, [pc, #320]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3318      	adds	r3, #24
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	589b      	ldr	r3, [r3, r2]
 8000b0c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	2203      	movs	r2, #3
 8000b12:	4013      	ands	r3, r2
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	220f      	movs	r2, #15
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	43da      	mvns	r2, r3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	4013      	ands	r3, r2
 8000b22:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	23a0      	movs	r3, #160	@ 0xa0
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d013      	beq.n	8000b56 <HAL_GPIO_Init+0x1d6>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a45      	ldr	r2, [pc, #276]	@ (8000c48 <HAL_GPIO_Init+0x2c8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d00d      	beq.n	8000b52 <HAL_GPIO_Init+0x1d2>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a44      	ldr	r2, [pc, #272]	@ (8000c4c <HAL_GPIO_Init+0x2cc>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d007      	beq.n	8000b4e <HAL_GPIO_Init+0x1ce>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a43      	ldr	r2, [pc, #268]	@ (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_GPIO_Init+0x1ca>
 8000b46:	2305      	movs	r3, #5
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x1d8>
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	e004      	b.n	8000b58 <HAL_GPIO_Init+0x1d8>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x1d8>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x1d8>
 8000b56:	2300      	movs	r3, #0
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	00d2      	lsls	r2, r2, #3
 8000b60:	4093      	lsls	r3, r2
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b68:	4936      	ldr	r1, [pc, #216]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3318      	adds	r3, #24
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000b76:	4a33      	ldr	r2, [pc, #204]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000b78:	2380      	movs	r3, #128	@ 0x80
 8000b7a:	58d3      	ldr	r3, [r2, r3]
 8000b7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43da      	mvns	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	4013      	ands	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	2380      	movs	r3, #128	@ 0x80
 8000b8e:	025b      	lsls	r3, r3, #9
 8000b90:	4013      	ands	r3, r2
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000b9c:	4929      	ldr	r1, [pc, #164]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000b9e:	2280      	movs	r2, #128	@ 0x80
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000ba4:	4a27      	ldr	r2, [pc, #156]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000ba6:	2384      	movs	r3, #132	@ 0x84
 8000ba8:	58d3      	ldr	r3, [r2, r3]
 8000baa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	2380      	movs	r3, #128	@ 0x80
 8000bbc:	029b      	lsls	r3, r3, #10
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000bca:	491e      	ldr	r1, [pc, #120]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000bcc:	2284      	movs	r2, #132	@ 0x84
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	4013      	ands	r3, r2
 8000be0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	035b      	lsls	r3, r3, #13
 8000bea:	4013      	ands	r3, r2
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43da      	mvns	r2, r3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	039b      	lsls	r3, r3, #14
 8000c14:	4013      	ands	r3, r2
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	40da      	lsrs	r2, r3
 8000c34:	1e13      	subs	r3, r2, #0
 8000c36:	d000      	beq.n	8000c3a <HAL_GPIO_Init+0x2ba>
 8000c38:	e6aa      	b.n	8000990 <HAL_GPIO_Init+0x10>
  }
}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b006      	add	sp, #24
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021800 	.word	0x40021800
 8000c48:	50000400 	.word	0x50000400
 8000c4c:	50000800 	.word	0x50000800
 8000c50:	50001400 	.word	0x50001400

08000c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e1d0      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d100      	bne.n	8000c72 <HAL_RCC_OscConfig+0x1e>
 8000c70:	e069      	b.n	8000d46 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c72:	4bc8      	ldr	r3, [pc, #800]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2238      	movs	r2, #56	@ 0x38
 8000c78:	4013      	ands	r3, r2
 8000c7a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d105      	bne.n	8000c8e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d15d      	bne.n	8000d46 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e1bc      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	2380      	movs	r3, #128	@ 0x80
 8000c94:	025b      	lsls	r3, r3, #9
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d107      	bne.n	8000caa <HAL_RCC_OscConfig+0x56>
 8000c9a:	4bbe      	ldr	r3, [pc, #760]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4bbd      	ldr	r3, [pc, #756]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000ca0:	2180      	movs	r1, #128	@ 0x80
 8000ca2:	0249      	lsls	r1, r1, #9
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e020      	b.n	8000cec <HAL_RCC_OscConfig+0x98>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	23a0      	movs	r3, #160	@ 0xa0
 8000cb0:	02db      	lsls	r3, r3, #11
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x80>
 8000cb6:	4bb7      	ldr	r3, [pc, #732]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4bb6      	ldr	r3, [pc, #728]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	02c9      	lsls	r1, r1, #11
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	4bb3      	ldr	r3, [pc, #716]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4bb2      	ldr	r3, [pc, #712]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e00b      	b.n	8000cec <HAL_RCC_OscConfig+0x98>
 8000cd4:	4baf      	ldr	r3, [pc, #700]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4bae      	ldr	r3, [pc, #696]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000cda:	49af      	ldr	r1, [pc, #700]	@ (8000f98 <HAL_RCC_OscConfig+0x344>)
 8000cdc:	400a      	ands	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	4bac      	ldr	r3, [pc, #688]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4bab      	ldr	r3, [pc, #684]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000ce6:	49ad      	ldr	r1, [pc, #692]	@ (8000f9c <HAL_RCC_OscConfig+0x348>)
 8000ce8:	400a      	ands	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d014      	beq.n	8000d1e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fd62 	bl	80007bc <HAL_GetTick>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000cfe:	f7ff fd5d 	bl	80007bc <HAL_GetTick>
 8000d02:	0002      	movs	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b64      	cmp	r3, #100	@ 0x64
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e17b      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d10:	4ba0      	ldr	r3, [pc, #640]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	029b      	lsls	r3, r3, #10
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0xaa>
 8000d1c:	e013      	b.n	8000d46 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fd4d 	bl	80007bc <HAL_GetTick>
 8000d22:	0003      	movs	r3, r0
 8000d24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000d28:	f7ff fd48 	bl	80007bc <HAL_GetTick>
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b64      	cmp	r3, #100	@ 0x64
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e166      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d3a:	4b96      	ldr	r3, [pc, #600]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	2380      	movs	r3, #128	@ 0x80
 8000d40:	029b      	lsls	r3, r3, #10
 8000d42:	4013      	ands	r3, r2
 8000d44:	d1f0      	bne.n	8000d28 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d100      	bne.n	8000d52 <HAL_RCC_OscConfig+0xfe>
 8000d50:	e086      	b.n	8000e60 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d52:	4b90      	ldr	r3, [pc, #576]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2238      	movs	r2, #56	@ 0x38
 8000d58:	4013      	ands	r3, r2
 8000d5a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d12f      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e14c      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6e:	4b89      	ldr	r3, [pc, #548]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a8b      	ldr	r2, [pc, #556]	@ (8000fa0 <HAL_RCC_OscConfig+0x34c>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	0019      	movs	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	021a      	lsls	r2, r3, #8
 8000d7e:	4b85      	ldr	r3, [pc, #532]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000d80:	430a      	orrs	r2, r1
 8000d82:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d112      	bne.n	8000db0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d8a:	4b82      	ldr	r3, [pc, #520]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a85      	ldr	r2, [pc, #532]	@ (8000fa4 <HAL_RCC_OscConfig+0x350>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	0019      	movs	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	4b7e      	ldr	r3, [pc, #504]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000d9e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	0adb      	lsrs	r3, r3, #11
 8000da4:	2207      	movs	r2, #7
 8000da6:	4013      	ands	r3, r2
 8000da8:	4a7f      	ldr	r2, [pc, #508]	@ (8000fa8 <HAL_RCC_OscConfig+0x354>)
 8000daa:	40da      	lsrs	r2, r3
 8000dac:	4b7f      	ldr	r3, [pc, #508]	@ (8000fac <HAL_RCC_OscConfig+0x358>)
 8000dae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000db0:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb0 <HAL_RCC_OscConfig+0x35c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fca5 	bl	8000704 <HAL_InitTick>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d050      	beq.n	8000e60 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e122      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d030      	beq.n	8000e2c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000dca:	4b72      	ldr	r3, [pc, #456]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a75      	ldr	r2, [pc, #468]	@ (8000fa4 <HAL_RCC_OscConfig+0x350>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	4b6e      	ldr	r3, [pc, #440]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000dde:	4b6d      	ldr	r3, [pc, #436]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	0049      	lsls	r1, r1, #1
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dec:	f7ff fce6 	bl	80007bc <HAL_GetTick>
 8000df0:	0003      	movs	r3, r0
 8000df2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000df6:	f7ff fce1 	bl	80007bc <HAL_GetTick>
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e0ff      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e08:	4b62      	ldr	r3, [pc, #392]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	4013      	ands	r3, r2
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e14:	4b5f      	ldr	r3, [pc, #380]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	4a61      	ldr	r2, [pc, #388]	@ (8000fa0 <HAL_RCC_OscConfig+0x34c>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	021a      	lsls	r2, r3, #8
 8000e24:	4b5b      	ldr	r3, [pc, #364]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000e26:	430a      	orrs	r2, r1
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	e019      	b.n	8000e60 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000e2c:	4b59      	ldr	r3, [pc, #356]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b58      	ldr	r3, [pc, #352]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000e32:	4960      	ldr	r1, [pc, #384]	@ (8000fb4 <HAL_RCC_OscConfig+0x360>)
 8000e34:	400a      	ands	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e38:	f7ff fcc0 	bl	80007bc <HAL_GetTick>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000e42:	f7ff fcbb 	bl	80007bc <HAL_GetTick>
 8000e46:	0002      	movs	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e0d9      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e54:	4b4f      	ldr	r3, [pc, #316]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d1f0      	bne.n	8000e42 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2208      	movs	r2, #8
 8000e66:	4013      	ands	r3, r2
 8000e68:	d042      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2238      	movs	r2, #56	@ 0x38
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b18      	cmp	r3, #24
 8000e74:	d105      	bne.n	8000e82 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d138      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e0c2      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d019      	beq.n	8000ebe <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000e8a:	4b42      	ldr	r3, [pc, #264]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000e8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e8e:	4b41      	ldr	r3, [pc, #260]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000e90:	2101      	movs	r1, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e96:	f7ff fc91 	bl	80007bc <HAL_GetTick>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fc8c 	bl	80007bc <HAL_GetTick>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e0aa      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000eb2:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d0f1      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x24c>
 8000ebc:	e018      	b.n	8000ef0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000ebe:	4b35      	ldr	r3, [pc, #212]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000ec0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ec2:	4b34      	ldr	r3, [pc, #208]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	438a      	bics	r2, r1
 8000ec8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eca:	f7ff fc77 	bl	80007bc <HAL_GetTick>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fc72 	bl	80007bc <HAL_GetTick>
 8000ed8:	0002      	movs	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e090      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eea:	2202      	movs	r2, #2
 8000eec:	4013      	ands	r3, r2
 8000eee:	d1f1      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d100      	bne.n	8000efc <HAL_RCC_OscConfig+0x2a8>
 8000efa:	e084      	b.n	8001006 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000f04:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2238      	movs	r2, #56	@ 0x38
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b20      	cmp	r3, #32
 8000f0e:	d106      	bne.n	8000f1e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d000      	beq.n	8000f1a <HAL_RCC_OscConfig+0x2c6>
 8000f18:	e075      	b.n	8001006 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e074      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d106      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2e0>
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f32:	e01c      	b.n	8000f6e <HAL_RCC_OscConfig+0x31a>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	d10c      	bne.n	8000f56 <HAL_RCC_OscConfig+0x302>
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f42:	2104      	movs	r1, #4
 8000f44:	430a      	orrs	r2, r1
 8000f46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f4c:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	430a      	orrs	r2, r1
 8000f52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f54:	e00b      	b.n	8000f6e <HAL_RCC_OscConfig+0x31a>
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	438a      	bics	r2, r1
 8000f60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f68:	2104      	movs	r1, #4
 8000f6a:	438a      	bics	r2, r1
 8000f6c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d028      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f76:	f7ff fc21 	bl	80007bc <HAL_GetTick>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f7e:	e01d      	b.n	8000fbc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f80:	f7ff fc1c 	bl	80007bc <HAL_GetTick>
 8000f84:	0002      	movs	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb8 <HAL_RCC_OscConfig+0x364>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d915      	bls.n	8000fbc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e039      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
 8000f94:	40021000 	.word	0x40021000
 8000f98:	fffeffff 	.word	0xfffeffff
 8000f9c:	fffbffff 	.word	0xfffbffff
 8000fa0:	ffff80ff 	.word	0xffff80ff
 8000fa4:	ffffc7ff 	.word	0xffffc7ff
 8000fa8:	02dc6c00 	.word	0x02dc6c00
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	fffffeff 	.word	0xfffffeff
 8000fb8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_RCC_OscConfig+0x3bc>)
 8000fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d0dc      	beq.n	8000f80 <HAL_RCC_OscConfig+0x32c>
 8000fc6:	e013      	b.n	8000ff0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fbf8 	bl	80007bc <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000fd0:	e009      	b.n	8000fe6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd2:	f7ff fbf3 	bl	80007bc <HAL_GetTick>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <HAL_RCC_OscConfig+0x3c0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e010      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_RCC_OscConfig+0x3bc>)
 8000fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	d1f0      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d105      	bne.n	8001006 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_RCC_OscConfig+0x3bc>)
 8000ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ffe:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <HAL_RCC_OscConfig+0x3bc>)
 8001000:	4905      	ldr	r1, [pc, #20]	@ (8001018 <HAL_RCC_OscConfig+0x3c4>)
 8001002:	400a      	ands	r2, r1
 8001004:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b006      	add	sp, #24
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000
 8001014:	00001388 	.word	0x00001388
 8001018:	efffffff 	.word	0xefffffff

0800101c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0e9      	b.n	8001204 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001030:	4b76      	ldr	r3, [pc, #472]	@ (800120c <HAL_RCC_ClockConfig+0x1f0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2207      	movs	r2, #7
 8001036:	4013      	ands	r3, r2
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d91e      	bls.n	800107c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103e:	4b73      	ldr	r3, [pc, #460]	@ (800120c <HAL_RCC_ClockConfig+0x1f0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2207      	movs	r2, #7
 8001044:	4393      	bics	r3, r2
 8001046:	0019      	movs	r1, r3
 8001048:	4b70      	ldr	r3, [pc, #448]	@ (800120c <HAL_RCC_ClockConfig+0x1f0>)
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001050:	f7ff fbb4 	bl	80007bc <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001058:	e009      	b.n	800106e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800105a:	f7ff fbaf 	bl	80007bc <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	4a6a      	ldr	r2, [pc, #424]	@ (8001210 <HAL_RCC_ClockConfig+0x1f4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d901      	bls.n	800106e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e0ca      	b.n	8001204 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800106e:	4b67      	ldr	r3, [pc, #412]	@ (800120c <HAL_RCC_ClockConfig+0x1f0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2207      	movs	r2, #7
 8001074:	4013      	ands	r3, r2
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d1ee      	bne.n	800105a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2202      	movs	r2, #2
 8001082:	4013      	ands	r3, r2
 8001084:	d017      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2204      	movs	r2, #4
 800108c:	4013      	ands	r3, r2
 800108e:	d008      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001090:	4b60      	ldr	r3, [pc, #384]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	4a60      	ldr	r2, [pc, #384]	@ (8001218 <HAL_RCC_ClockConfig+0x1fc>)
 8001096:	401a      	ands	r2, r3
 8001098:	4b5e      	ldr	r3, [pc, #376]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 800109a:	21b0      	movs	r1, #176	@ 0xb0
 800109c:	0109      	lsls	r1, r1, #4
 800109e:	430a      	orrs	r2, r1
 80010a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	4a5d      	ldr	r2, [pc, #372]	@ (800121c <HAL_RCC_ClockConfig+0x200>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	0019      	movs	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	4b58      	ldr	r3, [pc, #352]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 80010b2:	430a      	orrs	r2, r1
 80010b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	d055      	beq.n	800116c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80010c0:	4b54      	ldr	r3, [pc, #336]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	221c      	movs	r2, #28
 80010c6:	4393      	bics	r3, r2
 80010c8:	0019      	movs	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	4b51      	ldr	r3, [pc, #324]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d107      	bne.n	80010ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	029b      	lsls	r3, r3, #10
 80010e4:	4013      	ands	r3, r2
 80010e6:	d11f      	bne.n	8001128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e08b      	b.n	8001204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d107      	bne.n	8001104 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f4:	4b47      	ldr	r3, [pc, #284]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4013      	ands	r3, r2
 80010fe:	d113      	bne.n	8001128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e07f      	b.n	8001204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d106      	bne.n	800111a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800110c:	4b41      	ldr	r3, [pc, #260]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 800110e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001110:	2202      	movs	r2, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d108      	bne.n	8001128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e074      	b.n	8001204 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800111a:	4b3e      	ldr	r3, [pc, #248]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 800111c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e06d      	b.n	8001204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001128:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2207      	movs	r2, #7
 800112e:	4393      	bics	r3, r2
 8001130:	0019      	movs	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4b37      	ldr	r3, [pc, #220]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 8001138:	430a      	orrs	r2, r1
 800113a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800113c:	f7ff fb3e 	bl	80007bc <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001144:	e009      	b.n	800115a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001146:	f7ff fb39 	bl	80007bc <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	4a2f      	ldr	r2, [pc, #188]	@ (8001210 <HAL_RCC_ClockConfig+0x1f4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d901      	bls.n	800115a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e054      	b.n	8001204 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115a:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2238      	movs	r2, #56	@ 0x38
 8001160:	401a      	ands	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	429a      	cmp	r2, r3
 800116a:	d1ec      	bne.n	8001146 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <HAL_RCC_ClockConfig+0x1f0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2207      	movs	r2, #7
 8001172:	4013      	ands	r3, r2
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d21e      	bcs.n	80011b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_RCC_ClockConfig+0x1f0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2207      	movs	r2, #7
 8001180:	4393      	bics	r3, r2
 8001182:	0019      	movs	r1, r3
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <HAL_RCC_ClockConfig+0x1f0>)
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800118c:	f7ff fb16 	bl	80007bc <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001194:	e009      	b.n	80011aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001196:	f7ff fb11 	bl	80007bc <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001210 <HAL_RCC_ClockConfig+0x1f4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e02c      	b.n	8001204 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <HAL_RCC_ClockConfig+0x1f0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2207      	movs	r2, #7
 80011b0:	4013      	ands	r3, r2
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d1ee      	bne.n	8001196 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2204      	movs	r2, #4
 80011be:	4013      	ands	r3, r2
 80011c0:	d009      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <HAL_RCC_ClockConfig+0x204>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	0019      	movs	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80011d6:	f000 f82b 	bl	8001230 <HAL_RCC_GetSysClockFreq>
 80011da:	0001      	movs	r1, r0
 80011dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <HAL_RCC_ClockConfig+0x1f8>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	220f      	movs	r2, #15
 80011e4:	401a      	ands	r2, r3
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_RCC_ClockConfig+0x208>)
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	58d3      	ldr	r3, [r2, r3]
 80011ec:	221f      	movs	r2, #31
 80011ee:	4013      	ands	r3, r2
 80011f0:	000a      	movs	r2, r1
 80011f2:	40da      	lsrs	r2, r3
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80011f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <HAL_RCC_ClockConfig+0x210>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff fa81 	bl	8000704 <HAL_InitTick>
 8001202:	0003      	movs	r3, r0
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b004      	add	sp, #16
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40022000 	.word	0x40022000
 8001210:	00001388 	.word	0x00001388
 8001214:	40021000 	.word	0x40021000
 8001218:	ffff84ff 	.word	0xffff84ff
 800121c:	fffff0ff 	.word	0xfffff0ff
 8001220:	ffff8fff 	.word	0xffff8fff
 8001224:	0800263c 	.word	0x0800263c
 8001228:	20000000 	.word	0x20000000
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2238      	movs	r2, #56	@ 0x38
 800123c:	4013      	ands	r3, r2
 800123e:	d10f      	bne.n	8001260 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0adb      	lsrs	r3, r3, #11
 8001246:	2207      	movs	r2, #7
 8001248:	4013      	ands	r3, r2
 800124a:	2201      	movs	r2, #1
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	4815      	ldr	r0, [pc, #84]	@ (80012ac <HAL_RCC_GetSysClockFreq+0x7c>)
 8001256:	f7fe ff57 	bl	8000108 <__udivsi3>
 800125a:	0003      	movs	r3, r0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	e01e      	b.n	800129e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2238      	movs	r2, #56	@ 0x38
 8001266:	4013      	ands	r3, r2
 8001268:	2b08      	cmp	r3, #8
 800126a:	d102      	bne.n	8001272 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x80>)
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	e015      	b.n	800129e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2238      	movs	r2, #56	@ 0x38
 8001278:	4013      	ands	r3, r2
 800127a:	2b20      	cmp	r3, #32
 800127c:	d103      	bne.n	8001286 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800127e:	2380      	movs	r3, #128	@ 0x80
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	e00b      	b.n	800129e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2238      	movs	r2, #56	@ 0x38
 800128c:	4013      	ands	r3, r2
 800128e:	2b18      	cmp	r3, #24
 8001290:	d103      	bne.n	800129a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001292:	23fa      	movs	r3, #250	@ 0xfa
 8001294:	01db      	lsls	r3, r3, #7
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	e001      	b.n	800129e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	0018      	movs	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	02dc6c00 	.word	0x02dc6c00
 80012b0:	007a1200 	.word	0x007a1200

080012b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e04a      	b.n	800135c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	223d      	movs	r2, #61	@ 0x3d
 80012ca:	5c9b      	ldrb	r3, [r3, r2]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	223c      	movs	r2, #60	@ 0x3c
 80012d6:	2100      	movs	r1, #0
 80012d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff f94f 	bl	8000580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	223d      	movs	r2, #61	@ 0x3d
 80012e6:	2102      	movs	r1, #2
 80012e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3304      	adds	r3, #4
 80012f2:	0019      	movs	r1, r3
 80012f4:	0010      	movs	r0, r2
 80012f6:	f000 fc2f 	bl	8001b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2248      	movs	r2, #72	@ 0x48
 80012fe:	2101      	movs	r1, #1
 8001300:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	223e      	movs	r2, #62	@ 0x3e
 8001306:	2101      	movs	r1, #1
 8001308:	5499      	strb	r1, [r3, r2]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	223f      	movs	r2, #63	@ 0x3f
 800130e:	2101      	movs	r1, #1
 8001310:	5499      	strb	r1, [r3, r2]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2240      	movs	r2, #64	@ 0x40
 8001316:	2101      	movs	r1, #1
 8001318:	5499      	strb	r1, [r3, r2]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2241      	movs	r2, #65	@ 0x41
 800131e:	2101      	movs	r1, #1
 8001320:	5499      	strb	r1, [r3, r2]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2242      	movs	r2, #66	@ 0x42
 8001326:	2101      	movs	r1, #1
 8001328:	5499      	strb	r1, [r3, r2]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2243      	movs	r2, #67	@ 0x43
 800132e:	2101      	movs	r1, #1
 8001330:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2244      	movs	r2, #68	@ 0x44
 8001336:	2101      	movs	r1, #1
 8001338:	5499      	strb	r1, [r3, r2]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2245      	movs	r2, #69	@ 0x45
 800133e:	2101      	movs	r1, #1
 8001340:	5499      	strb	r1, [r3, r2]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2246      	movs	r2, #70	@ 0x46
 8001346:	2101      	movs	r1, #1
 8001348:	5499      	strb	r1, [r3, r2]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2247      	movs	r2, #71	@ 0x47
 800134e:	2101      	movs	r1, #1
 8001350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	223d      	movs	r2, #61	@ 0x3d
 8001356:	2101      	movs	r1, #1
 8001358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e04a      	b.n	800140c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	223d      	movs	r2, #61	@ 0x3d
 800137a:	5c9b      	ldrb	r3, [r3, r2]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d107      	bne.n	8001392 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	223c      	movs	r2, #60	@ 0x3c
 8001386:	2100      	movs	r1, #0
 8001388:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0018      	movs	r0, r3
 800138e:	f000 f89f 	bl	80014d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	223d      	movs	r2, #61	@ 0x3d
 8001396:	2102      	movs	r1, #2
 8001398:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	0019      	movs	r1, r3
 80013a4:	0010      	movs	r0, r2
 80013a6:	f000 fbd7 	bl	8001b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2248      	movs	r2, #72	@ 0x48
 80013ae:	2101      	movs	r1, #1
 80013b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	223e      	movs	r2, #62	@ 0x3e
 80013b6:	2101      	movs	r1, #1
 80013b8:	5499      	strb	r1, [r3, r2]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	223f      	movs	r2, #63	@ 0x3f
 80013be:	2101      	movs	r1, #1
 80013c0:	5499      	strb	r1, [r3, r2]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2240      	movs	r2, #64	@ 0x40
 80013c6:	2101      	movs	r1, #1
 80013c8:	5499      	strb	r1, [r3, r2]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2241      	movs	r2, #65	@ 0x41
 80013ce:	2101      	movs	r1, #1
 80013d0:	5499      	strb	r1, [r3, r2]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2242      	movs	r2, #66	@ 0x42
 80013d6:	2101      	movs	r1, #1
 80013d8:	5499      	strb	r1, [r3, r2]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2243      	movs	r2, #67	@ 0x43
 80013de:	2101      	movs	r1, #1
 80013e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2244      	movs	r2, #68	@ 0x44
 80013e6:	2101      	movs	r1, #1
 80013e8:	5499      	strb	r1, [r3, r2]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2245      	movs	r2, #69	@ 0x45
 80013ee:	2101      	movs	r1, #1
 80013f0:	5499      	strb	r1, [r3, r2]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2246      	movs	r2, #70	@ 0x46
 80013f6:	2101      	movs	r1, #1
 80013f8:	5499      	strb	r1, [r3, r2]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2247      	movs	r2, #71	@ 0x47
 80013fe:	2101      	movs	r1, #1
 8001400:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	223d      	movs	r2, #61	@ 0x3d
 8001406:	2101      	movs	r1, #1
 8001408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	223d      	movs	r2, #61	@ 0x3d
 8001420:	2102      	movs	r1, #2
 8001422:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a27      	ldr	r2, [pc, #156]	@ (80014c8 <HAL_TIM_PWM_DeInit+0xb4>)
 800142c:	4013      	ands	r3, r2
 800142e:	d10d      	bne.n	800144c <HAL_TIM_PWM_DeInit+0x38>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a25      	ldr	r2, [pc, #148]	@ (80014cc <HAL_TIM_PWM_DeInit+0xb8>)
 8001438:	4013      	ands	r3, r2
 800143a:	d107      	bne.n	800144c <HAL_TIM_PWM_DeInit+0x38>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2101      	movs	r1, #1
 8001448:	438a      	bics	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	0018      	movs	r0, r3
 8001450:	f000 f846 	bl	80014e0 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2248      	movs	r2, #72	@ 0x48
 8001458:	2100      	movs	r1, #0
 800145a:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	223e      	movs	r2, #62	@ 0x3e
 8001460:	2100      	movs	r1, #0
 8001462:	5499      	strb	r1, [r3, r2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	223f      	movs	r2, #63	@ 0x3f
 8001468:	2100      	movs	r1, #0
 800146a:	5499      	strb	r1, [r3, r2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2240      	movs	r2, #64	@ 0x40
 8001470:	2100      	movs	r1, #0
 8001472:	5499      	strb	r1, [r3, r2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2241      	movs	r2, #65	@ 0x41
 8001478:	2100      	movs	r1, #0
 800147a:	5499      	strb	r1, [r3, r2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2242      	movs	r2, #66	@ 0x42
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2243      	movs	r2, #67	@ 0x43
 8001488:	2100      	movs	r1, #0
 800148a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2244      	movs	r2, #68	@ 0x44
 8001490:	2100      	movs	r1, #0
 8001492:	5499      	strb	r1, [r3, r2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2245      	movs	r2, #69	@ 0x45
 8001498:	2100      	movs	r1, #0
 800149a:	5499      	strb	r1, [r3, r2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2246      	movs	r2, #70	@ 0x46
 80014a0:	2100      	movs	r1, #0
 80014a2:	5499      	strb	r1, [r3, r2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2247      	movs	r2, #71	@ 0x47
 80014a8:	2100      	movs	r1, #0
 80014aa:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	223d      	movs	r2, #61	@ 0x3d
 80014b0:	2100      	movs	r1, #0
 80014b2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	223c      	movs	r2, #60	@ 0x3c
 80014b8:	2100      	movs	r1, #0
 80014ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	00001111 	.word	0x00001111
 80014cc:	00000444 	.word	0x00000444

080014d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80014d8:	46c0      	nop			@ (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d108      	bne.n	8001512 <HAL_TIM_PWM_Start+0x22>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	223e      	movs	r2, #62	@ 0x3e
 8001504:	5c9b      	ldrb	r3, [r3, r2]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	3b01      	subs	r3, #1
 800150a:	1e5a      	subs	r2, r3, #1
 800150c:	4193      	sbcs	r3, r2
 800150e:	b2db      	uxtb	r3, r3
 8001510:	e037      	b.n	8001582 <HAL_TIM_PWM_Start+0x92>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d108      	bne.n	800152a <HAL_TIM_PWM_Start+0x3a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	223f      	movs	r2, #63	@ 0x3f
 800151c:	5c9b      	ldrb	r3, [r3, r2]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	4193      	sbcs	r3, r2
 8001526:	b2db      	uxtb	r3, r3
 8001528:	e02b      	b.n	8001582 <HAL_TIM_PWM_Start+0x92>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b08      	cmp	r3, #8
 800152e:	d108      	bne.n	8001542 <HAL_TIM_PWM_Start+0x52>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2240      	movs	r2, #64	@ 0x40
 8001534:	5c9b      	ldrb	r3, [r3, r2]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3b01      	subs	r3, #1
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	4193      	sbcs	r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	e01f      	b.n	8001582 <HAL_TIM_PWM_Start+0x92>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d108      	bne.n	800155a <HAL_TIM_PWM_Start+0x6a>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2241      	movs	r2, #65	@ 0x41
 800154c:	5c9b      	ldrb	r3, [r3, r2]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	1e5a      	subs	r2, r3, #1
 8001554:	4193      	sbcs	r3, r2
 8001556:	b2db      	uxtb	r3, r3
 8001558:	e013      	b.n	8001582 <HAL_TIM_PWM_Start+0x92>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b10      	cmp	r3, #16
 800155e:	d108      	bne.n	8001572 <HAL_TIM_PWM_Start+0x82>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2242      	movs	r2, #66	@ 0x42
 8001564:	5c9b      	ldrb	r3, [r3, r2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	4193      	sbcs	r3, r2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	e007      	b.n	8001582 <HAL_TIM_PWM_Start+0x92>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2243      	movs	r2, #67	@ 0x43
 8001576:	5c9b      	ldrb	r3, [r3, r2]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	4193      	sbcs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e07b      	b.n	8001682 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <HAL_TIM_PWM_Start+0xaa>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	223e      	movs	r2, #62	@ 0x3e
 8001594:	2102      	movs	r1, #2
 8001596:	5499      	strb	r1, [r3, r2]
 8001598:	e023      	b.n	80015e2 <HAL_TIM_PWM_Start+0xf2>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d104      	bne.n	80015aa <HAL_TIM_PWM_Start+0xba>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	223f      	movs	r2, #63	@ 0x3f
 80015a4:	2102      	movs	r1, #2
 80015a6:	5499      	strb	r1, [r3, r2]
 80015a8:	e01b      	b.n	80015e2 <HAL_TIM_PWM_Start+0xf2>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d104      	bne.n	80015ba <HAL_TIM_PWM_Start+0xca>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2240      	movs	r2, #64	@ 0x40
 80015b4:	2102      	movs	r1, #2
 80015b6:	5499      	strb	r1, [r3, r2]
 80015b8:	e013      	b.n	80015e2 <HAL_TIM_PWM_Start+0xf2>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d104      	bne.n	80015ca <HAL_TIM_PWM_Start+0xda>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2241      	movs	r2, #65	@ 0x41
 80015c4:	2102      	movs	r1, #2
 80015c6:	5499      	strb	r1, [r3, r2]
 80015c8:	e00b      	b.n	80015e2 <HAL_TIM_PWM_Start+0xf2>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	d104      	bne.n	80015da <HAL_TIM_PWM_Start+0xea>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2242      	movs	r2, #66	@ 0x42
 80015d4:	2102      	movs	r1, #2
 80015d6:	5499      	strb	r1, [r3, r2]
 80015d8:	e003      	b.n	80015e2 <HAL_TIM_PWM_Start+0xf2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2243      	movs	r2, #67	@ 0x43
 80015de:	2102      	movs	r1, #2
 80015e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 fe58 	bl	80022a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a25      	ldr	r2, [pc, #148]	@ (800168c <HAL_TIM_PWM_Start+0x19c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d009      	beq.n	800160e <HAL_TIM_PWM_Start+0x11e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a24      	ldr	r2, [pc, #144]	@ (8001690 <HAL_TIM_PWM_Start+0x1a0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d004      	beq.n	800160e <HAL_TIM_PWM_Start+0x11e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a22      	ldr	r2, [pc, #136]	@ (8001694 <HAL_TIM_PWM_Start+0x1a4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_TIM_PWM_Start+0x122>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_TIM_PWM_Start+0x124>
 8001612:	2300      	movs	r3, #0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2180      	movs	r1, #128	@ 0x80
 8001624:	0209      	lsls	r1, r1, #8
 8001626:	430a      	orrs	r2, r1
 8001628:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a17      	ldr	r2, [pc, #92]	@ (800168c <HAL_TIM_PWM_Start+0x19c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d004      	beq.n	800163e <HAL_TIM_PWM_Start+0x14e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <HAL_TIM_PWM_Start+0x1a8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d116      	bne.n	800166c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a15      	ldr	r2, [pc, #84]	@ (800169c <HAL_TIM_PWM_Start+0x1ac>)
 8001646:	4013      	ands	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b06      	cmp	r3, #6
 800164e:	d016      	beq.n	800167e <HAL_TIM_PWM_Start+0x18e>
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	429a      	cmp	r2, r3
 8001658:	d011      	beq.n	800167e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166a:	e008      	b.n	800167e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2101      	movs	r1, #1
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e000      	b.n	8001680 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800167e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b004      	add	sp, #16
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	40012c00 	.word	0x40012c00
 8001690:	40014400 	.word	0x40014400
 8001694:	40014800 	.word	0x40014800
 8001698:	40000400 	.word	0x40000400
 800169c:	00010007 	.word	0x00010007

080016a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 fdf4 	bl	80022a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a35      	ldr	r2, [pc, #212]	@ (8001794 <HAL_TIM_PWM_Stop+0xf4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d009      	beq.n	80016d6 <HAL_TIM_PWM_Stop+0x36>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a34      	ldr	r2, [pc, #208]	@ (8001798 <HAL_TIM_PWM_Stop+0xf8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d004      	beq.n	80016d6 <HAL_TIM_PWM_Stop+0x36>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a32      	ldr	r2, [pc, #200]	@ (800179c <HAL_TIM_PWM_Stop+0xfc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_TIM_PWM_Stop+0x3a>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_TIM_PWM_Stop+0x3c>
 80016da:	2300      	movs	r3, #0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a2e      	ldr	r2, [pc, #184]	@ (80017a0 <HAL_TIM_PWM_Stop+0x100>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	d10d      	bne.n	8001708 <HAL_TIM_PWM_Stop+0x68>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a2c      	ldr	r2, [pc, #176]	@ (80017a4 <HAL_TIM_PWM_Stop+0x104>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	d107      	bne.n	8001708 <HAL_TIM_PWM_Stop+0x68>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4929      	ldr	r1, [pc, #164]	@ (80017a8 <HAL_TIM_PWM_Stop+0x108>)
 8001704:	400a      	ands	r2, r1
 8001706:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a24      	ldr	r2, [pc, #144]	@ (80017a0 <HAL_TIM_PWM_Stop+0x100>)
 8001710:	4013      	ands	r3, r2
 8001712:	d10d      	bne.n	8001730 <HAL_TIM_PWM_Stop+0x90>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a22      	ldr	r2, [pc, #136]	@ (80017a4 <HAL_TIM_PWM_Stop+0x104>)
 800171c:	4013      	ands	r3, r2
 800171e:	d107      	bne.n	8001730 <HAL_TIM_PWM_Stop+0x90>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2101      	movs	r1, #1
 800172c:	438a      	bics	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d104      	bne.n	8001740 <HAL_TIM_PWM_Stop+0xa0>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	223e      	movs	r2, #62	@ 0x3e
 800173a:	2101      	movs	r1, #1
 800173c:	5499      	strb	r1, [r3, r2]
 800173e:	e023      	b.n	8001788 <HAL_TIM_PWM_Stop+0xe8>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b04      	cmp	r3, #4
 8001744:	d104      	bne.n	8001750 <HAL_TIM_PWM_Stop+0xb0>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	223f      	movs	r2, #63	@ 0x3f
 800174a:	2101      	movs	r1, #1
 800174c:	5499      	strb	r1, [r3, r2]
 800174e:	e01b      	b.n	8001788 <HAL_TIM_PWM_Stop+0xe8>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2b08      	cmp	r3, #8
 8001754:	d104      	bne.n	8001760 <HAL_TIM_PWM_Stop+0xc0>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2240      	movs	r2, #64	@ 0x40
 800175a:	2101      	movs	r1, #1
 800175c:	5499      	strb	r1, [r3, r2]
 800175e:	e013      	b.n	8001788 <HAL_TIM_PWM_Stop+0xe8>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d104      	bne.n	8001770 <HAL_TIM_PWM_Stop+0xd0>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2241      	movs	r2, #65	@ 0x41
 800176a:	2101      	movs	r1, #1
 800176c:	5499      	strb	r1, [r3, r2]
 800176e:	e00b      	b.n	8001788 <HAL_TIM_PWM_Stop+0xe8>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d104      	bne.n	8001780 <HAL_TIM_PWM_Stop+0xe0>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2242      	movs	r2, #66	@ 0x42
 800177a:	2101      	movs	r1, #1
 800177c:	5499      	strb	r1, [r3, r2]
 800177e:	e003      	b.n	8001788 <HAL_TIM_PWM_Stop+0xe8>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2243      	movs	r2, #67	@ 0x43
 8001784:	2101      	movs	r1, #1
 8001786:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	40012c00 	.word	0x40012c00
 8001798:	40014400 	.word	0x40014400
 800179c:	40014800 	.word	0x40014800
 80017a0:	00001111 	.word	0x00001111
 80017a4:	00000444 	.word	0x00000444
 80017a8:	ffff7fff 	.word	0xffff7fff

080017ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b8:	2317      	movs	r3, #23
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	223c      	movs	r2, #60	@ 0x3c
 80017c4:	5c9b      	ldrb	r3, [r3, r2]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_PWM_ConfigChannel+0x22>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0e5      	b.n	800199a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	223c      	movs	r2, #60	@ 0x3c
 80017d2:	2101      	movs	r1, #1
 80017d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b14      	cmp	r3, #20
 80017da:	d900      	bls.n	80017de <HAL_TIM_PWM_ConfigChannel+0x32>
 80017dc:	e0d1      	b.n	8001982 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	009a      	lsls	r2, r3, #2
 80017e2:	4b70      	ldr	r3, [pc, #448]	@ (80019a4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80017e4:	18d3      	adds	r3, r2, r3
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	0011      	movs	r1, r2
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 fa1c 	bl	8001c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2108      	movs	r1, #8
 8001804:	430a      	orrs	r2, r1
 8001806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2104      	movs	r1, #4
 8001814:	438a      	bics	r2, r1
 8001816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6999      	ldr	r1, [r3, #24]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	619a      	str	r2, [r3, #24]
      break;
 800182a:	e0af      	b.n	800198c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	0011      	movs	r1, r2
 8001834:	0018      	movs	r0, r3
 8001836:	f000 fa7b 	bl	8001d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	0109      	lsls	r1, r1, #4
 8001848:	430a      	orrs	r2, r1
 800184a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4954      	ldr	r1, [pc, #336]	@ (80019a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001858:	400a      	ands	r2, r1
 800185a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6999      	ldr	r1, [r3, #24]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	021a      	lsls	r2, r3, #8
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	619a      	str	r2, [r3, #24]
      break;
 8001870:	e08c      	b.n	800198c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	0011      	movs	r1, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f000 fad6 	bl	8001e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2108      	movs	r1, #8
 800188c:	430a      	orrs	r2, r1
 800188e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2104      	movs	r1, #4
 800189c:	438a      	bics	r2, r1
 800189e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69d9      	ldr	r1, [r3, #28]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	61da      	str	r2, [r3, #28]
      break;
 80018b2:	e06b      	b.n	800198c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	0011      	movs	r1, r2
 80018bc:	0018      	movs	r0, r3
 80018be:	f000 fb37 	bl	8001f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2180      	movs	r1, #128	@ 0x80
 80018ce:	0109      	lsls	r1, r1, #4
 80018d0:	430a      	orrs	r2, r1
 80018d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4932      	ldr	r1, [pc, #200]	@ (80019a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69d9      	ldr	r1, [r3, #28]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	021a      	lsls	r2, r3, #8
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	61da      	str	r2, [r3, #28]
      break;
 80018f8:	e048      	b.n	800198c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	0011      	movs	r1, r2
 8001902:	0018      	movs	r0, r3
 8001904:	f000 fb78 	bl	8001ff8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2108      	movs	r1, #8
 8001914:	430a      	orrs	r2, r1
 8001916:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2104      	movs	r1, #4
 8001924:	438a      	bics	r2, r1
 8001926:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800193a:	e027      	b.n	800198c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	0011      	movs	r1, r2
 8001944:	0018      	movs	r0, r3
 8001946:	f000 fbb1 	bl	80020ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2180      	movs	r1, #128	@ 0x80
 8001956:	0109      	lsls	r1, r1, #4
 8001958:	430a      	orrs	r2, r1
 800195a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4910      	ldr	r1, [pc, #64]	@ (80019a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001968:	400a      	ands	r2, r1
 800196a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	021a      	lsls	r2, r3, #8
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001980:	e004      	b.n	800198c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001982:	2317      	movs	r3, #23
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
      break;
 800198a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	223c      	movs	r2, #60	@ 0x3c
 8001990:	2100      	movs	r1, #0
 8001992:	5499      	strb	r1, [r3, r2]

  return status;
 8001994:	2317      	movs	r3, #23
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	781b      	ldrb	r3, [r3, #0]
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b006      	add	sp, #24
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	0800267c 	.word	0x0800267c
 80019a8:	fffffbff 	.word	0xfffffbff

080019ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019b6:	230f      	movs	r3, #15
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	223c      	movs	r2, #60	@ 0x3c
 80019c2:	5c9b      	ldrb	r3, [r3, r2]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_TIM_ConfigClockSource+0x20>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e0bc      	b.n	8001b46 <HAL_TIM_ConfigClockSource+0x19a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	223c      	movs	r2, #60	@ 0x3c
 80019d0:	2101      	movs	r1, #1
 80019d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	223d      	movs	r2, #61	@ 0x3d
 80019d8:	2102      	movs	r1, #2
 80019da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001b50 <HAL_TIM_ConfigClockSource+0x1a4>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4a59      	ldr	r2, [pc, #356]	@ (8001b54 <HAL_TIM_ConfigClockSource+0x1a8>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2280      	movs	r2, #128	@ 0x80
 8001a02:	0192      	lsls	r2, r2, #6
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d040      	beq.n	8001a8a <HAL_TIM_ConfigClockSource+0xde>
 8001a08:	2280      	movs	r2, #128	@ 0x80
 8001a0a:	0192      	lsls	r2, r2, #6
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d900      	bls.n	8001a12 <HAL_TIM_ConfigClockSource+0x66>
 8001a10:	e088      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x178>
 8001a12:	2280      	movs	r2, #128	@ 0x80
 8001a14:	0152      	lsls	r2, r2, #5
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d100      	bne.n	8001a1c <HAL_TIM_ConfigClockSource+0x70>
 8001a1a:	e088      	b.n	8001b2e <HAL_TIM_ConfigClockSource+0x182>
 8001a1c:	2280      	movs	r2, #128	@ 0x80
 8001a1e:	0152      	lsls	r2, r2, #5
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d900      	bls.n	8001a26 <HAL_TIM_ConfigClockSource+0x7a>
 8001a24:	e07e      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x178>
 8001a26:	2b70      	cmp	r3, #112	@ 0x70
 8001a28:	d018      	beq.n	8001a5c <HAL_TIM_ConfigClockSource+0xb0>
 8001a2a:	d900      	bls.n	8001a2e <HAL_TIM_ConfigClockSource+0x82>
 8001a2c:	e07a      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x178>
 8001a2e:	2b60      	cmp	r3, #96	@ 0x60
 8001a30:	d04f      	beq.n	8001ad2 <HAL_TIM_ConfigClockSource+0x126>
 8001a32:	d900      	bls.n	8001a36 <HAL_TIM_ConfigClockSource+0x8a>
 8001a34:	e076      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x178>
 8001a36:	2b50      	cmp	r3, #80	@ 0x50
 8001a38:	d03b      	beq.n	8001ab2 <HAL_TIM_ConfigClockSource+0x106>
 8001a3a:	d900      	bls.n	8001a3e <HAL_TIM_ConfigClockSource+0x92>
 8001a3c:	e072      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x178>
 8001a3e:	2b40      	cmp	r3, #64	@ 0x40
 8001a40:	d057      	beq.n	8001af2 <HAL_TIM_ConfigClockSource+0x146>
 8001a42:	d900      	bls.n	8001a46 <HAL_TIM_ConfigClockSource+0x9a>
 8001a44:	e06e      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x178>
 8001a46:	2b30      	cmp	r3, #48	@ 0x30
 8001a48:	d063      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x166>
 8001a4a:	d86b      	bhi.n	8001b24 <HAL_TIM_ConfigClockSource+0x178>
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d060      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x166>
 8001a50:	d868      	bhi.n	8001b24 <HAL_TIM_ConfigClockSource+0x178>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d05d      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x166>
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d05b      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x166>
 8001a5a:	e063      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a6c:	f000 fbf8 	bl	8002260 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2277      	movs	r2, #119	@ 0x77
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	609a      	str	r2, [r3, #8]
      break;
 8001a88:	e052      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a9a:	f000 fbe1 	bl	8002260 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	01c9      	lsls	r1, r1, #7
 8001aac:	430a      	orrs	r2, r1
 8001aae:	609a      	str	r2, [r3, #8]
      break;
 8001ab0:	e03e      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001abe:	001a      	movs	r2, r3
 8001ac0:	f000 fb52 	bl	8002168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2150      	movs	r1, #80	@ 0x50
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 fbac 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8001ad0:	e02e      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ade:	001a      	movs	r2, r3
 8001ae0:	f000 fb70 	bl	80021c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2160      	movs	r1, #96	@ 0x60
 8001aea:	0018      	movs	r0, r3
 8001aec:	f000 fb9c 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8001af0:	e01e      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001afe:	001a      	movs	r2, r3
 8001b00:	f000 fb32 	bl	8002168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2140      	movs	r1, #64	@ 0x40
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 fb8c 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8001b10:	e00e      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	0010      	movs	r0, r2
 8001b1e:	f000 fb83 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8001b22:	e005      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001b24:	230f      	movs	r3, #15
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
      break;
 8001b2c:	e000      	b.n	8001b30 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001b2e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	223d      	movs	r2, #61	@ 0x3d
 8001b34:	2101      	movs	r1, #1
 8001b36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	223c      	movs	r2, #60	@ 0x3c
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]

  return status;
 8001b40:	230f      	movs	r3, #15
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	781b      	ldrb	r3, [r3, #0]
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b004      	add	sp, #16
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	ffceff88 	.word	0xffceff88
 8001b54:	ffff00ff 	.word	0xffff00ff

08001b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001c18 <TIM_Base_SetConfig+0xc0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <TIM_Base_SetConfig+0x20>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a2a      	ldr	r2, [pc, #168]	@ (8001c1c <TIM_Base_SetConfig+0xc4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d108      	bne.n	8001b8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2270      	movs	r2, #112	@ 0x70
 8001b7c:	4393      	bics	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a22      	ldr	r2, [pc, #136]	@ (8001c18 <TIM_Base_SetConfig+0xc0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00f      	beq.n	8001bb2 <TIM_Base_SetConfig+0x5a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <TIM_Base_SetConfig+0xc4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00b      	beq.n	8001bb2 <TIM_Base_SetConfig+0x5a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	@ (8001c20 <TIM_Base_SetConfig+0xc8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <TIM_Base_SetConfig+0x5a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c24 <TIM_Base_SetConfig+0xcc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <TIM_Base_SetConfig+0x5a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1e      	ldr	r2, [pc, #120]	@ (8001c28 <TIM_Base_SetConfig+0xd0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d108      	bne.n	8001bc4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <TIM_Base_SetConfig+0xd4>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2280      	movs	r2, #128	@ 0x80
 8001bc8:	4393      	bics	r3, r2
 8001bca:	001a      	movs	r2, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <TIM_Base_SetConfig+0xc0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <TIM_Base_SetConfig+0xaa>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <TIM_Base_SetConfig+0xcc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d003      	beq.n	8001c02 <TIM_Base_SetConfig+0xaa>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <TIM_Base_SetConfig+0xd0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d103      	bne.n	8001c0a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	615a      	str	r2, [r3, #20]
}
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b004      	add	sp, #16
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40002000 	.word	0x40002000
 8001c24:	40014400 	.word	0x40014400
 8001c28:	40014800 	.word	0x40014800
 8001c2c:	fffffcff 	.word	0xfffffcff

08001c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4393      	bics	r3, r2
 8001c48:	001a      	movs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d18 <TIM_OC1_SetConfig+0xe8>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2203      	movs	r2, #3
 8001c66:	4393      	bics	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2202      	movs	r2, #2
 8001c78:	4393      	bics	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a24      	ldr	r2, [pc, #144]	@ (8001d1c <TIM_OC1_SetConfig+0xec>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <TIM_OC1_SetConfig+0x6e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a23      	ldr	r2, [pc, #140]	@ (8001d20 <TIM_OC1_SetConfig+0xf0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d003      	beq.n	8001c9e <TIM_OC1_SetConfig+0x6e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a22      	ldr	r2, [pc, #136]	@ (8001d24 <TIM_OC1_SetConfig+0xf4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10c      	bne.n	8001cb8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	4393      	bics	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <TIM_OC1_SetConfig+0xec>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <TIM_OC1_SetConfig+0xa0>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a17      	ldr	r2, [pc, #92]	@ (8001d20 <TIM_OC1_SetConfig+0xf0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d003      	beq.n	8001cd0 <TIM_OC1_SetConfig+0xa0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a16      	ldr	r2, [pc, #88]	@ (8001d24 <TIM_OC1_SetConfig+0xf4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d111      	bne.n	8001cf4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4a15      	ldr	r2, [pc, #84]	@ (8001d28 <TIM_OC1_SetConfig+0xf8>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4a14      	ldr	r2, [pc, #80]	@ (8001d2c <TIM_OC1_SetConfig+0xfc>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	621a      	str	r2, [r3, #32]
}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b006      	add	sp, #24
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	fffeff8f 	.word	0xfffeff8f
 8001d1c:	40012c00 	.word	0x40012c00
 8001d20:	40014400 	.word	0x40014400
 8001d24:	40014800 	.word	0x40014800
 8001d28:	fffffeff 	.word	0xfffffeff
 8001d2c:	fffffdff 	.word	0xfffffdff

08001d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	2210      	movs	r2, #16
 8001d46:	4393      	bics	r3, r2
 8001d48:	001a      	movs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e10 <TIM_OC2_SetConfig+0xe0>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <TIM_OC2_SetConfig+0xe4>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	4393      	bics	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a22      	ldr	r2, [pc, #136]	@ (8001e18 <TIM_OC2_SetConfig+0xe8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10d      	bne.n	8001dae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2280      	movs	r2, #128	@ 0x80
 8001d96:	4393      	bics	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2240      	movs	r2, #64	@ 0x40
 8001daa:	4393      	bics	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <TIM_OC2_SetConfig+0xe8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <TIM_OC2_SetConfig+0x96>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a18      	ldr	r2, [pc, #96]	@ (8001e1c <TIM_OC2_SetConfig+0xec>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <TIM_OC2_SetConfig+0x96>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a17      	ldr	r2, [pc, #92]	@ (8001e20 <TIM_OC2_SetConfig+0xf0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d113      	bne.n	8001dee <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4a16      	ldr	r2, [pc, #88]	@ (8001e24 <TIM_OC2_SetConfig+0xf4>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4a15      	ldr	r2, [pc, #84]	@ (8001e28 <TIM_OC2_SetConfig+0xf8>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	621a      	str	r2, [r3, #32]
}
 8001e08:	46c0      	nop			@ (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b006      	add	sp, #24
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	feff8fff 	.word	0xfeff8fff
 8001e14:	fffffcff 	.word	0xfffffcff
 8001e18:	40012c00 	.word	0x40012c00
 8001e1c:	40014400 	.word	0x40014400
 8001e20:	40014800 	.word	0x40014800
 8001e24:	fffffbff 	.word	0xfffffbff
 8001e28:	fffff7ff 	.word	0xfffff7ff

08001e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a31      	ldr	r2, [pc, #196]	@ (8001f08 <TIM_OC3_SetConfig+0xdc>)
 8001e42:	401a      	ands	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4a2d      	ldr	r2, [pc, #180]	@ (8001f0c <TIM_OC3_SetConfig+0xe0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	4393      	bics	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	4a27      	ldr	r2, [pc, #156]	@ (8001f10 <TIM_OC3_SetConfig+0xe4>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a23      	ldr	r2, [pc, #140]	@ (8001f14 <TIM_OC3_SetConfig+0xe8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d10d      	bne.n	8001ea6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <TIM_OC3_SetConfig+0xec>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f1c <TIM_OC3_SetConfig+0xf0>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f14 <TIM_OC3_SetConfig+0xe8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <TIM_OC3_SetConfig+0x92>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <TIM_OC3_SetConfig+0xf4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <TIM_OC3_SetConfig+0x92>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f24 <TIM_OC3_SetConfig+0xf8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d113      	bne.n	8001ee6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	@ (8001f28 <TIM_OC3_SetConfig+0xfc>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4a18      	ldr	r2, [pc, #96]	@ (8001f2c <TIM_OC3_SetConfig+0x100>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	621a      	str	r2, [r3, #32]
}
 8001f00:	46c0      	nop			@ (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b006      	add	sp, #24
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	fffffeff 	.word	0xfffffeff
 8001f0c:	fffeff8f 	.word	0xfffeff8f
 8001f10:	fffffdff 	.word	0xfffffdff
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	fffff7ff 	.word	0xfffff7ff
 8001f1c:	fffffbff 	.word	0xfffffbff
 8001f20:	40014400 	.word	0x40014400
 8001f24:	40014800 	.word	0x40014800
 8001f28:	ffffefff 	.word	0xffffefff
 8001f2c:	ffffdfff 	.word	0xffffdfff

08001f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a24      	ldr	r2, [pc, #144]	@ (8001fd8 <TIM_OC4_SetConfig+0xa8>)
 8001f46:	401a      	ands	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4a20      	ldr	r2, [pc, #128]	@ (8001fdc <TIM_OC4_SetConfig+0xac>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe0 <TIM_OC4_SetConfig+0xb0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <TIM_OC4_SetConfig+0xb4>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	031b      	lsls	r3, r3, #12
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <TIM_OC4_SetConfig+0xb8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <TIM_OC4_SetConfig+0x70>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <TIM_OC4_SetConfig+0xbc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <TIM_OC4_SetConfig+0x70>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a15      	ldr	r2, [pc, #84]	@ (8001ff0 <TIM_OC4_SetConfig+0xc0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d109      	bne.n	8001fb4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <TIM_OC4_SetConfig+0xc4>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	621a      	str	r2, [r3, #32]
}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b006      	add	sp, #24
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	ffffefff 	.word	0xffffefff
 8001fdc:	feff8fff 	.word	0xfeff8fff
 8001fe0:	fffffcff 	.word	0xfffffcff
 8001fe4:	ffffdfff 	.word	0xffffdfff
 8001fe8:	40012c00 	.word	0x40012c00
 8001fec:	40014400 	.word	0x40014400
 8001ff0:	40014800 	.word	0x40014800
 8001ff4:	ffffbfff 	.word	0xffffbfff

08001ff8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a21      	ldr	r2, [pc, #132]	@ (8002094 <TIM_OC5_SetConfig+0x9c>)
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a1d      	ldr	r2, [pc, #116]	@ (8002098 <TIM_OC5_SetConfig+0xa0>)
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4a19      	ldr	r2, [pc, #100]	@ (800209c <TIM_OC5_SetConfig+0xa4>)
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a15      	ldr	r2, [pc, #84]	@ (80020a0 <TIM_OC5_SetConfig+0xa8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <TIM_OC5_SetConfig+0x66>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <TIM_OC5_SetConfig+0xac>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <TIM_OC5_SetConfig+0x66>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a13      	ldr	r2, [pc, #76]	@ (80020a8 <TIM_OC5_SetConfig+0xb0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d109      	bne.n	8002072 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <TIM_OC5_SetConfig+0x9c>)
 8002062:	4013      	ands	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	621a      	str	r2, [r3, #32]
}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b006      	add	sp, #24
 8002092:	bd80      	pop	{r7, pc}
 8002094:	fffeffff 	.word	0xfffeffff
 8002098:	fffeff8f 	.word	0xfffeff8f
 800209c:	fffdffff 	.word	0xfffdffff
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40014400 	.word	0x40014400
 80020a8:	40014800 	.word	0x40014800

080020ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a22      	ldr	r2, [pc, #136]	@ (800214c <TIM_OC6_SetConfig+0xa0>)
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002150 <TIM_OC6_SetConfig+0xa4>)
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002154 <TIM_OC6_SetConfig+0xa8>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	051b      	lsls	r3, r3, #20
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a16      	ldr	r2, [pc, #88]	@ (8002158 <TIM_OC6_SetConfig+0xac>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d007      	beq.n	8002114 <TIM_OC6_SetConfig+0x68>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a15      	ldr	r2, [pc, #84]	@ (800215c <TIM_OC6_SetConfig+0xb0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d003      	beq.n	8002114 <TIM_OC6_SetConfig+0x68>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <TIM_OC6_SetConfig+0xb4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d109      	bne.n	8002128 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	4a13      	ldr	r2, [pc, #76]	@ (8002164 <TIM_OC6_SetConfig+0xb8>)
 8002118:	4013      	ands	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	029b      	lsls	r3, r3, #10
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	621a      	str	r2, [r3, #32]
}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	b006      	add	sp, #24
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	ffefffff 	.word	0xffefffff
 8002150:	feff8fff 	.word	0xfeff8fff
 8002154:	ffdfffff 	.word	0xffdfffff
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800
 8002164:	fffbffff 	.word	0xfffbffff

08002168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2201      	movs	r2, #1
 8002180:	4393      	bics	r3, r2
 8002182:	001a      	movs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	22f0      	movs	r2, #240	@ 0xf0
 8002192:	4393      	bics	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	220a      	movs	r2, #10
 80021a4:	4393      	bics	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	621a      	str	r2, [r3, #32]
}
 80021bc:	46c0      	nop			@ (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b006      	add	sp, #24
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	2210      	movs	r2, #16
 80021dc:	4393      	bics	r3, r2
 80021de:	001a      	movs	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <TIM_TI2_ConfigInputStage+0x60>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	031b      	lsls	r3, r3, #12
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	22a0      	movs	r2, #160	@ 0xa0
 8002200:	4393      	bics	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	621a      	str	r2, [r3, #32]
}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b006      	add	sp, #24
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	ffff0fff 	.word	0xffff0fff

08002228 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a08      	ldr	r2, [pc, #32]	@ (800225c <TIM_ITRx_SetConfig+0x34>)
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	2207      	movs	r2, #7
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	609a      	str	r2, [r3, #8]
}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	b004      	add	sp, #16
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	ffcfff8f 	.word	0xffcfff8f

08002260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	4a09      	ldr	r2, [pc, #36]	@ (800229c <TIM_ETR_SetConfig+0x3c>)
 8002278:	4013      	ands	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	021a      	lsls	r2, r3, #8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	431a      	orrs	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	46c0      	nop			@ (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b006      	add	sp, #24
 800229a:	bd80      	pop	{r7, pc}
 800229c:	ffff00ff 	.word	0xffff00ff

080022a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	221f      	movs	r2, #31
 80022b0:	4013      	ands	r3, r2
 80022b2:	2201      	movs	r2, #1
 80022b4:	409a      	lsls	r2, r3
 80022b6:	0013      	movs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	43d2      	mvns	r2, r2
 80022c2:	401a      	ands	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a1a      	ldr	r2, [r3, #32]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	211f      	movs	r1, #31
 80022d0:	400b      	ands	r3, r1
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4099      	lsls	r1, r3
 80022d6:	000b      	movs	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	621a      	str	r2, [r3, #32]
}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b006      	add	sp, #24
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	223c      	movs	r2, #60	@ 0x3c
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e04a      	b.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	223c      	movs	r2, #60	@ 0x3c
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223d      	movs	r2, #61	@ 0x3d
 800230c:	2102      	movs	r1, #2
 800230e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a1d      	ldr	r2, [pc, #116]	@ (80023a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800232e:	4013      	ands	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2270      	movs	r2, #112	@ 0x70
 8002340:	4393      	bics	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a11      	ldr	r2, [pc, #68]	@ (80023a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10c      	bne.n	8002384 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2280      	movs	r2, #128	@ 0x80
 800236e:	4393      	bics	r3, r2
 8002370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	4313      	orrs	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	223d      	movs	r2, #61	@ 0x3d
 8002388:	2101      	movs	r1, #1
 800238a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	223c      	movs	r2, #60	@ 0x3c
 8002390:	2100      	movs	r1, #0
 8002392:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b004      	add	sp, #16
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	ff0fffff 	.word	0xff0fffff
 80023a8:	40000400 	.word	0x40000400

080023ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223c      	movs	r2, #60	@ 0x3c
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e079      	b.n	80024bc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	223c      	movs	r2, #60	@ 0x3c
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	22ff      	movs	r2, #255	@ 0xff
 80023d4:	4393      	bics	r3, r2
 80023d6:	001a      	movs	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a38      	ldr	r2, [pc, #224]	@ (80024c4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80023e4:	401a      	ands	r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4a35      	ldr	r2, [pc, #212]	@ (80024c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80023f2:	401a      	ands	r2, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a33      	ldr	r2, [pc, #204]	@ (80024cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002400:	401a      	ands	r2, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a30      	ldr	r2, [pc, #192]	@ (80024d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800240e:	401a      	ands	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a2e      	ldr	r2, [pc, #184]	@ (80024d4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800241c:	401a      	ands	r2, r3
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a2b      	ldr	r2, [pc, #172]	@ (80024d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800242a:	401a      	ands	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a29      	ldr	r2, [pc, #164]	@ (80024dc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002438:	401a      	ands	r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a25      	ldr	r2, [pc, #148]	@ (80024e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d106      	bne.n	800245c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4a24      	ldr	r2, [pc, #144]	@ (80024e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002452:	401a      	ands	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d121      	bne.n	80024aa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a1f      	ldr	r2, [pc, #124]	@ (80024e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800246a:	401a      	ands	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	051b      	lsls	r3, r3, #20
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a1c      	ldr	r2, [pc, #112]	@ (80024ec <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800247a:	401a      	ands	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002488:	401a      	ands	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d106      	bne.n	80024aa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a15      	ldr	r2, [pc, #84]	@ (80024f4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80024a0:	401a      	ands	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	223c      	movs	r2, #60	@ 0x3c
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b004      	add	sp, #16
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fffffcff 	.word	0xfffffcff
 80024c8:	fffffbff 	.word	0xfffffbff
 80024cc:	fffff7ff 	.word	0xfffff7ff
 80024d0:	ffffefff 	.word	0xffffefff
 80024d4:	ffffdfff 	.word	0xffffdfff
 80024d8:	ffffbfff 	.word	0xffffbfff
 80024dc:	fff0ffff 	.word	0xfff0ffff
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	efffffff 	.word	0xefffffff
 80024e8:	ff0fffff 	.word	0xff0fffff
 80024ec:	feffffff 	.word	0xfeffffff
 80024f0:	fdffffff 	.word	0xfdffffff
 80024f4:	dfffffff 	.word	0xdfffffff

080024f8 <melody>:
#include "stm32c0xx_hal.h"
#include "buzzer.h"

void melody(TIM_HandleTypeDef *_htim, uint32_t freq, uint32_t duration_melody)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]

	//Calculation for prescaler = fCPU/ (period * freq of counter) - 1
	uint32_t prescaler = ((HAL_RCC_GetSysClockFreq()/ (50*freq)) - 1);
 8002504:	f7fe fe94 	bl	8001230 <HAL_RCC_GetSysClockFreq>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2232      	movs	r2, #50	@ 0x32
 800250c:	4353      	muls	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	f7fd fdfa 	bl	8000108 <__udivsi3>
 8002514:	0003      	movs	r3, r0
 8002516:	3b01      	subs	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]

	uint32_t period = ((HAL_RCC_GetSysClockFreq() / prescaler/freq)-1);
 800251a:	f7fe fe89 	bl	8001230 <HAL_RCC_GetSysClockFreq>
 800251e:	0003      	movs	r3, r0
 8002520:	69f9      	ldr	r1, [r7, #28]
 8002522:	0018      	movs	r0, r3
 8002524:	f7fd fdf0 	bl	8000108 <__udivsi3>
 8002528:	0003      	movs	r3, r0
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	0018      	movs	r0, r3
 800252e:	f7fd fdeb 	bl	8000108 <__udivsi3>
 8002532:	0003      	movs	r3, r0
 8002534:	3b01      	subs	r3, #1
 8002536:	61bb      	str	r3, [r7, #24]

	uint32_t duty = period/2;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_PRESCALER(_htim, prescaler);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_AUTORELOAD(_htim, period);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]

	_htim->Instance->CCR1 = duty;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	635a      	str	r2, [r3, #52]	@ 0x34

	//HAL_TIM_PWM_Start(_htim, TIM_CHANNEL_1);

	HAL_Delay(duration_melody);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	0018      	movs	r0, r3
 8002560:	f7fe f936 	bl	80007d0 <HAL_Delay>

	//HAL_TIM_PWM_Stop(_htim, TIM_CHANNEL_1);
}
 8002564:	46c0      	nop			@ (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b008      	add	sp, #32
 800256a:	bd80      	pop	{r7, pc}

0800256c <memset>:
 800256c:	0003      	movs	r3, r0
 800256e:	1882      	adds	r2, r0, r2
 8002570:	4293      	cmp	r3, r2
 8002572:	d100      	bne.n	8002576 <memset+0xa>
 8002574:	4770      	bx	lr
 8002576:	7019      	strb	r1, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	e7f9      	b.n	8002570 <memset+0x4>

0800257c <__libc_init_array>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	2600      	movs	r6, #0
 8002580:	4c0c      	ldr	r4, [pc, #48]	@ (80025b4 <__libc_init_array+0x38>)
 8002582:	4d0d      	ldr	r5, [pc, #52]	@ (80025b8 <__libc_init_array+0x3c>)
 8002584:	1b64      	subs	r4, r4, r5
 8002586:	10a4      	asrs	r4, r4, #2
 8002588:	42a6      	cmp	r6, r4
 800258a:	d109      	bne.n	80025a0 <__libc_init_array+0x24>
 800258c:	2600      	movs	r6, #0
 800258e:	f000 f819 	bl	80025c4 <_init>
 8002592:	4c0a      	ldr	r4, [pc, #40]	@ (80025bc <__libc_init_array+0x40>)
 8002594:	4d0a      	ldr	r5, [pc, #40]	@ (80025c0 <__libc_init_array+0x44>)
 8002596:	1b64      	subs	r4, r4, r5
 8002598:	10a4      	asrs	r4, r4, #2
 800259a:	42a6      	cmp	r6, r4
 800259c:	d105      	bne.n	80025aa <__libc_init_array+0x2e>
 800259e:	bd70      	pop	{r4, r5, r6, pc}
 80025a0:	00b3      	lsls	r3, r6, #2
 80025a2:	58eb      	ldr	r3, [r5, r3]
 80025a4:	4798      	blx	r3
 80025a6:	3601      	adds	r6, #1
 80025a8:	e7ee      	b.n	8002588 <__libc_init_array+0xc>
 80025aa:	00b3      	lsls	r3, r6, #2
 80025ac:	58eb      	ldr	r3, [r5, r3]
 80025ae:	4798      	blx	r3
 80025b0:	3601      	adds	r6, #1
 80025b2:	e7f2      	b.n	800259a <__libc_init_array+0x1e>
 80025b4:	080026d0 	.word	0x080026d0
 80025b8:	080026d0 	.word	0x080026d0
 80025bc:	080026d4 	.word	0x080026d4
 80025c0:	080026d0 	.word	0x080026d0

080025c4 <_init>:
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ca:	bc08      	pop	{r3}
 80025cc:	469e      	mov	lr, r3
 80025ce:	4770      	bx	lr

080025d0 <_fini>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d6:	bc08      	pop	{r3}
 80025d8:	469e      	mov	lr, r3
 80025da:	4770      	bx	lr
