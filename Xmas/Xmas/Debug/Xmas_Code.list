
Xmas_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a50  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002b10  08002b10  00003b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c34  08002c34  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c34  08002c34  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c34  08002c34  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c34  08002c34  00003c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c38  08002c38  00003c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002c3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000005c  08002c98  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08002c98  0000438c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b98  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c96  00000000  00000000  0001bc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0001e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012af  00000000  00000000  0001f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000142a3  00000000  00000000  000207ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a348  00000000  00000000  00034a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ed6e  00000000  00000000  0004edda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdb48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002580  00000000  00000000  000cdb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000bf87  00000000  00000000  000d010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000dc093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002af8 	.word	0x08002af8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08002af8 	.word	0x08002af8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b500      	push	{lr}
 80003f6:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f8:	2218      	movs	r2, #24
 80003fa:	2100      	movs	r1, #0
 80003fc:	a806      	add	r0, sp, #24
 80003fe:	f002 fb35 	bl	8002a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000402:	2214      	movs	r2, #20
 8000404:	2100      	movs	r1, #0
 8000406:	4668      	mov	r0, sp
 8000408:	f002 fb30 	bl	8002a6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040c:	2302      	movs	r3, #2
 800040e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	33fe      	adds	r3, #254	@ 0xfe
 8000412:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	3bc0      	subs	r3, #192	@ 0xc0
 8000418:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f000 fe49 	bl	80010b0 <HAL_RCC_OscConfig>
 800041e:	2800      	cmp	r0, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000422:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	2207      	movs	r2, #7
 8000428:	2300      	movs	r3, #0
 800042a:	9200      	str	r2, [sp, #0]
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2200      	movs	r2, #0
 8000430:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000432:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000434:	2101      	movs	r1, #1
 8000436:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	9202      	str	r2, [sp, #8]
 800043a:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800043c:	f000 ff80 	bl	8001340 <HAL_RCC_ClockConfig>
 8000440:	2800      	cmp	r0, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x54>
 8000444:	b672      	cpsid	i
  while (1)
 8000446:	e7fe      	b.n	8000446 <SystemClock_Config+0x52>
}
 8000448:	b00d      	add	sp, #52	@ 0x34
 800044a:	bd00      	pop	{pc}

0800044c <main>:
{
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	b0a3      	sub	sp, #140	@ 0x8c
  HAL_Init();
 8000450:	f000 faea 	bl	8000a28 <HAL_Init>
  HAL_TIM_PWM_DeInit(&htim1);
 8000454:	4fa7      	ldr	r7, [pc, #668]	@ (80006f4 <main+0x2a8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	4ca8      	ldr	r4, [pc, #672]	@ (80006f8 <main+0x2ac>)
  HAL_TIM_PWM_DeInit(&htim1);
 8000458:	0038      	movs	r0, r7
 800045a:	f001 fa37 	bl	80018cc <HAL_TIM_PWM_DeInit>
  SystemClock_Config();
 800045e:	f7ff ffc9 	bl	80003f4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	2214      	movs	r2, #20
 8000464:	2100      	movs	r1, #0
 8000466:	a814      	add	r0, sp, #80	@ 0x50
 8000468:	f002 fb00 	bl	8002a6c <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	2302      	movs	r3, #2
 800046e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	431a      	orrs	r2, r3
 8000474:	6362      	str	r2, [r4, #52]	@ 0x34
 8000476:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 8000478:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4013      	ands	r3, r2
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	2304      	movs	r3, #4
 8000482:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 8000484:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	431a      	orrs	r2, r3
 8000488:	6362      	str	r2, [r4, #52]	@ 0x34
 800048a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 800048c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	4013      	ands	r3, r2
 8000490:	9302      	str	r3, [sp, #8]
 8000492:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	432b      	orrs	r3, r5
 800049a:	6363      	str	r3, [r4, #52]	@ 0x34
 800049c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	402b      	ands	r3, r5
 80004a2:	9303      	str	r3, [sp, #12]
 80004a4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(PERIPH_SUPLLY_GPIO_Port, PERIPH_SUPLLY_Pin, GPIO_PIN_RESET);
 80004a6:	f000 fdfd 	bl	80010a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PERIPH_SUPLLY_Pin;
 80004aa:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 80004ac:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = PERIPH_SUPLLY_Pin;
 80004ae:	9314      	str	r3, [sp, #80]	@ 0x50
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 80004b0:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004b2:	3b6f      	subs	r3, #111	@ 0x6f
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 80004b4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004b6:	9315      	str	r3, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b8:	9516      	str	r5, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	9617      	str	r6, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(PERIPH_SUPLLY_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f000 fcf0 	bl	8000ea0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004c2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c4:	432b      	orrs	r3, r5
 80004c6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80004c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ca:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004cc:	401d      	ands	r5, r3
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ce:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d0:	9500      	str	r5, [sp, #0]
 80004d2:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004d4:	f000 fad8 	bl	8000a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d8:	2009      	movs	r0, #9
 80004da:	f000 faff 	bl	8000adc <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	2210      	movs	r2, #16
 80004e0:	2100      	movs	r1, #0
 80004e2:	a80c      	add	r0, sp, #48	@ 0x30
 80004e4:	f002 fac2 	bl	8002a6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e8:	220c      	movs	r2, #12
 80004ea:	2100      	movs	r1, #0
 80004ec:	a808      	add	r0, sp, #32
 80004ee:	f002 fabd 	bl	8002a6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f2:	221c      	movs	r2, #28
 80004f4:	2100      	movs	r1, #0
 80004f6:	a814      	add	r0, sp, #80	@ 0x50
 80004f8:	f002 fab8 	bl	8002a6c <memset>
  htim3.Instance = TIM3;
 80004fc:	4c7f      	ldr	r4, [pc, #508]	@ (80006fc <main+0x2b0>)
 80004fe:	4b80      	ldr	r3, [pc, #512]	@ (8000700 <main+0x2b4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000500:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 8000502:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 5;
 8000504:	2305      	movs	r3, #5
 8000506:	6063      	str	r3, [r4, #4]
  htim3.Init.Period = 9;
 8000508:	3304      	adds	r3, #4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	60a6      	str	r6, [r4, #8]
  htim3.Init.Period = 9;
 800050c:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050e:	6126      	str	r6, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000510:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000512:	f001 f8e3 	bl	80016dc <HAL_TIM_Base_Init>
 8000516:	2800      	cmp	r0, #0
 8000518:	d001      	beq.n	800051e <main+0xd2>
 800051a:	b672      	cpsid	i
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0xd0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051e:	2680      	movs	r6, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000520:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000522:	0176      	lsls	r6, r6, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000524:	a90c      	add	r1, sp, #48	@ 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000526:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000528:	f001 fc6c 	bl	8001e04 <HAL_TIM_ConfigClockSource>
 800052c:	2800      	cmp	r0, #0
 800052e:	d001      	beq.n	8000534 <main+0xe8>
 8000530:	b672      	cpsid	i
  while (1)
 8000532:	e7fe      	b.n	8000532 <main+0xe6>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000534:	0020      	movs	r0, r4
 8000536:	f001 f94d 	bl	80017d4 <HAL_TIM_PWM_Init>
 800053a:	2800      	cmp	r0, #0
 800053c:	d001      	beq.n	8000542 <main+0xf6>
 800053e:	b672      	cpsid	i
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0xf4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000542:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000544:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000546:	a908      	add	r1, sp, #32
 8000548:	0020      	movs	r0, r4
 800054a:	f001 fd13 	bl	8001f74 <HAL_TIMEx_MasterConfigSynchronization>
 800054e:	1e02      	subs	r2, r0, #0
 8000550:	d001      	beq.n	8000556 <main+0x10a>
 8000552:	b672      	cpsid	i
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x108>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000556:	2060      	movs	r0, #96	@ 0x60
 8000558:	2100      	movs	r1, #0
 800055a:	9014      	str	r0, [sp, #80]	@ 0x50
 800055c:	9115      	str	r1, [sp, #84]	@ 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800055e:	0020      	movs	r0, r4
 8000560:	a914      	add	r1, sp, #80	@ 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000562:	9216      	str	r2, [sp, #88]	@ 0x58
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000564:	9218      	str	r2, [sp, #96]	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000566:	f001 faa9 	bl	8001abc <HAL_TIM_PWM_ConfigChannel>
 800056a:	1e05      	subs	r5, r0, #0
 800056c:	d001      	beq.n	8000572 <main+0x126>
 800056e:	b672      	cpsid	i
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x124>
  HAL_TIM_MspPostInit(&htim3);
 8000572:	0020      	movs	r0, r4
 8000574:	f000 f932 	bl	80007dc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000578:	2210      	movs	r2, #16
 800057a:	0029      	movs	r1, r5
 800057c:	a808      	add	r0, sp, #32
 800057e:	f002 fa75 	bl	8002a6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000582:	220c      	movs	r2, #12
 8000584:	0029      	movs	r1, r5
 8000586:	a804      	add	r0, sp, #16
 8000588:	f002 fa70 	bl	8002a6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800058c:	221c      	movs	r2, #28
 800058e:	0029      	movs	r1, r5
 8000590:	a80c      	add	r0, sp, #48	@ 0x30
 8000592:	f002 fa6b 	bl	8002a6c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000596:	2234      	movs	r2, #52	@ 0x34
 8000598:	0029      	movs	r1, r5
 800059a:	a814      	add	r0, sp, #80	@ 0x50
 800059c:	f002 fa66 	bl	8002a6c <memset>
  htim1.Instance = TIM1;
 80005a0:	4b58      	ldr	r3, [pc, #352]	@ (8000704 <main+0x2b8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005a2:	0038      	movs	r0, r7
  htim1.Instance = TIM1;
 80005a4:	603b      	str	r3, [r7, #0]
  htim1.Init.Prescaler = 479;
 80005a6:	23e0      	movs	r3, #224	@ 0xe0
 80005a8:	33ff      	adds	r3, #255	@ 0xff
 80005aa:	607b      	str	r3, [r7, #4]
  htim1.Init.Period = 50;
 80005ac:	3bae      	subs	r3, #174	@ 0xae
 80005ae:	3bff      	subs	r3, #255	@ 0xff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b0:	60bd      	str	r5, [r7, #8]
  htim1.Init.Period = 50;
 80005b2:	60fb      	str	r3, [r7, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b4:	613d      	str	r5, [r7, #16]
  htim1.Init.RepetitionCounter = 0;
 80005b6:	617d      	str	r5, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b8:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005ba:	f001 f88f 	bl	80016dc <HAL_TIM_Base_Init>
 80005be:	2800      	cmp	r0, #0
 80005c0:	d001      	beq.n	80005c6 <main+0x17a>
 80005c2:	b672      	cpsid	i
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0x178>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005c6:	0038      	movs	r0, r7
 80005c8:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ca:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005cc:	f001 fc1a 	bl	8001e04 <HAL_TIM_ConfigClockSource>
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d001      	beq.n	80005d8 <main+0x18c>
 80005d4:	b672      	cpsid	i
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x18a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005d8:	0038      	movs	r0, r7
 80005da:	f001 f8fb 	bl	80017d4 <HAL_TIM_PWM_Init>
 80005de:	2800      	cmp	r0, #0
 80005e0:	d001      	beq.n	80005e6 <main+0x19a>
 80005e2:	b672      	cpsid	i
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x198>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e6:	2500      	movs	r5, #0
 80005e8:	2600      	movs	r6, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ea:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ec:	a904      	add	r1, sp, #16
 80005ee:	0038      	movs	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f0:	9504      	str	r5, [sp, #16]
 80005f2:	9605      	str	r6, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005f4:	f001 fcbe 	bl	8001f74 <HAL_TIMEx_MasterConfigSynchronization>
 80005f8:	1e02      	subs	r2, r0, #0
 80005fa:	d001      	beq.n	8000600 <main+0x1b4>
 80005fc:	b672      	cpsid	i
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x1b2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000600:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8000602:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000604:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000606:	900f      	str	r0, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000608:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800060a:	a90c      	add	r1, sp, #48	@ 0x30
 800060c:	0038      	movs	r0, r7
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800060e:	9510      	str	r5, [sp, #64]	@ 0x40
 8000610:	9611      	str	r6, [sp, #68]	@ 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000612:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000614:	f001 fa52 	bl	8001abc <HAL_TIM_PWM_ConfigChannel>
 8000618:	2800      	cmp	r0, #0
 800061a:	d001      	beq.n	8000620 <main+0x1d4>
 800061c:	b672      	cpsid	i
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x1d2>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000620:	2280      	movs	r2, #128	@ 0x80
 8000622:	0192      	lsls	r2, r2, #6
 8000624:	9219      	str	r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000626:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000628:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800062a:	0492      	lsls	r2, r2, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800062c:	0038      	movs	r0, r7
 800062e:	a914      	add	r1, sp, #80	@ 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000630:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000632:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000634:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.DeadTime = 0;
 8000636:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000638:	9318      	str	r3, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakFilter = 0;
 800063a:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800063c:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800063e:	931c      	str	r3, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000640:	921d      	str	r2, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000642:	931e      	str	r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000644:	931f      	str	r3, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000646:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000648:	f001 fcc8 	bl	8001fdc <HAL_TIMEx_ConfigBreakDeadTime>
 800064c:	1e06      	subs	r6, r0, #0
 800064e:	d001      	beq.n	8000654 <main+0x208>
 8000650:	b672      	cpsid	i
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x206>
  HAL_TIM_MspPostInit(&htim1);
 8000654:	0038      	movs	r0, r7
 8000656:	f000 f8c1 	bl	80007dc <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 800065a:	4d2b      	ldr	r5, [pc, #172]	@ (8000708 <main+0x2bc>)
 800065c:	4b2b      	ldr	r3, [pc, #172]	@ (800070c <main+0x2c0>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800065e:	0028      	movs	r0, r5
  huart1.Instance = USART1;
 8000660:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 8000662:	23e1      	movs	r3, #225	@ 0xe1
 8000664:	025b      	lsls	r3, r3, #9
 8000666:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000668:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	60ae      	str	r6, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	60ee      	str	r6, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066e:	612e      	str	r6, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	61ae      	str	r6, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	61ee      	str	r6, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	622e      	str	r6, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000678:	626e      	str	r6, [r5, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067a:	62ae      	str	r6, [r5, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800067c:	f001 fecc 	bl	8002418 <HAL_UART_Init>
 8000680:	1e01      	subs	r1, r0, #0
 8000682:	d001      	beq.n	8000688 <main+0x23c>
 8000684:	b672      	cpsid	i
  while (1)
 8000686:	e7fe      	b.n	8000686 <main+0x23a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000688:	0028      	movs	r0, r5
 800068a:	f001 ffd3 	bl	8002634 <HAL_UARTEx_SetTxFifoThreshold>
 800068e:	1e01      	subs	r1, r0, #0
 8000690:	d001      	beq.n	8000696 <main+0x24a>
 8000692:	b672      	cpsid	i
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x248>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000696:	0028      	movs	r0, r5
 8000698:	f002 f81c 	bl	80026d4 <HAL_UARTEx_SetRxFifoThreshold>
 800069c:	2800      	cmp	r0, #0
 800069e:	d001      	beq.n	80006a4 <main+0x258>
 80006a0:	b672      	cpsid	i
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0x256>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006a4:	0028      	movs	r0, r5
 80006a6:	f001 ffa9 	bl	80025fc <HAL_UARTEx_DisableFifoMode>
 80006aa:	1e05      	subs	r5, r0, #0
 80006ac:	d001      	beq.n	80006b2 <main+0x266>
 80006ae:	b672      	cpsid	i
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x264>
  	begin(&htim3, &hdma_tim3_ch1 ,TIM_CHANNEL_1, 4);
 80006b2:	4e17      	ldr	r6, [pc, #92]	@ (8000710 <main+0x2c4>)
 80006b4:	0002      	movs	r2, r0
 80006b6:	2304      	movs	r3, #4
 80006b8:	0031      	movs	r1, r6
 80006ba:	0020      	movs	r0, r4
 80006bc:	f002 f85c 	bl	8002778 <begin>
  	setLed(1, 0, 0 , 50);
 80006c0:	2332      	movs	r3, #50	@ 0x32
 80006c2:	002a      	movs	r2, r5
 80006c4:	0029      	movs	r1, r5
 80006c6:	2001      	movs	r0, #1
 80006c8:	f002 f8d8 	bl	800287c <setLed>
	setLed(2, 0, 50 , 0);
 80006cc:	002b      	movs	r3, r5
 80006ce:	2232      	movs	r2, #50	@ 0x32
 80006d0:	0029      	movs	r1, r5
 80006d2:	2002      	movs	r0, #2
 80006d4:	f002 f8d2 	bl	800287c <setLed>
	setLed(3, 50, 0 , 0);
 80006d8:	002b      	movs	r3, r5
 80006da:	002a      	movs	r2, r5
 80006dc:	2132      	movs	r1, #50	@ 0x32
 80006de:	2003      	movs	r0, #3
 80006e0:	f002 f8cc 	bl	800287c <setLed>
	turnOnLed(&htim3, &hdma_tim3_ch1 ,TIM_CHANNEL_1, 4);
 80006e4:	2304      	movs	r3, #4
 80006e6:	002a      	movs	r2, r5
 80006e8:	0031      	movs	r1, r6
 80006ea:	0020      	movs	r0, r4
 80006ec:	f002 f856 	bl	800279c <turnOnLed>
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x2a4>
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	200001b4 	.word	0x200001b4
 80006f8:	40021000 	.word	0x40021000
 80006fc:	20000168 	.word	0x20000168
 8000700:	40000400 	.word	0x40000400
 8000704:	40012c00 	.word	0x40012c00
 8000708:	20000078 	.word	0x20000078
 800070c:	40013800 	.word	0x40013800
 8000710:	2000010c 	.word	0x2000010c

08000714 <Error_Handler>:
 8000714:	b672      	cpsid	i
  while (1)
 8000716:	e7fe      	b.n	8000716 <Error_Handler+0x2>

08000718 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	2201      	movs	r2, #1
 800071a:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <HAL_MspInit+0x2c>)
{
 800071c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000720:	4311      	orrs	r1, r2
 8000722:	6419      	str	r1, [r3, #64]	@ 0x40
 8000724:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000726:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	9200      	str	r2, [sp, #0]
 800072c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000730:	0549      	lsls	r1, r1, #21
 8000732:	430a      	orrs	r2, r1
 8000734:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000738:	400b      	ands	r3, r1
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	b002      	add	sp, #8
 8000740:	4770      	bx	lr
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000748:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM1)
 800074a:	6803      	ldr	r3, [r0, #0]
 800074c:	4a1e      	ldr	r2, [pc, #120]	@ (80007c8 <HAL_TIM_Base_MspInit+0x80>)
{
 800074e:	0004      	movs	r4, r0
 8000750:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8000752:	4293      	cmp	r3, r2
 8000754:	d004      	beq.n	8000760 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000756:	4a1d      	ldr	r2, [pc, #116]	@ (80007cc <HAL_TIM_Base_MspInit+0x84>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d00c      	beq.n	8000776 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800075c:	b003      	add	sp, #12
 800075e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <HAL_TIM_Base_MspInit+0x88>)
 8000764:	0109      	lsls	r1, r1, #4
 8000766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000768:	430a      	orrs	r2, r1
 800076a:	641a      	str	r2, [r3, #64]	@ 0x40
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	400b      	ands	r3, r1
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	9b00      	ldr	r3, [sp, #0]
 8000774:	e7f2      	b.n	800075c <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000776:	2302      	movs	r3, #2
 8000778:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <HAL_TIM_Base_MspInit+0x88>)
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 800077a:	4d16      	ldr	r5, [pc, #88]	@ (80007d4 <HAL_TIM_Base_MspInit+0x8c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800077c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800077e:	0028      	movs	r0, r5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000780:	4319      	orrs	r1, r3
 8000782:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8000784:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000786:	4013      	ands	r3, r2
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	9b01      	ldr	r3, [sp, #4]
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_TIM_Base_MspInit+0x90>)
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800078e:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8000790:	602b      	str	r3, [r5, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000792:	2320      	movs	r3, #32
 8000794:	606b      	str	r3, [r5, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000796:	3b10      	subs	r3, #16
 8000798:	60ab      	str	r3, [r5, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800079a:	2300      	movs	r3, #0
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800079c:	612a      	str	r2, [r5, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800079e:	3280      	adds	r2, #128	@ 0x80
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a0:	60eb      	str	r3, [r5, #12]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a2:	616a      	str	r2, [r5, #20]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80007a4:	61eb      	str	r3, [r5, #28]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007a6:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007a8:	23c0      	movs	r3, #192	@ 0xc0
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007aa:	00d2      	lsls	r2, r2, #3
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007ac:	019b      	lsls	r3, r3, #6
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ae:	61aa      	str	r2, [r5, #24]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007b0:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80007b2:	f000 f9b9 	bl	8000b28 <HAL_DMA_Init>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	d102      	bne.n	80007c0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80007ba:	6265      	str	r5, [r4, #36]	@ 0x24
 80007bc:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80007be:	e7cd      	b.n	800075c <HAL_TIM_Base_MspInit+0x14>
      Error_Handler();
 80007c0:	f7ff ffa8 	bl	8000714 <Error_Handler>
 80007c4:	e7f9      	b.n	80007ba <HAL_TIM_Base_MspInit+0x72>
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	40000400 	.word	0x40000400
 80007d0:	40021000 	.word	0x40021000
 80007d4:	2000010c 	.word	0x2000010c
 80007d8:	40020008 	.word	0x40020008

080007dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007dc:	b510      	push	{r4, lr}
 80007de:	0004      	movs	r4, r0
 80007e0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	2214      	movs	r2, #20
 80007e4:	2100      	movs	r1, #0
 80007e6:	a802      	add	r0, sp, #8
 80007e8:	f002 f940 	bl	8002a6c <memset>
  if(htim->Instance==TIM1)
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	4a17      	ldr	r2, [pc, #92]	@ (800084c <HAL_TIM_MspPostInit+0x70>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d004      	beq.n	80007fe <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80007f4:	4a16      	ldr	r2, [pc, #88]	@ (8000850 <HAL_TIM_MspPostInit+0x74>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d018      	beq.n	800082c <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007fa:	b008      	add	sp, #32
 80007fc:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2301      	movs	r3, #1
 8000800:	4a14      	ldr	r2, [pc, #80]	@ (8000854 <HAL_TIM_MspPostInit+0x78>)
 8000802:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000804:	4319      	orrs	r1, r3
 8000806:	6351      	str	r1, [r2, #52]	@ 0x34
 8000808:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800080a:	4013      	ands	r3, r2
 800080c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800080e:	2220      	movs	r2, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000812:	2302      	movs	r3, #2
 8000814:	9202      	str	r2, [sp, #8]
 8000816:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	2302      	movs	r3, #2
 800081a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 800081c:	3303      	adds	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	20a0      	movs	r0, #160	@ 0xa0
 8000820:	a902      	add	r1, sp, #8
 8000822:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000824:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f000 fb3b 	bl	8000ea0 <HAL_GPIO_Init>
}
 800082a:	e7e6      	b.n	80007fa <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	2301      	movs	r3, #1
 800082e:	4a09      	ldr	r2, [pc, #36]	@ (8000854 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000830:	2040      	movs	r0, #64	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000834:	4319      	orrs	r1, r3
 8000836:	6351      	str	r1, [r2, #52]	@ 0x34
 8000838:	6b52      	ldr	r2, [r2, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800083a:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	401a      	ands	r2, r3
 800083e:	9201      	str	r2, [sp, #4]
 8000840:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000842:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000844:	9002      	str	r0, [sp, #8]
 8000846:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000848:	9205      	str	r2, [sp, #20]
 800084a:	e7e8      	b.n	800081e <HAL_TIM_MspPostInit+0x42>
 800084c:	40012c00 	.word	0x40012c00
 8000850:	40000400 	.word	0x40000400
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b5d0      	push	{r4, r6, r7, lr}
 800085a:	0004      	movs	r4, r0
 800085c:	b090      	sub	sp, #64	@ 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	2214      	movs	r2, #20
 8000860:	2100      	movs	r1, #0
 8000862:	a804      	add	r0, sp, #16
 8000864:	f002 f902 	bl	8002a6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000868:	221c      	movs	r2, #28
 800086a:	2100      	movs	r1, #0
 800086c:	a809      	add	r0, sp, #36	@ 0x24
 800086e:	f002 f8fd 	bl	8002a6c <memset>
  if(huart->Instance==USART1)
 8000872:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <HAL_UART_MspInit+0xa4>)
 8000874:	6822      	ldr	r2, [r4, #0]
 8000876:	429a      	cmp	r2, r3
 8000878:	d001      	beq.n	800087e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800087a:	b010      	add	sp, #64	@ 0x40
 800087c:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800087e:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000882:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	f000 fe90 	bl	80015a8 <HAL_RCCEx_PeriphCLKConfig>
 8000888:	2800      	cmp	r0, #0
 800088a:	d134      	bne.n	80008f6 <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800088c:	2180      	movs	r1, #128	@ 0x80
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <HAL_UART_MspInit+0xa8>)
 8000890:	01c9      	lsls	r1, r1, #7
 8000892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000894:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000896:	430a      	orrs	r2, r1
 8000898:	641a      	str	r2, [r3, #64]	@ 0x40
 800089a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800089c:	2700      	movs	r7, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800089e:	400a      	ands	r2, r1
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	2202      	movs	r2, #2
 80008a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80008a8:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4311      	orrs	r1, r2
 80008ac:	6359      	str	r1, [r3, #52]	@ 0x34
 80008ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	4814      	ldr	r0, [pc, #80]	@ (8000904 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	400a      	ands	r2, r1
 80008b4:	9202      	str	r2, [sp, #8]
 80008b6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b8:	2204      	movs	r2, #4
 80008ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80008bc:	4311      	orrs	r1, r2
 80008be:	6359      	str	r1, [r3, #52]	@ 0x34
 80008c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	401a      	ands	r2, r3
 80008c6:	9203      	str	r2, [sp, #12]
 80008c8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008ca:	2280      	movs	r2, #128	@ 0x80
 80008cc:	2302      	movs	r3, #2
 80008ce:	9606      	str	r6, [sp, #24]
 80008d0:	9707      	str	r7, [sp, #28]
 80008d2:	9204      	str	r2, [sp, #16]
 80008d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80008d6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f000 fae2 	bl	8000ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008dc:	2280      	movs	r2, #128	@ 0x80
 80008de:	2302      	movs	r3, #2
 80008e0:	01d2      	lsls	r2, r2, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	4809      	ldr	r0, [pc, #36]	@ (8000908 <HAL_UART_MspInit+0xb0>)
 80008e4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008e6:	9204      	str	r2, [sp, #16]
 80008e8:	9305      	str	r3, [sp, #20]
 80008ea:	9606      	str	r6, [sp, #24]
 80008ec:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80008ee:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f0:	f000 fad6 	bl	8000ea0 <HAL_GPIO_Init>
}
 80008f4:	e7c1      	b.n	800087a <HAL_UART_MspInit+0x22>
      Error_Handler();
 80008f6:	f7ff ff0d 	bl	8000714 <Error_Handler>
 80008fa:	e7c7      	b.n	800088c <HAL_UART_MspInit+0x34>
 80008fc:	40013800 	.word	0x40013800
 8000900:	40021000 	.word	0x40021000
 8000904:	50000400 	.word	0x50000400
 8000908:	50000800 	.word	0x50000800

0800090c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler>
 800090e:	46c0      	nop			@ (mov r8, r8)

08000910 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <HardFault_Handler>
 8000912:	46c0      	nop			@ (mov r8, r8)

08000914 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000914:	4770      	bx	lr
 8000916:	46c0      	nop			@ (mov r8, r8)

08000918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000918:	4770      	bx	lr
 800091a:	46c0      	nop			@ (mov r8, r8)

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091e:	f000 f88f 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bd10      	pop	{r4, pc}

08000924 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000924:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8000926:	4802      	ldr	r0, [pc, #8]	@ (8000930 <DMA1_Channel1_IRQHandler+0xc>)
 8000928:	f000 fa5e 	bl	8000de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800092c:	bd10      	pop	{r4, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	2000010c 	.word	0x2000010c

08000934 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	490c      	ldr	r1, [pc, #48]	@ (8000968 <_sbrk+0x34>)
 8000936:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <_sbrk+0x38>)
{
 8000938:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	490c      	ldr	r1, [pc, #48]	@ (8000970 <_sbrk+0x3c>)
{
 800093e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000940:	6808      	ldr	r0, [r1, #0]
 8000942:	2800      	cmp	r0, #0
 8000944:	d004      	beq.n	8000950 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000946:	18c3      	adds	r3, r0, r3
 8000948:	4293      	cmp	r3, r2
 800094a:	d806      	bhi.n	800095a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800094c:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800094e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000950:	4808      	ldr	r0, [pc, #32]	@ (8000974 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8000954:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4293      	cmp	r3, r2
 8000958:	d9f8      	bls.n	800094c <_sbrk+0x18>
    errno = ENOMEM;
 800095a:	f002 f8a1 	bl	8002aa0 <__errno>
 800095e:	230c      	movs	r3, #12
 8000960:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000962:	2001      	movs	r0, #1
 8000964:	4240      	negs	r0, r0
 8000966:	e7f2      	b.n	800094e <_sbrk+0x1a>
 8000968:	00000400 	.word	0x00000400
 800096c:	20001800 	.word	0x20001800
 8000970:	20000200 	.word	0x20000200
 8000974:	20000390 	.word	0x20000390

08000978 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	4b02      	ldr	r3, [pc, #8]	@ (8000984 <SystemInit+0xc>)
 800097c:	0512      	lsls	r2, r2, #20
 800097e:	609a      	str	r2, [r3, #8]
#endif
}
 8000980:	4770      	bx	lr
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000988:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800098c:	f7ff fff4 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000990:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000992:	e003      	b.n	800099c <LoopCopyDataInit>

08000994 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000996:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000998:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800099a:	3104      	adds	r1, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800099c:	480a      	ldr	r0, [pc, #40]	@ (80009c8 <LoopForever+0xa>)
  ldr r3, =_edata
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <LoopForever+0xe>)
  adds r2, r0, r1
 80009a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009a4:	d3f6      	bcc.n	8000994 <CopyDataInit>
  ldr r2, =_sbss
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <LoopForever+0x12>)
  b LoopFillZerobss
 80009a8:	e002      	b.n	80009b0 <LoopFillZerobss>

080009aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  str  r3, [r2]
 80009ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ae:	3204      	adds	r2, #4

080009b0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <LoopForever+0x16>)
  cmp r2, r3
 80009b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009b4:	d3f9      	bcc.n	80009aa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80009b6:	f002 f879 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff fd47 	bl	800044c <main>

080009be <LoopForever>:

LoopForever:
    b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   r0, =_estack
 80009c0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80009c4:	08002c3c 	.word	0x08002c3c
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 80009d0:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 80009d4:	2000038c 	.word	0x2000038c

080009d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_IRQHandler>
	...

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <HAL_InitTick+0x40>)
{
 80009e0:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0UL)
 80009e2:	7819      	ldrb	r1, [r3, #0]
 80009e4:	2900      	cmp	r1, #0
 80009e6:	d101      	bne.n	80009ec <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80009ec:	20fa      	movs	r0, #250	@ 0xfa
 80009ee:	0080      	lsls	r0, r0, #2
 80009f0:	f7ff fb8a 	bl	8000108 <__udivsi3>
 80009f4:	4d0a      	ldr	r5, [pc, #40]	@ (8000a20 <HAL_InitTick+0x44>)
 80009f6:	0001      	movs	r1, r0
 80009f8:	6828      	ldr	r0, [r5, #0]
 80009fa:	f7ff fb85 	bl	8000108 <__udivsi3>
 80009fe:	f000 f879 	bl	8000af4 <HAL_SYSTICK_Config>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d1f0      	bne.n	80009e8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	2c03      	cmp	r4, #3
 8000a08:	d8ee      	bhi.n	80009e8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0a:	3801      	subs	r0, #1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	0021      	movs	r1, r4
 8000a10:	f000 f83a 	bl	8000a88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_InitTick+0x48>)
 8000a16:	2000      	movs	r0, #0
 8000a18:	601c      	str	r4, [r3, #0]
  return status;
 8000a1a:	e7e6      	b.n	80009ea <HAL_InitTick+0xe>
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008

08000a28 <HAL_Init>:
{
 8000a28:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f7ff ffd6 	bl	80009dc <HAL_InitTick>
 8000a30:	1e04      	subs	r4, r0, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_Init+0x12>
    status = HAL_ERROR;
 8000a34:	2401      	movs	r4, #1
}
 8000a36:	0020      	movs	r0, r4
 8000a38:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000a3a:	f7ff fe6d 	bl	8000718 <HAL_MspInit>
 8000a3e:	e7fa      	b.n	8000a36 <HAL_Init+0xe>

08000a40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a40:	4a03      	ldr	r2, [pc, #12]	@ (8000a50 <HAL_IncTick+0x10>)
 8000a42:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <HAL_IncTick+0x14>)
 8000a44:	6811      	ldr	r1, [r2, #0]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	185b      	adds	r3, r3, r1
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	4770      	bx	lr
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	20000204 	.word	0x20000204
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a58:	4b01      	ldr	r3, [pc, #4]	@ (8000a60 <HAL_GetTick+0x8>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
}
 8000a5c:	4770      	bx	lr
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	20000204 	.word	0x20000204

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff fff6 	bl	8000a58 <HAL_GetTick>
 8000a6c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	1c63      	adds	r3, r4, #1
 8000a70:	d002      	beq.n	8000a78 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a72:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <HAL_Delay+0x20>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a78:	f7ff ffee 	bl	8000a58 <HAL_GetTick>
 8000a7c:	1b40      	subs	r0, r0, r5
 8000a7e:	42a0      	cmp	r0, r4
 8000a80:	d3fa      	bcc.n	8000a78 <HAL_Delay+0x14>
  {
  }
}
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	22ff      	movs	r2, #255	@ 0xff
 8000a8a:	2303      	movs	r3, #3
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	0014      	movs	r4, r2
 8000a90:	4003      	ands	r3, r0
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a96:	0189      	lsls	r1, r1, #6
 8000a98:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9a:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9c:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	db0b      	blt.n	8000aba <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <HAL_NVIC_SetPriority+0x4c>)
 8000aa4:	21c0      	movs	r1, #192	@ 0xc0
 8000aa6:	469c      	mov	ip, r3
 8000aa8:	0880      	lsrs	r0, r0, #2
 8000aaa:	0080      	lsls	r0, r0, #2
 8000aac:	4460      	add	r0, ip
 8000aae:	0089      	lsls	r1, r1, #2
 8000ab0:	5843      	ldr	r3, [r0, r1]
 8000ab2:	4023      	ands	r3, r4
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	5043      	str	r3, [r0, r1]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000ab8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aba:	230f      	movs	r3, #15
 8000abc:	4906      	ldr	r1, [pc, #24]	@ (8000ad8 <HAL_NVIC_SetPriority+0x50>)
 8000abe:	4003      	ands	r3, r0
 8000ac0:	468c      	mov	ip, r1
 8000ac2:	3b08      	subs	r3, #8
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4463      	add	r3, ip
 8000aca:	69d9      	ldr	r1, [r3, #28]
 8000acc:	400c      	ands	r4, r1
 8000ace:	4314      	orrs	r4, r2
 8000ad0:	61dc      	str	r4, [r3, #28]
 8000ad2:	e7f1      	b.n	8000ab8 <HAL_NVIC_SetPriority+0x30>
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000adc:	2800      	cmp	r0, #0
 8000ade:	db05      	blt.n	8000aec <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae0:	221f      	movs	r2, #31
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	4002      	ands	r2, r0
 8000ae6:	4093      	lsls	r3, r2
 8000ae8:	4a01      	ldr	r2, [pc, #4]	@ (8000af0 <HAL_NVIC_EnableIRQ+0x14>)
 8000aea:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000aec:	4770      	bx	lr
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	2280      	movs	r2, #128	@ 0x80
 8000af6:	1e43      	subs	r3, r0, #1
 8000af8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d20e      	bcs.n	8000b1e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b00:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b08:	6a03      	ldr	r3, [r0, #32]
 8000b0a:	0609      	lsls	r1, r1, #24
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	430b      	orrs	r3, r1
 8000b12:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b16:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	3307      	adds	r3, #7
 8000b1c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000b1e:	4770      	bx	lr
 8000b20:	e000e010 	.word	0xe000e010
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2a:	46ce      	mov	lr, r9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	0004      	movs	r4, r0
 8000b30:	b580      	push	{r7, lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d063      	beq.n	8000bfe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000b36:	6805      	ldr	r5, [r0, #0]
 8000b38:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <HAL_DMA_Init+0xdc>)
 8000b3a:	2114      	movs	r1, #20
 8000b3c:	18e8      	adds	r0, r5, r3
 8000b3e:	f7ff fae3 	bl	8000108 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000b42:	0083      	lsls	r3, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000b44:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b46:	2202      	movs	r2, #2
 8000b48:	2325      	movs	r3, #37	@ 0x25
 8000b4a:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b4c:	682b      	ldr	r3, [r5, #0]
 8000b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c08 <HAL_DMA_Init+0xe0>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000b50:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b52:	4013      	ands	r3, r2
 8000b54:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000b56:	68e3      	ldr	r3, [r4, #12]
 8000b58:	6921      	ldr	r1, [r4, #16]
 8000b5a:	4333      	orrs	r3, r6
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	6961      	ldr	r1, [r4, #20]
 8000b60:	682a      	ldr	r2, [r5, #0]
 8000b62:	430b      	orrs	r3, r1
 8000b64:	69a1      	ldr	r1, [r4, #24]
 8000b66:	430b      	orrs	r3, r1
 8000b68:	69e1      	ldr	r1, [r4, #28]
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	6a21      	ldr	r1, [r4, #32]
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	4313      	orrs	r3, r2
 8000b72:	602b      	str	r3, [r5, #0]
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000b76:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000b78:	469c      	mov	ip, r3
                                                             ((hdma->ChannelIndex >> 2U) * \
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000b7c:	4460      	add	r0, ip
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000b7e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000b80:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000b82:	23ff      	movs	r3, #255	@ 0xff
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000b84:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000b86:	0018      	movs	r0, r3
 8000b88:	4028      	ands	r0, r5
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000b8a:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000b8c:	3808      	subs	r0, #8
 8000b8e:	4699      	mov	r9, r3
 8000b90:	f7ff faba 	bl	8000108 <__udivsi3>
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000b94:	231c      	movs	r3, #28
 8000b96:	2201      	movs	r2, #1
 8000b98:	4003      	ands	r3, r0
 8000b9a:	0010      	movs	r0, r2
 8000b9c:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000b9e:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000ba0:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ba2:	01db      	lsls	r3, r3, #7
 8000ba4:	429e      	cmp	r6, r3
 8000ba6:	d020      	beq.n	8000bea <HAL_DMA_Init+0xc2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ba8:	464b      	mov	r3, r9
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000baa:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bac:	6861      	ldr	r1, [r4, #4]
 8000bae:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000bb0:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bb2:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bb4:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000bb6:	2903      	cmp	r1, #3
 8000bb8:	d81c      	bhi.n	8000bf4 <HAL_DMA_Init+0xcc>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000bba:	4916      	ldr	r1, [pc, #88]	@ (8000c14 <HAL_DMA_Init+0xec>)
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000bbc:	4816      	ldr	r0, [pc, #88]	@ (8000c18 <HAL_DMA_Init+0xf0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000bbe:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000bc4:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000bc6:	0089      	lsls	r1, r1, #2
 8000bc8:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000bca:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000bcc:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000bce:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bd0:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bd2:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8000bd4:	2225      	movs	r2, #37	@ 0x25
 8000bd6:	2101      	movs	r1, #1
  return HAL_OK;
 8000bd8:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bda:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8000bdc:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8000bde:	3a01      	subs	r2, #1
 8000be0:	54a3      	strb	r3, [r4, r2]
}
 8000be2:	bcc0      	pop	{r6, r7}
 8000be4:	46b9      	mov	r9, r7
 8000be6:	46b0      	mov	r8, r6
 8000be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000bea:	2300      	movs	r3, #0
 8000bec:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bee:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bf0:	4643      	mov	r3, r8
 8000bf2:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000bf8:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000bfa:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000bfc:	e7e9      	b.n	8000bd2 <HAL_DMA_Init+0xaa>
    return HAL_ERROR;
 8000bfe:	2001      	movs	r0, #1
 8000c00:	e7ef      	b.n	8000be2 <HAL_DMA_Init+0xba>
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	bffdfff8 	.word	0xbffdfff8
 8000c08:	ffff800f 	.word	0xffff800f
 8000c0c:	10008200 	.word	0x10008200
 8000c10:	40020880 	.word	0x40020880
 8000c14:	1000823f 	.word	0x1000823f
 8000c18:	40020940 	.word	0x40020940

08000c1c <HAL_DMA_Start>:
{
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000c20:	2024      	movs	r0, #36	@ 0x24
 8000c22:	5c25      	ldrb	r5, [r4, r0]
 8000c24:	2d01      	cmp	r5, #1
 8000c26:	d032      	beq.n	8000c8e <HAL_DMA_Start+0x72>
 8000c28:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8000c2a:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 8000c2c:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8000c2e:	5da5      	ldrb	r5, [r4, r6]
    status = HAL_BUSY;
 8000c30:	3822      	subs	r0, #34	@ 0x22
  if (HAL_DMA_STATE_READY == hdma->State)
 8000c32:	b2ef      	uxtb	r7, r5
 8000c34:	2d01      	cmp	r5, #1
 8000c36:	d003      	beq.n	8000c40 <HAL_DMA_Start+0x24>
  __HAL_UNLOCK(hdma);
 8000c38:	2324      	movs	r3, #36	@ 0x24
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	54e2      	strb	r2, [r4, r3]
}
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c40:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c42:	2000      	movs	r0, #0
 8000c44:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000c46:	6820      	ldr	r0, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c48:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 8000c4a:	6805      	ldr	r5, [r0, #0]
 8000c4c:	43bd      	bics	r5, r7
 8000c4e:	6005      	str	r5, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c50:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8000c52:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8000c54:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d002      	beq.n	8000c60 <HAL_DMA_Start+0x44>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c5a:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8000c5c:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8000c5e:	606e      	str	r6, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000c60:	4f0d      	ldr	r7, [pc, #52]	@ (8000c98 <HAL_DMA_Start+0x7c>)
 8000c62:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8000c64:	687d      	ldr	r5, [r7, #4]
 8000c66:	46ac      	mov	ip, r5
 8000c68:	251c      	movs	r5, #28
 8000c6a:	402e      	ands	r6, r5
 8000c6c:	3d1b      	subs	r5, #27
 8000c6e:	40b5      	lsls	r5, r6
 8000c70:	4666      	mov	r6, ip
 8000c72:	4335      	orrs	r5, r6
 8000c74:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8000c76:	6043      	str	r3, [r0, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c78:	68a3      	ldr	r3, [r4, #8]
 8000c7a:	2b10      	cmp	r3, #16
 8000c7c:	d009      	beq.n	8000c92 <HAL_DMA_Start+0x76>
    hdma->Instance->CPAR = SrcAddress;
 8000c7e:	6081      	str	r1, [r0, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c80:	60c2      	str	r2, [r0, #12]
    __HAL_DMA_ENABLE(hdma);
 8000c82:	2201      	movs	r2, #1
 8000c84:	6803      	ldr	r3, [r0, #0]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	e7d4      	b.n	8000c38 <HAL_DMA_Start+0x1c>
  __HAL_LOCK(hdma);
 8000c8e:	2002      	movs	r0, #2
 8000c90:	e7d5      	b.n	8000c3e <HAL_DMA_Start+0x22>
    hdma->Instance->CPAR = DstAddress;
 8000c92:	6082      	str	r2, [r0, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000c94:	60c1      	str	r1, [r0, #12]
 8000c96:	e7f4      	b.n	8000c82 <HAL_DMA_Start+0x66>
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_DMA_PollForTransfer>:
{
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	4657      	mov	r7, sl
 8000ca0:	464e      	mov	r6, r9
 8000ca2:	4645      	mov	r5, r8
 8000ca4:	46de      	mov	lr, fp
  __HAL_UNLOCK(hdma);
 8000ca6:	2324      	movs	r3, #36	@ 0x24
{
 8000ca8:	b5e0      	push	{r5, r6, r7, lr}
 8000caa:	0016      	movs	r6, r2
  __HAL_UNLOCK(hdma);
 8000cac:	2200      	movs	r2, #0
 8000cae:	54c2      	strb	r2, [r0, r3]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	5cc3      	ldrb	r3, [r0, r3]
{
 8000cb4:	0004      	movs	r4, r0
 8000cb6:	000f      	movs	r7, r1
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cb8:	b2dd      	uxtb	r5, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d008      	beq.n	8000cd0 <HAL_DMA_PollForTransfer+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8000cc2:	2001      	movs	r0, #1
}
 8000cc4:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc6:	46bb      	mov	fp, r7
 8000cc8:	46b2      	mov	sl, r6
 8000cca:	46a9      	mov	r9, r5
 8000ccc:	46a0      	mov	r8, r4
 8000cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 8000cd0:	6803      	ldr	r3, [r0, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	069b      	lsls	r3, r3, #26
 8000cd6:	d445      	bmi.n	8000d64 <HAL_DMA_PollForTransfer+0xc8>
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU);
 8000cd8:	221c      	movs	r2, #28
 8000cda:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000cdc:	4013      	ands	r3, r2
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d144      	bne.n	8000d6c <HAL_DMA_PollForTransfer+0xd0>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex  & 0x1cU);
 8000ce2:	409d      	lsls	r5, r3
  tickstart = HAL_GetTick();
 8000ce4:	f7ff feb8 	bl	8000a58 <HAL_GetTick>
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000ce8:	231c      	movs	r3, #28
 8000cea:	6c21      	ldr	r1, [r4, #64]	@ 0x40
  tickstart = HAL_GetTick();
 8000cec:	4680      	mov	r8, r0
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000cee:	4019      	ands	r1, r3
 8000cf0:	1c73      	adds	r3, r6, #1
 8000cf2:	d150      	bne.n	8000d96 <HAL_DMA_PollForTransfer+0xfa>
 8000cf4:	2008      	movs	r0, #8
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000de4 <HAL_DMA_PollForTransfer+0x148>)
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000cf8:	4088      	lsls	r0, r1
 8000cfa:	e002      	b.n	8000d02 <HAL_DMA_PollForTransfer+0x66>
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4202      	tst	r2, r0
 8000d00:	d136      	bne.n	8000d70 <HAL_DMA_PollForTransfer+0xd4>
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4215      	tst	r5, r2
 8000d06:	d0f9      	beq.n	8000cfc <HAL_DMA_PollForTransfer+0x60>
  if (hdma->DMAmuxRequestGen != 0U)
 8000d08:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00f      	beq.n	8000d2e <HAL_DMA_PollForTransfer+0x92>
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8000d0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d12:	6815      	ldr	r5, [r2, #0]
 8000d14:	4228      	tst	r0, r5
 8000d16:	d00a      	beq.n	8000d2e <HAL_DMA_PollForTransfer+0x92>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000d18:	2580      	movs	r5, #128	@ 0x80
 8000d1a:	681e      	ldr	r6, [r3, #0]
 8000d1c:	006d      	lsls	r5, r5, #1
 8000d1e:	4335      	orrs	r5, r6
 8000d20:	601d      	str	r5, [r3, #0]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8000d22:	2380      	movs	r3, #128	@ 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d24:	6050      	str	r0, [r2, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8000d26:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8000d2e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000d30:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	4202      	tst	r2, r0
 8000d36:	d005      	beq.n	8000d44 <HAL_DMA_PollForTransfer+0xa8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d38:	605a      	str	r2, [r3, #4]
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8000d3a:	2380      	movs	r3, #128	@ 0x80
 8000d3c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4313      	orrs	r3, r2
 8000d42:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000d44:	4a27      	ldr	r2, [pc, #156]	@ (8000de4 <HAL_DMA_PollForTransfer+0x148>)
 8000d46:	6850      	ldr	r0, [r2, #4]
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000d48:	2f00      	cmp	r7, #0
 8000d4a:	d11f      	bne.n	8000d8c <HAL_DMA_PollForTransfer+0xf0>
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	408b      	lsls	r3, r1
 8000d50:	4303      	orrs	r3, r0
 8000d52:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d54:	2325      	movs	r3, #37	@ 0x25
 8000d56:	2201      	movs	r2, #1
 8000d58:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8000d5a:	2324      	movs	r3, #36	@ 0x24
 8000d5c:	2200      	movs	r2, #0
  return HAL_OK;
 8000d5e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 8000d60:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8000d62:	e7af      	b.n	8000cc4 <HAL_DMA_PollForTransfer+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	63c3      	str	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8000d6a:	e7aa      	b.n	8000cc2 <HAL_DMA_PollForTransfer+0x26>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex  & 0x1cU);
 8000d6c:	2504      	movs	r5, #4
 8000d6e:	e7b8      	b.n	8000ce2 <HAL_DMA_PollForTransfer+0x46>
      __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000d70:	2301      	movs	r3, #1
 8000d72:	001a      	movs	r2, r3
 8000d74:	408a      	lsls	r2, r1
 8000d76:	481b      	ldr	r0, [pc, #108]	@ (8000de4 <HAL_DMA_PollForTransfer+0x148>)
 8000d78:	6845      	ldr	r5, [r0, #4]
 8000d7a:	432a      	orrs	r2, r5
 8000d7c:	6042      	str	r2, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	2225      	movs	r2, #37	@ 0x25
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d80:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma->State = HAL_DMA_STATE_READY;
 8000d82:	54a3      	strb	r3, [r4, r2]
      __HAL_UNLOCK(hdma);
 8000d84:	2200      	movs	r2, #0
 8000d86:	3323      	adds	r3, #35	@ 0x23
 8000d88:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8000d8a:	e79a      	b.n	8000cc2 <HAL_DMA_PollForTransfer+0x26>
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	408b      	lsls	r3, r1
 8000d90:	4303      	orrs	r3, r0
 8000d92:	6053      	str	r3, [r2, #4]
 8000d94:	e7e1      	b.n	8000d5a <HAL_DMA_PollForTransfer+0xbe>
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <HAL_DMA_PollForTransfer+0x148>)
 8000d98:	4699      	mov	r9, r3
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	3314      	adds	r3, #20
 8000da0:	469b      	mov	fp, r3
 8000da2:	e010      	b.n	8000dc6 <HAL_DMA_PollForTransfer+0x12a>
 8000da4:	464b      	mov	r3, r9
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4653      	mov	r3, sl
 8000daa:	408b      	lsls	r3, r1
 8000dac:	421a      	tst	r2, r3
 8000dae:	d1df      	bne.n	8000d70 <HAL_DMA_PollForTransfer+0xd4>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000db0:	f7ff fe52 	bl	8000a58 <HAL_GetTick>
 8000db4:	4643      	mov	r3, r8
 8000db6:	1ac0      	subs	r0, r0, r3
 8000db8:	42b0      	cmp	r0, r6
 8000dba:	d809      	bhi.n	8000dd0 <HAL_DMA_PollForTransfer+0x134>
 8000dbc:	2e00      	cmp	r6, #0
 8000dbe:	d007      	beq.n	8000dd0 <HAL_DMA_PollForTransfer+0x134>
    if (0U != __HAL_DMA_GET_FLAG(hdma, (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))))
 8000dc0:	465b      	mov	r3, fp
 8000dc2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8000dc4:	4019      	ands	r1, r3
  while (0U == __HAL_DMA_GET_FLAG(hdma, temp))
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	421d      	tst	r5, r3
 8000dcc:	d0ea      	beq.n	8000da4 <HAL_DMA_PollForTransfer+0x108>
 8000dce:	e79b      	b.n	8000d08 <HAL_DMA_PollForTransfer+0x6c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dd0:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_READY;
 8000dd2:	2201      	movs	r2, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dd4:	63e3      	str	r3, [r4, #60]	@ 0x3c
        hdma->State = HAL_DMA_STATE_READY;
 8000dd6:	3305      	adds	r3, #5
 8000dd8:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hdma);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8000de0:	e76f      	b.n	8000cc2 <HAL_DMA_PollForTransfer+0x26>
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	40020000 	.word	0x40020000

08000de8 <HAL_DMA_IRQHandler>:
{
 8000de8:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000dea:	211c      	movs	r1, #28
 8000dec:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8000dee:	4b2b      	ldr	r3, [pc, #172]	@ (8000e9c <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8000df0:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8000df2:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000df4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000df6:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000df8:	400b      	ands	r3, r1
 8000dfa:	0021      	movs	r1, r4
 8000dfc:	4099      	lsls	r1, r3
 8000dfe:	420a      	tst	r2, r1
 8000e00:	d010      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x3c>
 8000e02:	422c      	tst	r4, r5
 8000e04:	d00e      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x3c>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e06:	6833      	ldr	r3, [r6, #0]
 8000e08:	069b      	lsls	r3, r3, #26
 8000e0a:	d402      	bmi.n	8000e12 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e0c:	6833      	ldr	r3, [r6, #0]
 8000e0e:	43a3      	bics	r3, r4
 8000e10:	6033      	str	r3, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000e12:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <HAL_DMA_IRQHandler+0xb4>)
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	4311      	orrs	r1, r2
 8000e18:	6059      	str	r1, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8000e1a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d000      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000e20:	4798      	blx	r3
}
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000e24:	2402      	movs	r4, #2
 8000e26:	0021      	movs	r1, r4
 8000e28:	4099      	lsls	r1, r3
 8000e2a:	420a      	tst	r2, r1
 8000e2c:	d017      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x76>
 8000e2e:	422c      	tst	r4, r5
 8000e30:	d015      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x76>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e32:	6833      	ldr	r3, [r6, #0]
 8000e34:	069b      	lsls	r3, r3, #26
 8000e36:	d406      	bmi.n	8000e46 <HAL_DMA_IRQHandler+0x5e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e38:	220a      	movs	r2, #10
 8000e3a:	6833      	ldr	r3, [r6, #0]
 8000e3c:	4393      	bics	r3, r2
 8000e3e:	6033      	str	r3, [r6, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000e40:	2325      	movs	r3, #37	@ 0x25
 8000e42:	3a09      	subs	r2, #9
 8000e44:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_DMA_IRQHandler+0xb4>)
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	4311      	orrs	r1, r2
 8000e4c:	6059      	str	r1, [r3, #4]
    __HAL_UNLOCK(hdma);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2324      	movs	r3, #36	@ 0x24
 8000e52:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8000e54:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0e3      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000e5a:	4798      	blx	r3
  return;
 8000e5c:	e7e1      	b.n	8000e22 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000e5e:	2108      	movs	r1, #8
 8000e60:	000c      	movs	r4, r1
 8000e62:	409c      	lsls	r4, r3
 8000e64:	4222      	tst	r2, r4
 8000e66:	d0dc      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x3a>
 8000e68:	4229      	tst	r1, r5
 8000e6a:	d0da      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e6c:	6832      	ldr	r2, [r6, #0]
 8000e6e:	3106      	adds	r1, #6
 8000e70:	438a      	bics	r2, r1
 8000e72:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000e74:	2201      	movs	r2, #1
 8000e76:	0015      	movs	r5, r2
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	002b      	movs	r3, r5
 8000e7c:	4907      	ldr	r1, [pc, #28]	@ (8000e9c <HAL_DMA_IRQHandler+0xb4>)
 8000e7e:	684c      	ldr	r4, [r1, #4]
 8000e80:	4323      	orrs	r3, r4
 8000e82:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000e84:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e86:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000e88:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8000e90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0c5      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000e96:	4798      	blx	r3
  return;
 8000e98:	e7c3      	b.n	8000e22 <HAL_DMA_IRQHandler+0x3a>
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	4645      	mov	r5, r8
 8000ea4:	46de      	mov	lr, fp
 8000ea6:	4657      	mov	r7, sl
 8000ea8:	464e      	mov	r6, r9
 8000eaa:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000eac:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0U;
 8000eae:	2300      	movs	r3, #0
{
 8000eb0:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d07d      	beq.n	8000fb2 <HAL_GPIO_Init+0x112>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000eb6:	4688      	mov	r8, r1
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000eb8:	2401      	movs	r4, #1
 8000eba:	002a      	movs	r2, r5
 8000ebc:	409c      	lsls	r4, r3
 8000ebe:	4022      	ands	r2, r4
 8000ec0:	4694      	mov	ip, r2
    if (iocurrent != 0U)
 8000ec2:	4225      	tst	r5, r4
 8000ec4:	d071      	beq.n	8000faa <HAL_GPIO_Init+0x10a>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	6852      	ldr	r2, [r2, #4]
 8000eca:	2610      	movs	r6, #16
 8000ecc:	0011      	movs	r1, r2
 8000ece:	43b1      	bics	r1, r6
 8000ed0:	4689      	mov	r9, r1
 8000ed2:	2902      	cmp	r1, #2
 8000ed4:	d100      	bne.n	8000ed8 <HAL_GPIO_Init+0x38>
 8000ed6:	e073      	b.n	8000fc0 <HAL_GPIO_Init+0x120>
      tmp = GPIOx->MODER;
 8000ed8:	6801      	ldr	r1, [r0, #0]
 8000eda:	005e      	lsls	r6, r3, #1
 8000edc:	468b      	mov	fp, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ede:	2103      	movs	r1, #3
 8000ee0:	40b1      	lsls	r1, r6
 8000ee2:	468a      	mov	sl, r1
 8000ee4:	43c9      	mvns	r1, r1
 8000ee6:	465f      	mov	r7, fp
 8000ee8:	9101      	str	r1, [sp, #4]
 8000eea:	4651      	mov	r1, sl
 8000eec:	438f      	bics	r7, r1
 8000eee:	46bb      	mov	fp, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef0:	2703      	movs	r7, #3
 8000ef2:	4017      	ands	r7, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	46ba      	mov	sl, r7
 8000ef8:	465f      	mov	r7, fp
 8000efa:	4651      	mov	r1, sl
 8000efc:	430f      	orrs	r7, r1
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efe:	2101      	movs	r1, #1
 8000f00:	4249      	negs	r1, r1
 8000f02:	468a      	mov	sl, r1
 8000f04:	44d1      	add	r9, sl
 8000f06:	4649      	mov	r1, r9
      GPIOx->MODER = tmp;
 8000f08:	6007      	str	r7, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0a:	2901      	cmp	r1, #1
 8000f0c:	d800      	bhi.n	8000f10 <HAL_GPIO_Init+0x70>
 8000f0e:	e083      	b.n	8001018 <HAL_GPIO_Init+0x178>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f10:	2a03      	cmp	r2, #3
 8000f12:	d04a      	beq.n	8000faa <HAL_GPIO_Init+0x10a>
        tmp = GPIOx->PUPDR;
 8000f14:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f16:	9901      	ldr	r1, [sp, #4]
 8000f18:	400c      	ands	r4, r1
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000f1a:	4641      	mov	r1, r8
 8000f1c:	6889      	ldr	r1, [r1, #8]
 8000f1e:	40b1      	lsls	r1, r6
 8000f20:	4321      	orrs	r1, r4
        GPIOx->PUPDR = tmp;
 8000f22:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f24:	2180      	movs	r1, #128	@ 0x80
 8000f26:	0549      	lsls	r1, r1, #21
 8000f28:	420a      	tst	r2, r1
 8000f2a:	d03e      	beq.n	8000faa <HAL_GPIO_Init+0x10a>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000f2c:	2603      	movs	r6, #3
 8000f2e:	270f      	movs	r7, #15
 8000f30:	4c58      	ldr	r4, [pc, #352]	@ (8001094 <HAL_GPIO_Init+0x1f4>)
 8000f32:	401e      	ands	r6, r3
 8000f34:	46a1      	mov	r9, r4
 8000f36:	00f6      	lsls	r6, r6, #3
 8000f38:	40b7      	lsls	r7, r6
        tmp = EXTI->EXTICR[position >> 2U];
 8000f3a:	0899      	lsrs	r1, r3, #2
 8000f3c:	0089      	lsls	r1, r1, #2
 8000f3e:	4449      	add	r1, r9
 8000f40:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000f42:	43bc      	bics	r4, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000f44:	27a0      	movs	r7, #160	@ 0xa0
 8000f46:	05ff      	lsls	r7, r7, #23
 8000f48:	42b8      	cmp	r0, r7
 8000f4a:	d00e      	beq.n	8000f6a <HAL_GPIO_Init+0xca>
 8000f4c:	4f52      	ldr	r7, [pc, #328]	@ (8001098 <HAL_GPIO_Init+0x1f8>)
 8000f4e:	42b8      	cmp	r0, r7
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0xb4>
 8000f52:	e097      	b.n	8001084 <HAL_GPIO_Init+0x1e4>
 8000f54:	4f51      	ldr	r7, [pc, #324]	@ (800109c <HAL_GPIO_Init+0x1fc>)
 8000f56:	42b8      	cmp	r0, r7
 8000f58:	d100      	bne.n	8000f5c <HAL_GPIO_Init+0xbc>
 8000f5a:	e097      	b.n	800108c <HAL_GPIO_Init+0x1ec>
 8000f5c:	4f50      	ldr	r7, [pc, #320]	@ (80010a0 <HAL_GPIO_Init+0x200>)
 8000f5e:	42b8      	cmp	r0, r7
 8000f60:	d100      	bne.n	8000f64 <HAL_GPIO_Init+0xc4>
 8000f62:	e08b      	b.n	800107c <HAL_GPIO_Init+0x1dc>
 8000f64:	2706      	movs	r7, #6
 8000f66:	40b7      	lsls	r7, r6
 8000f68:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8000f6a:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp = EXTI->IMR1;
 8000f6c:	2180      	movs	r1, #128	@ 0x80
 8000f6e:	4c49      	ldr	r4, [pc, #292]	@ (8001094 <HAL_GPIO_Init+0x1f4>)
 8000f70:	5861      	ldr	r1, [r4, r1]
        tmp &= ~((uint32_t)iocurrent);
 8000f72:	4664      	mov	r4, ip
 8000f74:	43e4      	mvns	r4, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f76:	03d6      	lsls	r6, r2, #15
 8000f78:	d464      	bmi.n	8001044 <HAL_GPIO_Init+0x1a4>
        {
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
 8000f7a:	2680      	movs	r6, #128	@ 0x80
 8000f7c:	4f45      	ldr	r7, [pc, #276]	@ (8001094 <HAL_GPIO_Init+0x1f4>)
        tmp &= ~((uint32_t)iocurrent);
 8000f7e:	4021      	ands	r1, r4
        EXTI->IMR1 = tmp;
 8000f80:	51b9      	str	r1, [r7, r6]

        tmp = EXTI->EMR1;
 8000f82:	2184      	movs	r1, #132	@ 0x84
 8000f84:	5879      	ldr	r1, [r7, r1]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f86:	0396      	lsls	r6, r2, #14
 8000f88:	d465      	bmi.n	8001056 <HAL_GPIO_Init+0x1b6>
        {
          tmp |= iocurrent;
        }
        EXTI->EMR1 = tmp;
 8000f8a:	2684      	movs	r6, #132	@ 0x84
 8000f8c:	4f41      	ldr	r7, [pc, #260]	@ (8001094 <HAL_GPIO_Init+0x1f4>)
        tmp &= ~((uint32_t)iocurrent);
 8000f8e:	4021      	ands	r1, r4
        EXTI->EMR1 = tmp;
 8000f90:	51b9      	str	r1, [r7, r6]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f92:	6839      	ldr	r1, [r7, #0]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f94:	02d6      	lsls	r6, r2, #11
 8000f96:	d466      	bmi.n	8001066 <HAL_GPIO_Init+0x1c6>
        {
          tmp |= iocurrent;
        }
        EXTI->RTSR1 = tmp;
 8000f98:	4e3e      	ldr	r6, [pc, #248]	@ (8001094 <HAL_GPIO_Init+0x1f4>)
        tmp &= ~((uint32_t)iocurrent);
 8000f9a:	4021      	ands	r1, r4
        EXTI->RTSR1 = tmp;
 8000f9c:	6031      	str	r1, [r6, #0]

        tmp = EXTI->FTSR1;
 8000f9e:	6871      	ldr	r1, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa0:	0292      	lsls	r2, r2, #10
 8000fa2:	d467      	bmi.n	8001074 <HAL_GPIO_Init+0x1d4>
        tmp &= ~((uint32_t)iocurrent);
 8000fa4:	4021      	ands	r1, r4
        {
          tmp |= iocurrent;
        }
        EXTI->FTSR1 = tmp;
 8000fa6:	4a3b      	ldr	r2, [pc, #236]	@ (8001094 <HAL_GPIO_Init+0x1f4>)
 8000fa8:	6051      	str	r1, [r2, #4]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000faa:	002a      	movs	r2, r5
      }
    }

    position++;
 8000fac:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000fae:	40da      	lsrs	r2, r3
 8000fb0:	d182      	bne.n	8000eb8 <HAL_GPIO_Init+0x18>
  }
}
 8000fb2:	b003      	add	sp, #12
 8000fb4:	bcf0      	pop	{r4, r5, r6, r7}
 8000fb6:	46bb      	mov	fp, r7
 8000fb8:	46b2      	mov	sl, r6
 8000fba:	46a9      	mov	r9, r5
 8000fbc:	46a0      	mov	r8, r4
 8000fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp = GPIOx->AFR[position >> 3U];
 8000fc0:	08de      	lsrs	r6, r3, #3
 8000fc2:	00b6      	lsls	r6, r6, #2
 8000fc4:	1986      	adds	r6, r0, r6
 8000fc6:	6a31      	ldr	r1, [r6, #32]
 8000fc8:	4689      	mov	r9, r1
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000fca:	2107      	movs	r1, #7
 8000fcc:	4019      	ands	r1, r3
 8000fce:	0089      	lsls	r1, r1, #2
 8000fd0:	468a      	mov	sl, r1
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	4657      	mov	r7, sl
 8000fd6:	40b9      	lsls	r1, r7
 8000fd8:	464f      	mov	r7, r9
 8000fda:	438f      	bics	r7, r1
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000fdc:	4641      	mov	r1, r8
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000fde:	46b9      	mov	r9, r7
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000fe0:	270f      	movs	r7, #15
 8000fe2:	6909      	ldr	r1, [r1, #16]
 8000fe4:	4039      	ands	r1, r7
 8000fe6:	4657      	mov	r7, sl
 8000fe8:	40b9      	lsls	r1, r7
 8000fea:	464f      	mov	r7, r9
 8000fec:	4339      	orrs	r1, r7
        GPIOx->AFR[position >> 3U] = tmp;
 8000fee:	6231      	str	r1, [r6, #32]
      tmp = GPIOx->MODER;
 8000ff0:	6801      	ldr	r1, [r0, #0]
 8000ff2:	005e      	lsls	r6, r3, #1
 8000ff4:	468a      	mov	sl, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	40b1      	lsls	r1, r6
 8000ffa:	4689      	mov	r9, r1
 8000ffc:	43c9      	mvns	r1, r1
 8000ffe:	4657      	mov	r7, sl
 8001000:	9101      	str	r1, [sp, #4]
 8001002:	4649      	mov	r1, r9
 8001004:	438f      	bics	r7, r1
 8001006:	46ba      	mov	sl, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001008:	2703      	movs	r7, #3
 800100a:	4017      	ands	r7, r2
 800100c:	40b7      	lsls	r7, r6
 800100e:	46b9      	mov	r9, r7
 8001010:	4657      	mov	r7, sl
 8001012:	4649      	mov	r1, r9
 8001014:	430f      	orrs	r7, r1
      GPIOx->MODER = tmp;
 8001016:	6007      	str	r7, [r0, #0]
        tmp = GPIOx->OSPEEDR;
 8001018:	6887      	ldr	r7, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800101a:	9901      	ldr	r1, [sp, #4]
 800101c:	400f      	ands	r7, r1
 800101e:	46ba      	mov	sl, r7
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001020:	4647      	mov	r7, r8
 8001022:	68ff      	ldr	r7, [r7, #12]
 8001024:	40b7      	lsls	r7, r6
 8001026:	46b9      	mov	r9, r7
 8001028:	4657      	mov	r7, sl
 800102a:	4649      	mov	r1, r9
 800102c:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = tmp;
 800102e:	6087      	str	r7, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001030:	6841      	ldr	r1, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001032:	000f      	movs	r7, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001034:	2101      	movs	r1, #1
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001036:	43a7      	bics	r7, r4
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001038:	0914      	lsrs	r4, r2, #4
 800103a:	400c      	ands	r4, r1
 800103c:	409c      	lsls	r4, r3
 800103e:	433c      	orrs	r4, r7
        GPIOx->OTYPER = tmp;
 8001040:	6044      	str	r4, [r0, #4]
 8001042:	e765      	b.n	8000f10 <HAL_GPIO_Init+0x70>
          tmp |= iocurrent;
 8001044:	4666      	mov	r6, ip
 8001046:	4331      	orrs	r1, r6
        EXTI->IMR1 = tmp;
 8001048:	2680      	movs	r6, #128	@ 0x80
 800104a:	4f12      	ldr	r7, [pc, #72]	@ (8001094 <HAL_GPIO_Init+0x1f4>)
 800104c:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->EMR1;
 800104e:	2184      	movs	r1, #132	@ 0x84
 8001050:	5879      	ldr	r1, [r7, r1]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001052:	0396      	lsls	r6, r2, #14
 8001054:	d599      	bpl.n	8000f8a <HAL_GPIO_Init+0xea>
          tmp |= iocurrent;
 8001056:	4666      	mov	r6, ip
 8001058:	4331      	orrs	r1, r6
        EXTI->EMR1 = tmp;
 800105a:	2684      	movs	r6, #132	@ 0x84
 800105c:	4f0d      	ldr	r7, [pc, #52]	@ (8001094 <HAL_GPIO_Init+0x1f4>)
 800105e:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->RTSR1;
 8001060:	6839      	ldr	r1, [r7, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001062:	02d6      	lsls	r6, r2, #11
 8001064:	d598      	bpl.n	8000f98 <HAL_GPIO_Init+0xf8>
          tmp |= iocurrent;
 8001066:	4666      	mov	r6, ip
 8001068:	4331      	orrs	r1, r6
        EXTI->RTSR1 = tmp;
 800106a:	4e0a      	ldr	r6, [pc, #40]	@ (8001094 <HAL_GPIO_Init+0x1f4>)
 800106c:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 800106e:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001070:	0292      	lsls	r2, r2, #10
 8001072:	d597      	bpl.n	8000fa4 <HAL_GPIO_Init+0x104>
          tmp |= iocurrent;
 8001074:	4662      	mov	r2, ip
 8001076:	430a      	orrs	r2, r1
 8001078:	0011      	movs	r1, r2
 800107a:	e794      	b.n	8000fa6 <HAL_GPIO_Init+0x106>
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800107c:	2705      	movs	r7, #5
 800107e:	40b7      	lsls	r7, r6
 8001080:	433c      	orrs	r4, r7
 8001082:	e772      	b.n	8000f6a <HAL_GPIO_Init+0xca>
 8001084:	2701      	movs	r7, #1
 8001086:	40b7      	lsls	r7, r6
 8001088:	433c      	orrs	r4, r7
 800108a:	e76e      	b.n	8000f6a <HAL_GPIO_Init+0xca>
 800108c:	2702      	movs	r7, #2
 800108e:	40b7      	lsls	r7, r6
 8001090:	433c      	orrs	r4, r7
 8001092:	e76a      	b.n	8000f6a <HAL_GPIO_Init+0xca>
 8001094:	40021800 	.word	0x40021800
 8001098:	50000400 	.word	0x50000400
 800109c:	50000800 	.word	0x50000800
 80010a0:	50001400 	.word	0x50001400

080010a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d001      	beq.n	80010ac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010aa:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ac:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80010ae:	e7fc      	b.n	80010aa <HAL_GPIO_WritePin+0x6>

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b4:	d100      	bne.n	80010b8 <HAL_RCC_OscConfig+0x8>
 80010b6:	e0aa      	b.n	800120e <HAL_RCC_OscConfig+0x15e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b8:	6803      	ldr	r3, [r0, #0]
 80010ba:	07da      	lsls	r2, r3, #31
 80010bc:	d52c      	bpl.n	8001118 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010be:	2238      	movs	r2, #56	@ 0x38
 80010c0:	4d95      	ldr	r5, [pc, #596]	@ (8001318 <HAL_RCC_OscConfig+0x268>)

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80010c2:	6861      	ldr	r1, [r4, #4]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010c4:	68a8      	ldr	r0, [r5, #8]
 80010c6:	4002      	ands	r2, r0
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80010c8:	2a08      	cmp	r2, #8
 80010ca:	d100      	bne.n	80010ce <HAL_RCC_OscConfig+0x1e>
 80010cc:	e09d      	b.n	800120a <HAL_RCC_OscConfig+0x15a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ce:	2380      	movs	r3, #128	@ 0x80
 80010d0:	025b      	lsls	r3, r3, #9
 80010d2:	4299      	cmp	r1, r3
 80010d4:	d100      	bne.n	80010d8 <HAL_RCC_OscConfig+0x28>
 80010d6:	e0ba      	b.n	800124e <HAL_RCC_OscConfig+0x19e>
 80010d8:	22a0      	movs	r2, #160	@ 0xa0
 80010da:	02d2      	lsls	r2, r2, #11
 80010dc:	4291      	cmp	r1, r2
 80010de:	d100      	bne.n	80010e2 <HAL_RCC_OscConfig+0x32>
 80010e0:	e106      	b.n	80012f0 <HAL_RCC_OscConfig+0x240>
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	4a8d      	ldr	r2, [pc, #564]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	602b      	str	r3, [r5, #0]
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	4a8c      	ldr	r2, [pc, #560]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	602b      	str	r3, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f2:	2900      	cmp	r1, #0
 80010f4:	d000      	beq.n	80010f8 <HAL_RCC_OscConfig+0x48>
 80010f6:	e0ad      	b.n	8001254 <HAL_RCC_OscConfig+0x1a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fcae 	bl	8000a58 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010fc:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80010fe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001100:	02bf      	lsls	r7, r7, #10
 8001102:	e005      	b.n	8001110 <HAL_RCC_OscConfig+0x60>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001104:	f7ff fca8 	bl	8000a58 <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	2864      	cmp	r0, #100	@ 0x64
 800110c:	d900      	bls.n	8001110 <HAL_RCC_OscConfig+0x60>
 800110e:	e0c9      	b.n	80012a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	423b      	tst	r3, r7
 8001114:	d1f6      	bne.n	8001104 <HAL_RCC_OscConfig+0x54>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	079a      	lsls	r2, r3, #30
 800111a:	d44b      	bmi.n	80011b4 <HAL_RCC_OscConfig+0x104>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111c:	071a      	lsls	r2, r3, #28
 800111e:	d51d      	bpl.n	800115c <HAL_RCC_OscConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001120:	2238      	movs	r2, #56	@ 0x38
 8001122:	4d7d      	ldr	r5, [pc, #500]	@ (8001318 <HAL_RCC_OscConfig+0x268>)
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001124:	69a1      	ldr	r1, [r4, #24]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001126:	68a8      	ldr	r0, [r5, #8]
 8001128:	4002      	ands	r2, r0
 800112a:	2a18      	cmp	r2, #24
 800112c:	d100      	bne.n	8001130 <HAL_RCC_OscConfig+0x80>
 800112e:	e0a2      	b.n	8001276 <HAL_RCC_OscConfig+0x1c6>
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001130:	2201      	movs	r2, #1
 8001132:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001134:	2900      	cmp	r1, #0
 8001136:	d100      	bne.n	800113a <HAL_RCC_OscConfig+0x8a>
 8001138:	e0c9      	b.n	80012ce <HAL_RCC_OscConfig+0x21e>
        __HAL_RCC_LSI_ENABLE();
 800113a:	4313      	orrs	r3, r2
 800113c:	662b      	str	r3, [r5, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fc8b 	bl	8000a58 <HAL_GetTick>

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001142:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001144:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001146:	e005      	b.n	8001154 <HAL_RCC_OscConfig+0xa4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001148:	f7ff fc86 	bl	8000a58 <HAL_GetTick>
 800114c:	1b80      	subs	r0, r0, r6
 800114e:	2802      	cmp	r0, #2
 8001150:	d900      	bls.n	8001154 <HAL_RCC_OscConfig+0xa4>
 8001152:	e0a7      	b.n	80012a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001154:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001156:	421f      	tst	r7, r3
 8001158:	d0f6      	beq.n	8001148 <HAL_RCC_OscConfig+0x98>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	2204      	movs	r2, #4
 800115e:	421a      	tst	r2, r3
 8001160:	d026      	beq.n	80011b0 <HAL_RCC_OscConfig+0x100>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001162:	2338      	movs	r3, #56	@ 0x38
 8001164:	4d6c      	ldr	r5, [pc, #432]	@ (8001318 <HAL_RCC_OscConfig+0x268>)
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001166:	68a0      	ldr	r0, [r4, #8]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001168:	68a9      	ldr	r1, [r5, #8]
 800116a:	400b      	ands	r3, r1
 800116c:	2b20      	cmp	r3, #32
 800116e:	d100      	bne.n	8001172 <HAL_RCC_OscConfig+0xc2>
 8001170:	e0c7      	b.n	8001302 <HAL_RCC_OscConfig+0x252>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001172:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001174:	2801      	cmp	r0, #1
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0xca>
 8001178:	e081      	b.n	800127e <HAL_RCC_OscConfig+0x1ce>
 800117a:	2805      	cmp	r0, #5
 800117c:	d100      	bne.n	8001180 <HAL_RCC_OscConfig+0xd0>
 800117e:	e0c4      	b.n	800130a <HAL_RCC_OscConfig+0x25a>
 8001180:	2101      	movs	r1, #1
 8001182:	438b      	bics	r3, r1
 8001184:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8001186:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001188:	4393      	bics	r3, r2
 800118a:	65eb      	str	r3, [r5, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800118c:	2800      	cmp	r0, #0
 800118e:	d000      	beq.n	8001192 <HAL_RCC_OscConfig+0xe2>
 8001190:	e077      	b.n	8001282 <HAL_RCC_OscConfig+0x1d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fc61 	bl	8000a58 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001196:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8001198:	0004      	movs	r4, r0
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119a:	4f62      	ldr	r7, [pc, #392]	@ (8001324 <HAL_RCC_OscConfig+0x274>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800119c:	e005      	b.n	80011aa <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119e:	f7ff fc5b 	bl	8000a58 <HAL_GetTick>
 80011a2:	1b00      	subs	r0, r0, r4
 80011a4:	42b8      	cmp	r0, r7
 80011a6:	d900      	bls.n	80011aa <HAL_RCC_OscConfig+0xfa>
 80011a8:	e07c      	b.n	80012a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80011aa:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80011ac:	421e      	tst	r6, r3
 80011ae:	d1f6      	bne.n	800119e <HAL_RCC_OscConfig+0xee>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
 80011b0:	2000      	movs	r0, #0
 80011b2:	e02d      	b.n	8001210 <HAL_RCC_OscConfig+0x160>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b4:	2238      	movs	r2, #56	@ 0x38
 80011b6:	4d58      	ldr	r5, [pc, #352]	@ (8001318 <HAL_RCC_OscConfig+0x268>)
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80011b8:	68e1      	ldr	r1, [r4, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ba:	68ab      	ldr	r3, [r5, #8]
    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80011bc:	421a      	tst	r2, r3
 80011be:	d028      	beq.n	8001212 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011c0:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d100      	bne.n	80011c8 <HAL_RCC_OscConfig+0x118>
 80011c6:	e06f      	b.n	80012a8 <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011c8:	4a57      	ldr	r2, [pc, #348]	@ (8001328 <HAL_RCC_OscConfig+0x278>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ca:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011cc:	4013      	ands	r3, r2
 80011ce:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d0:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011d2:	4313      	orrs	r3, r2
 80011d4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	682a      	ldr	r2, [r5, #0]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4313      	orrs	r3, r2
 80011de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc3a 	bl	8000a58 <HAL_GetTick>
 80011e4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e6:	e004      	b.n	80011f2 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011e8:	f7ff fc36 	bl	8000a58 <HAL_GetTick>
 80011ec:	1b80      	subs	r0, r0, r6
 80011ee:	2802      	cmp	r0, #2
 80011f0:	d858      	bhi.n	80012a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	423b      	tst	r3, r7
 80011f6:	d0f7      	beq.n	80011e8 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	686a      	ldr	r2, [r5, #4]
 80011fa:	6963      	ldr	r3, [r4, #20]
 80011fc:	494b      	ldr	r1, [pc, #300]	@ (800132c <HAL_RCC_OscConfig+0x27c>)
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	400a      	ands	r2, r1
 8001202:	4313      	orrs	r3, r2
 8001204:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	e788      	b.n	800111c <HAL_RCC_OscConfig+0x6c>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800120a:	2900      	cmp	r1, #0
 800120c:	d184      	bne.n	8001118 <HAL_RCC_OscConfig+0x68>
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
}
 8001210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001212:	2900      	cmp	r1, #0
 8001214:	d0fb      	beq.n	800120e <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	686a      	ldr	r2, [r5, #4]
 8001218:	6963      	ldr	r3, [r4, #20]
 800121a:	4944      	ldr	r1, [pc, #272]	@ (800132c <HAL_RCC_OscConfig+0x27c>)
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	400a      	ands	r2, r1
 8001220:	4313      	orrs	r3, r2
 8001222:	606b      	str	r3, [r5, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	4a40      	ldr	r2, [pc, #256]	@ (8001328 <HAL_RCC_OscConfig+0x278>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001228:	4941      	ldr	r1, [pc, #260]	@ (8001330 <HAL_RCC_OscConfig+0x280>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800122a:	4013      	ands	r3, r2
 800122c:	6922      	ldr	r2, [r4, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001232:	682b      	ldr	r3, [r5, #0]
 8001234:	4a3f      	ldr	r2, [pc, #252]	@ (8001334 <HAL_RCC_OscConfig+0x284>)
 8001236:	049b      	lsls	r3, r3, #18
 8001238:	0f5b      	lsrs	r3, r3, #29
 800123a:	40da      	lsrs	r2, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800123c:	4b3e      	ldr	r3, [pc, #248]	@ (8001338 <HAL_RCC_OscConfig+0x288>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800123e:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	f7ff fbcb 	bl	80009dc <HAL_InitTick>
 8001246:	2800      	cmp	r0, #0
 8001248:	d1e1      	bne.n	800120e <HAL_RCC_OscConfig+0x15e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	e766      	b.n	800111c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	682b      	ldr	r3, [r5, #0]
 8001250:	430b      	orrs	r3, r1
 8001252:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001254:	f7ff fc00 	bl	8000a58 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001258:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 800125a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800125c:	4f2e      	ldr	r7, [pc, #184]	@ (8001318 <HAL_RCC_OscConfig+0x268>)
 800125e:	02b6      	lsls	r6, r6, #10
 8001260:	e004      	b.n	800126c <HAL_RCC_OscConfig+0x1bc>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001262:	f7ff fbf9 	bl	8000a58 <HAL_GetTick>
 8001266:	1b40      	subs	r0, r0, r5
 8001268:	2864      	cmp	r0, #100	@ 0x64
 800126a:	d81b      	bhi.n	80012a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4233      	tst	r3, r6
 8001270:	d0f7      	beq.n	8001262 <HAL_RCC_OscConfig+0x1b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	e750      	b.n	8001118 <HAL_RCC_OscConfig+0x68>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001276:	2900      	cmp	r1, #0
 8001278:	d000      	beq.n	800127c <HAL_RCC_OscConfig+0x1cc>
 800127a:	e76f      	b.n	800115c <HAL_RCC_OscConfig+0xac>
 800127c:	e7c7      	b.n	800120e <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127e:	4303      	orrs	r3, r0
 8001280:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8001282:	f7ff fbe9 	bl	8000a58 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001286:	2502      	movs	r5, #2
        tickstart = HAL_GetTick();
 8001288:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800128a:	4e23      	ldr	r6, [pc, #140]	@ (8001318 <HAL_RCC_OscConfig+0x268>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	4f25      	ldr	r7, [pc, #148]	@ (8001324 <HAL_RCC_OscConfig+0x274>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800128e:	e004      	b.n	800129a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001290:	f7ff fbe2 	bl	8000a58 <HAL_GetTick>
 8001294:	1b00      	subs	r0, r0, r4
 8001296:	42b8      	cmp	r0, r7
 8001298:	d804      	bhi.n	80012a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800129a:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 800129c:	421d      	tst	r5, r3
 800129e:	d0f7      	beq.n	8001290 <HAL_RCC_OscConfig+0x1e0>
  return HAL_OK;
 80012a0:	2000      	movs	r0, #0
 80012a2:	e7b5      	b.n	8001210 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 80012a4:	2003      	movs	r0, #3
 80012a6:	e7b3      	b.n	8001210 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 80012a8:	4a24      	ldr	r2, [pc, #144]	@ (800133c <HAL_RCC_OscConfig+0x28c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012aa:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80012ac:	4013      	ands	r3, r2
 80012ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012b0:	f7ff fbd2 	bl	8000a58 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b4:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80012b6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b8:	e004      	b.n	80012c4 <HAL_RCC_OscConfig+0x214>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fbcd 	bl	8000a58 <HAL_GetTick>
 80012be:	1b80      	subs	r0, r0, r6
 80012c0:	2802      	cmp	r0, #2
 80012c2:	d8ef      	bhi.n	80012a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	423b      	tst	r3, r7
 80012c8:	d1f7      	bne.n	80012ba <HAL_RCC_OscConfig+0x20a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	e726      	b.n	800111c <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_LSI_DISABLE();
 80012ce:	4393      	bics	r3, r2
 80012d0:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80012d2:	f7ff fbc1 	bl	8000a58 <HAL_GetTick>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80012d6:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80012d8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80012da:	e004      	b.n	80012e6 <HAL_RCC_OscConfig+0x236>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80012dc:	f7ff fbbc 	bl	8000a58 <HAL_GetTick>
 80012e0:	1b80      	subs	r0, r0, r6
 80012e2:	2802      	cmp	r0, #2
 80012e4:	d8de      	bhi.n	80012a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80012e6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80012e8:	421f      	tst	r7, r3
 80012ea:	d1f7      	bne.n	80012dc <HAL_RCC_OscConfig+0x22c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	e735      	b.n	800115c <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	2280      	movs	r2, #128	@ 0x80
 80012f2:	6829      	ldr	r1, [r5, #0]
 80012f4:	02d2      	lsls	r2, r2, #11
 80012f6:	430a      	orrs	r2, r1
 80012f8:	602a      	str	r2, [r5, #0]
 80012fa:	682a      	ldr	r2, [r5, #0]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001300:	e7a8      	b.n	8001254 <HAL_RCC_OscConfig+0x1a4>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001302:	4243      	negs	r3, r0
 8001304:	4158      	adcs	r0, r3
 8001306:	b2c0      	uxtb	r0, r0
 8001308:	e782      	b.n	8001210 <HAL_RCC_OscConfig+0x160>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130a:	4313      	orrs	r3, r2
 800130c:	2201      	movs	r2, #1
 800130e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8001310:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001312:	4313      	orrs	r3, r2
 8001314:	65eb      	str	r3, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001316:	e7b4      	b.n	8001282 <HAL_RCC_OscConfig+0x1d2>
 8001318:	40021000 	.word	0x40021000
 800131c:	fffeffff 	.word	0xfffeffff
 8001320:	fffbffff 	.word	0xfffbffff
 8001324:	00001388 	.word	0x00001388
 8001328:	ffffc7ff 	.word	0xffffc7ff
 800132c:	ffff80ff 	.word	0xffff80ff
 8001330:	20000000 	.word	0x20000000
 8001334:	02dc6c00 	.word	0x02dc6c00
 8001338:	20000008 	.word	0x20000008
 800133c:	fffffeff 	.word	0xfffffeff

08001340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	46ce      	mov	lr, r9
 8001344:	4647      	mov	r7, r8
 8001346:	0005      	movs	r5, r0
 8001348:	000c      	movs	r4, r1
 800134a:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800134c:	2800      	cmp	r0, #0
 800134e:	d100      	bne.n	8001352 <HAL_RCC_ClockConfig+0x12>
 8001350:	e083      	b.n	800145a <HAL_RCC_ClockConfig+0x11a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001352:	2207      	movs	r2, #7
 8001354:	4e67      	ldr	r6, [pc, #412]	@ (80014f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001356:	6833      	ldr	r3, [r6, #0]
 8001358:	4013      	ands	r3, r2
 800135a:	428b      	cmp	r3, r1
 800135c:	d200      	bcs.n	8001360 <HAL_RCC_ClockConfig+0x20>
 800135e:	e081      	b.n	8001464 <HAL_RCC_ClockConfig+0x124>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	079a      	lsls	r2, r3, #30
 8001364:	d510      	bpl.n	8001388 <HAL_RCC_ClockConfig+0x48>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001366:	075a      	lsls	r2, r3, #29
 8001368:	d507      	bpl.n	800137a <HAL_RCC_ClockConfig+0x3a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800136a:	4863      	ldr	r0, [pc, #396]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 800136c:	4a63      	ldr	r2, [pc, #396]	@ (80014fc <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	6881      	ldr	r1, [r0, #8]
 8001370:	4011      	ands	r1, r2
 8001372:	22b0      	movs	r2, #176	@ 0xb0
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	430a      	orrs	r2, r1
 8001378:	6082      	str	r2, [r0, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800137a:	495f      	ldr	r1, [pc, #380]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 800137c:	4860      	ldr	r0, [pc, #384]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 800137e:	688a      	ldr	r2, [r1, #8]
 8001380:	4002      	ands	r2, r0
 8001382:	68e8      	ldr	r0, [r5, #12]
 8001384:	4302      	orrs	r2, r0
 8001386:	608a      	str	r2, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001388:	07db      	lsls	r3, r3, #31
 800138a:	d529      	bpl.n	80013e0 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800138c:	211c      	movs	r1, #28
 800138e:	4a5a      	ldr	r2, [pc, #360]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001390:	6813      	ldr	r3, [r2, #0]
 8001392:	438b      	bics	r3, r1
 8001394:	68a9      	ldr	r1, [r5, #8]
 8001396:	430b      	orrs	r3, r1
 8001398:	6013      	str	r3, [r2, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800139a:	6869      	ldr	r1, [r5, #4]
 800139c:	2901      	cmp	r1, #1
 800139e:	d059      	beq.n	8001454 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013a0:	2900      	cmp	r1, #0
 80013a2:	d000      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x66>
 80013a4:	e07c      	b.n	80014a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a6:	6813      	ldr	r3, [r2, #0]
 80013a8:	055b      	lsls	r3, r3, #21
 80013aa:	d556      	bpl.n	800145a <HAL_RCC_ClockConfig+0x11a>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013ac:	2207      	movs	r2, #7
 80013ae:	4e52      	ldr	r6, [pc, #328]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 80013b0:	68b3      	ldr	r3, [r6, #8]
 80013b2:	4393      	bics	r3, r2
 80013b4:	430b      	orrs	r3, r1
 80013b6:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013b8:	f7ff fb4e 	bl	8000a58 <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013bc:	2338      	movs	r3, #56	@ 0x38
 80013be:	4698      	mov	r8, r3
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013c0:	4b50      	ldr	r3, [pc, #320]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 80013c2:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013c4:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c6:	e004      	b.n	80013d2 <HAL_RCC_ClockConfig+0x92>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013c8:	f7ff fb46 	bl	8000a58 <HAL_GetTick>
 80013cc:	1bc0      	subs	r0, r0, r7
 80013ce:	4548      	cmp	r0, r9
 80013d0:	d85e      	bhi.n	8001490 <HAL_RCC_ClockConfig+0x150>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d2:	4643      	mov	r3, r8
 80013d4:	68b2      	ldr	r2, [r6, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	686b      	ldr	r3, [r5, #4]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1f3      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x88>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e0:	2207      	movs	r2, #7
 80013e2:	4e44      	ldr	r6, [pc, #272]	@ (80014f4 <HAL_RCC_ClockConfig+0x1b4>)
 80013e4:	6833      	ldr	r3, [r6, #0]
 80013e6:	4013      	ands	r3, r2
 80013e8:	42a3      	cmp	r3, r4
 80013ea:	d860      	bhi.n	80014ae <HAL_RCC_ClockConfig+0x16e>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	075b      	lsls	r3, r3, #29
 80013f0:	d506      	bpl.n	8001400 <HAL_RCC_ClockConfig+0xc0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013f2:	4a41      	ldr	r2, [pc, #260]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	4944      	ldr	r1, [pc, #272]	@ (8001508 <HAL_RCC_ClockConfig+0x1c8>)
 80013f6:	6893      	ldr	r3, [r2, #8]
 80013f8:	400b      	ands	r3, r1
 80013fa:	6929      	ldr	r1, [r5, #16]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	6093      	str	r3, [r2, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001400:	2338      	movs	r3, #56	@ 0x38
 8001402:	4a3d      	ldr	r2, [pc, #244]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001404:	6891      	ldr	r1, [r2, #8]
 8001406:	420b      	tst	r3, r1
 8001408:	d044      	beq.n	8001494 <HAL_RCC_ClockConfig+0x154>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800140a:	6891      	ldr	r1, [r2, #8]
 800140c:	4019      	ands	r1, r3
 800140e:	2908      	cmp	r1, #8
 8001410:	d065      	beq.n	80014de <HAL_RCC_ClockConfig+0x19e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001412:	6891      	ldr	r1, [r2, #8]
 8001414:	4019      	ands	r1, r3
 8001416:	2920      	cmp	r1, #32
 8001418:	d068      	beq.n	80014ec <HAL_RCC_ClockConfig+0x1ac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800141a:	6892      	ldr	r2, [r2, #8]
 800141c:	4013      	ands	r3, r2
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800141e:	3b18      	subs	r3, #24
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	4193      	sbcs	r3, r2
 8001424:	4a39      	ldr	r2, [pc, #228]	@ (800150c <HAL_RCC_ClockConfig+0x1cc>)
 8001426:	425b      	negs	r3, r3
 8001428:	4013      	ands	r3, r2
 800142a:	22fa      	movs	r2, #250	@ 0xfa
 800142c:	01d2      	lsls	r2, r2, #7
 800142e:	4694      	mov	ip, r2
 8001430:	4463      	add	r3, ip
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001432:	4a31      	ldr	r2, [pc, #196]	@ (80014f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001434:	4936      	ldr	r1, [pc, #216]	@ (8001510 <HAL_RCC_ClockConfig+0x1d0>)
 8001436:	6892      	ldr	r2, [r2, #8]
 8001438:	4836      	ldr	r0, [pc, #216]	@ (8001514 <HAL_RCC_ClockConfig+0x1d4>)
 800143a:	0512      	lsls	r2, r2, #20
 800143c:	0f12      	lsrs	r2, r2, #28
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	5852      	ldr	r2, [r2, r1]
 8001442:	211f      	movs	r1, #31
 8001444:	400a      	ands	r2, r1
 8001446:	40d3      	lsrs	r3, r2
 8001448:	6003      	str	r3, [r0, #0]
  return HAL_InitTick(uwTickPrio);
 800144a:	4b33      	ldr	r3, [pc, #204]	@ (8001518 <HAL_RCC_ClockConfig+0x1d8>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f7ff fac5 	bl	80009dc <HAL_InitTick>
 8001452:	e003      	b.n	800145c <HAL_RCC_ClockConfig+0x11c>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001454:	6813      	ldr	r3, [r2, #0]
 8001456:	039b      	lsls	r3, r3, #14
 8001458:	d4a8      	bmi.n	80013ac <HAL_RCC_ClockConfig+0x6c>
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
}
 800145c:	bcc0      	pop	{r6, r7}
 800145e:	46b9      	mov	r9, r7
 8001460:	46b0      	mov	r8, r6
 8001462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001464:	6833      	ldr	r3, [r6, #0]
 8001466:	4393      	bics	r3, r2
 8001468:	430b      	orrs	r3, r1
 800146a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800146c:	f7ff faf4 	bl	8000a58 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001470:	2307      	movs	r3, #7
 8001472:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001474:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8001476:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001478:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800147a:	4642      	mov	r2, r8
 800147c:	6833      	ldr	r3, [r6, #0]
 800147e:	4013      	ands	r3, r2
 8001480:	42a3      	cmp	r3, r4
 8001482:	d100      	bne.n	8001486 <HAL_RCC_ClockConfig+0x146>
 8001484:	e76c      	b.n	8001360 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001486:	f7ff fae7 	bl	8000a58 <HAL_GetTick>
 800148a:	1bc0      	subs	r0, r0, r7
 800148c:	4548      	cmp	r0, r9
 800148e:	d9f4      	bls.n	800147a <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8001490:	2003      	movs	r0, #3
 8001492:	e7e3      	b.n	800145c <HAL_RCC_ClockConfig+0x11c>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001494:	6812      	ldr	r2, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <HAL_RCC_ClockConfig+0x1dc>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001498:	0492      	lsls	r2, r2, #18
 800149a:	0f52      	lsrs	r2, r2, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800149c:	40d3      	lsrs	r3, r2
 800149e:	e7c8      	b.n	8001432 <HAL_RCC_ClockConfig+0xf2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80014a0:	2903      	cmp	r1, #3
 80014a2:	d01e      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x1a2>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014a4:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80014a6:	079b      	lsls	r3, r3, #30
 80014a8:	d500      	bpl.n	80014ac <HAL_RCC_ClockConfig+0x16c>
 80014aa:	e77f      	b.n	80013ac <HAL_RCC_ClockConfig+0x6c>
 80014ac:	e7d5      	b.n	800145a <HAL_RCC_ClockConfig+0x11a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	6833      	ldr	r3, [r6, #0]
 80014b0:	4393      	bics	r3, r2
 80014b2:	4323      	orrs	r3, r4
 80014b4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80014b6:	f7ff facf 	bl	8000a58 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014ba:	2307      	movs	r3, #7
 80014bc:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 80014c0:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014c2:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014c4:	4642      	mov	r2, r8
 80014c6:	6833      	ldr	r3, [r6, #0]
 80014c8:	4013      	ands	r3, r2
 80014ca:	42a3      	cmp	r3, r4
 80014cc:	d100      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x190>
 80014ce:	e78d      	b.n	80013ec <HAL_RCC_ClockConfig+0xac>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014d0:	f7ff fac2 	bl	8000a58 <HAL_GetTick>
 80014d4:	1bc0      	subs	r0, r0, r7
 80014d6:	4548      	cmp	r0, r9
 80014d8:	d9f4      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x184>
        return HAL_TIMEOUT;
 80014da:	2003      	movs	r0, #3
 80014dc:	e7be      	b.n	800145c <HAL_RCC_ClockConfig+0x11c>
    sysclockfreq = HSE_VALUE;
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <HAL_RCC_ClockConfig+0x1e0>)
 80014e0:	e7a7      	b.n	8001432 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014e2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80014e4:	079b      	lsls	r3, r3, #30
 80014e6:	d500      	bpl.n	80014ea <HAL_RCC_ClockConfig+0x1aa>
 80014e8:	e760      	b.n	80013ac <HAL_RCC_ClockConfig+0x6c>
 80014ea:	e7b6      	b.n	800145a <HAL_RCC_ClockConfig+0x11a>
    sysclockfreq = LSE_VALUE;
 80014ec:	2380      	movs	r3, #128	@ 0x80
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	e79f      	b.n	8001432 <HAL_RCC_ClockConfig+0xf2>
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	40022000 	.word	0x40022000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	ffff84ff 	.word	0xffff84ff
 8001500:	fffff0ff 	.word	0xfffff0ff
 8001504:	00001388 	.word	0x00001388
 8001508:	ffff8fff 	.word	0xffff8fff
 800150c:	ffff8300 	.word	0xffff8300
 8001510:	08002b30 	.word	0x08002b30
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	02dc6c00 	.word	0x02dc6c00
 8001520:	007a1200 	.word	0x007a1200

08001524 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001524:	2038      	movs	r0, #56	@ 0x38
 8001526:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	4210      	tst	r0, r2
 800152c:	d105      	bne.n	800153a <HAL_RCC_GetSysClockFreq+0x16>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800152e:	681b      	ldr	r3, [r3, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001530:	4810      	ldr	r0, [pc, #64]	@ (8001574 <HAL_RCC_GetSysClockFreq+0x50>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001532:	049b      	lsls	r3, r3, #18
 8001534:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001536:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001538:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4002      	ands	r2, r0
 800153e:	2a08      	cmp	r2, #8
 8001540:	d010      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x40>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	4002      	ands	r2, r0
 8001546:	2a20      	cmp	r2, #32
 8001548:	d00e      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 800154e:	3818      	subs	r0, #24
 8001550:	1e43      	subs	r3, r0, #1
 8001552:	4198      	sbcs	r0, r3
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x54>)
 8001556:	4240      	negs	r0, r0
 8001558:	4018      	ands	r0, r3
 800155a:	23fa      	movs	r3, #250	@ 0xfa
 800155c:	01db      	lsls	r3, r3, #7
 800155e:	469c      	mov	ip, r3
 8001560:	4460      	add	r0, ip
 8001562:	e7e9      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = HSE_VALUE;
 8001564:	4805      	ldr	r0, [pc, #20]	@ (800157c <HAL_RCC_GetSysClockFreq+0x58>)
 8001566:	e7e7      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = LSE_VALUE;
 8001568:	2080      	movs	r0, #128	@ 0x80
 800156a:	0200      	lsls	r0, r0, #8
 800156c:	e7e4      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x14>
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	40021000 	.word	0x40021000
 8001574:	02dc6c00 	.word	0x02dc6c00
 8001578:	ffff8300 	.word	0xffff8300
 800157c:	007a1200 	.word	0x007a1200

08001580 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001582:	4907      	ldr	r1, [pc, #28]	@ (80015a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001584:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001586:	4a07      	ldr	r2, [pc, #28]	@ (80015a4 <HAL_RCC_GetPCLK1Freq+0x24>)
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001588:	045b      	lsls	r3, r3, #17
 800158a:	0f5b      	lsrs	r3, r3, #29
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	585b      	ldr	r3, [r3, r1]
 8001590:	211f      	movs	r1, #31
 8001592:	6810      	ldr	r0, [r2, #0]
 8001594:	400b      	ands	r3, r1
 8001596:	40d8      	lsrs	r0, r3
}
 8001598:	4770      	bx	lr
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	40021000 	.word	0x40021000
 80015a0:	08002b10 	.word	0x08002b10
 80015a4:	20000000 	.word	0x20000000

080015a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	46ce      	mov	lr, r9
 80015ac:	4647      	mov	r7, r8
 80015ae:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80015b0:	6803      	ldr	r3, [r0, #0]
{
 80015b2:	0004      	movs	r4, r0
 80015b4:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80015b6:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80015b8:	039a      	lsls	r2, r3, #14
 80015ba:	d53c      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x8e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015bc:	2180      	movs	r1, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2500      	movs	r5, #0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c0:	4a3f      	ldr	r2, [pc, #252]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80015c2:	0549      	lsls	r1, r1, #21
 80015c4:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	46a8      	mov	r8, r5
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c8:	4208      	tst	r0, r1
 80015ca:	d066      	beq.n	800169a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      pwrclkchanged = SET;
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80015cc:	4d3c      	ldr	r5, [pc, #240]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80015ce:	22c0      	movs	r2, #192	@ 0xc0
 80015d0:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	000e      	movs	r6, r1

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80015d6:	69a0      	ldr	r0, [r4, #24]
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80015d8:	4016      	ands	r6, r2
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80015da:	4211      	tst	r1, r2
 80015dc:	d021      	beq.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80015de:	4286      	cmp	r6, r0
 80015e0:	d01f      	beq.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015e2:	2680      	movs	r6, #128	@ 0x80
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80015e4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_FORCE();
 80015e6:	6def      	ldr	r7, [r5, #92]	@ 0x5c
 80015e8:	0276      	lsls	r6, r6, #9
 80015ea:	433e      	orrs	r6, r7
 80015ec:	65ee      	str	r6, [r5, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015ee:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80015f0:	4934      	ldr	r1, [pc, #208]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015f2:	4f35      	ldr	r7, [pc, #212]	@ (80016c8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80015f4:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015f6:	403e      	ands	r6, r7
 80015f8:	65ee      	str	r6, [r5, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80015fa:	65e9      	str	r1, [r5, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80015fc:	07d2      	lsls	r2, r2, #31
 80015fe:	d510      	bpl.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff fa2a 	bl	8000a58 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
      tickstart = HAL_GetTick();
 8001606:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001608:	2702      	movs	r7, #2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	4699      	mov	r9, r3
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800160c:	e004      	b.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x70>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff fa23 	bl	8000a58 <HAL_GetTick>
 8001612:	1b80      	subs	r0, r0, r6
 8001614:	4548      	cmp	r0, r9
 8001616:	d850      	bhi.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x112>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001618:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800161a:	421f      	tst	r7, r3
 800161c:	d0f7      	beq.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800161e:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001620:	69a0      	ldr	r0, [r4, #24]
 8001622:	4927      	ldr	r1, [pc, #156]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001624:	4d27      	ldr	r5, [pc, #156]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001626:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8001628:	402a      	ands	r2, r5
 800162a:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800162c:	2000      	movs	r0, #0
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800162e:	65ca      	str	r2, [r1, #92]	@ 0x5c
    if (pwrclkchanged == SET)
 8001630:	4642      	mov	r2, r8
 8001632:	2a01      	cmp	r2, #1
 8001634:	d03b      	beq.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x106>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001636:	07da      	lsls	r2, r3, #31
 8001638:	d506      	bpl.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800163a:	2503      	movs	r5, #3
 800163c:	4920      	ldr	r1, [pc, #128]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800163e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001640:	43aa      	bics	r2, r5
 8001642:	68a5      	ldr	r5, [r4, #8]
 8001644:	432a      	orrs	r2, r5
 8001646:	654a      	str	r2, [r1, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001648:	065a      	lsls	r2, r3, #25
 800164a:	d506      	bpl.n	800165a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800164c:	491c      	ldr	r1, [pc, #112]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800164e:	4d20      	ldr	r5, [pc, #128]	@ (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001650:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001652:	402a      	ands	r2, r5
 8001654:	68e5      	ldr	r5, [r4, #12]
 8001656:	432a      	orrs	r2, r5
 8001658:	654a      	str	r2, [r1, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800165a:	045a      	lsls	r2, r3, #17
 800165c:	d506      	bpl.n	800166c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800165e:	4918      	ldr	r1, [pc, #96]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001660:	6965      	ldr	r5, [r4, #20]
 8001662:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	0892      	lsrs	r2, r2, #2
 8001668:	432a      	orrs	r2, r5
 800166a:	654a      	str	r2, [r1, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800166c:	051a      	lsls	r2, r3, #20
 800166e:	d506      	bpl.n	800167e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001670:	4913      	ldr	r1, [pc, #76]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001672:	4d18      	ldr	r5, [pc, #96]	@ (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001674:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001676:	402a      	ands	r2, r5
 8001678:	6925      	ldr	r5, [r4, #16]
 800167a:	432a      	orrs	r2, r5
 800167c:	654a      	str	r2, [r1, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800167e:	2b00      	cmp	r3, #0
 8001680:	da06      	bge.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001682:	21e0      	movs	r1, #224	@ 0xe0
 8001684:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001686:	6813      	ldr	r3, [r2, #0]
 8001688:	438b      	bics	r3, r1
 800168a:	6861      	ldr	r1, [r4, #4]
 800168c:	430b      	orrs	r3, r1
 800168e:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8001690:	b003      	add	sp, #12
 8001692:	bcc0      	pop	{r6, r7}
 8001694:	46b9      	mov	r9, r7
 8001696:	46b0      	mov	r8, r6
 8001698:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
 800169c:	4308      	orrs	r0, r1
 800169e:	63d0      	str	r0, [r2, #60]	@ 0x3c
 80016a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016a2:	400a      	ands	r2, r1
 80016a4:	9201      	str	r2, [sp, #4]
 80016a6:	9a01      	ldr	r2, [sp, #4]
      pwrclkchanged = SET;
 80016a8:	2201      	movs	r2, #1
 80016aa:	4690      	mov	r8, r2
 80016ac:	e78e      	b.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ae:	4904      	ldr	r1, [pc, #16]	@ (80016c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80016b0:	4d09      	ldr	r5, [pc, #36]	@ (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80016b2:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80016b4:	402a      	ands	r2, r5
 80016b6:	63ca      	str	r2, [r1, #60]	@ 0x3c
 80016b8:	e7bd      	b.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016ba:	2003      	movs	r0, #3
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	e7b7      	b.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	fffffcff 	.word	0xfffffcff
 80016c8:	fffeffff 	.word	0xfffeffff
 80016cc:	00001388 	.word	0x00001388
 80016d0:	ffffcfff 	.word	0xffffcfff
 80016d4:	ffff3fff 	.word	0xffff3fff
 80016d8:	efffffff 	.word	0xefffffff

080016dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016e0:	d05c      	beq.n	800179c <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016e2:	233d      	movs	r3, #61	@ 0x3d
 80016e4:	5cc3      	ldrb	r3, [r0, r3]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d049      	beq.n	8001780 <HAL_TIM_Base_Init+0xa4>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ec:	233d      	movs	r3, #61	@ 0x3d
 80016ee:	2202      	movs	r2, #2
 80016f0:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016f2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016f4:	4e30      	ldr	r6, [pc, #192]	@ (80017b8 <HAL_TIM_Base_Init+0xdc>)
  tmpcr1 = TIMx->CR1;
 80016f6:	6813      	ldr	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016f8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016fa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016fc:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016fe:	42b2      	cmp	r2, r6
 8001700:	d012      	beq.n	8001728 <HAL_TIM_Base_Init+0x4c>
 8001702:	4e2e      	ldr	r6, [pc, #184]	@ (80017bc <HAL_TIM_Base_Init+0xe0>)
 8001704:	42b2      	cmp	r2, r6
 8001706:	d040      	beq.n	800178a <HAL_TIM_Base_Init+0xae>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001708:	4e2d      	ldr	r6, [pc, #180]	@ (80017c0 <HAL_TIM_Base_Init+0xe4>)
 800170a:	42b2      	cmp	r2, r6
 800170c:	d041      	beq.n	8001792 <HAL_TIM_Base_Init+0xb6>
 800170e:	4e2d      	ldr	r6, [pc, #180]	@ (80017c4 <HAL_TIM_Base_Init+0xe8>)
 8001710:	42b2      	cmp	r2, r6
 8001712:	d00d      	beq.n	8001730 <HAL_TIM_Base_Init+0x54>
 8001714:	4e2c      	ldr	r6, [pc, #176]	@ (80017c8 <HAL_TIM_Base_Init+0xec>)
 8001716:	42b2      	cmp	r2, r6
 8001718:	d042      	beq.n	80017a0 <HAL_TIM_Base_Init+0xc4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800171a:	2680      	movs	r6, #128	@ 0x80
 800171c:	43b3      	bics	r3, r6
 800171e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001720:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001722:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001724:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001726:	e00f      	b.n	8001748 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001728:	2670      	movs	r6, #112	@ 0x70
 800172a:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 800172c:	68a6      	ldr	r6, [r4, #8]
 800172e:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001730:	4e26      	ldr	r6, [pc, #152]	@ (80017cc <HAL_TIM_Base_Init+0xf0>)
 8001732:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001734:	6926      	ldr	r6, [r4, #16]
 8001736:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001738:	2680      	movs	r6, #128	@ 0x80
 800173a:	43b3      	bics	r3, r6
 800173c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800173e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001740:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001742:	6291      	str	r1, [r2, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001744:	6963      	ldr	r3, [r4, #20]
 8001746:	6313      	str	r3, [r2, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001748:	2301      	movs	r3, #1
 800174a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800174c:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800174e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001750:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001752:	3a0a      	subs	r2, #10
 8001754:	54a3      	strb	r3, [r4, r2]
 8001756:	3201      	adds	r2, #1
 8001758:	54a3      	strb	r3, [r4, r2]
 800175a:	3201      	adds	r2, #1
 800175c:	54a3      	strb	r3, [r4, r2]
 800175e:	3201      	adds	r2, #1
 8001760:	54a3      	strb	r3, [r4, r2]
 8001762:	3201      	adds	r2, #1
 8001764:	54a3      	strb	r3, [r4, r2]
 8001766:	3201      	adds	r2, #1
 8001768:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800176a:	3201      	adds	r2, #1
 800176c:	54a3      	strb	r3, [r4, r2]
 800176e:	3201      	adds	r2, #1
 8001770:	54a3      	strb	r3, [r4, r2]
 8001772:	3201      	adds	r2, #1
 8001774:	54a3      	strb	r3, [r4, r2]
 8001776:	3201      	adds	r2, #1
 8001778:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800177a:	3a0a      	subs	r2, #10
 800177c:	54a3      	strb	r3, [r4, r2]
}
 800177e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001780:	333c      	adds	r3, #60	@ 0x3c
 8001782:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001784:	f7fe ffe0 	bl	8000748 <HAL_TIM_Base_MspInit>
 8001788:	e7b0      	b.n	80016ec <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800178a:	2670      	movs	r6, #112	@ 0x70
 800178c:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 800178e:	68a6      	ldr	r6, [r4, #8]
 8001790:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001792:	4e0e      	ldr	r6, [pc, #56]	@ (80017cc <HAL_TIM_Base_Init+0xf0>)
 8001794:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001796:	6926      	ldr	r6, [r4, #16]
 8001798:	4333      	orrs	r3, r6
 800179a:	e7be      	b.n	800171a <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 800179c:	2001      	movs	r0, #1
 800179e:	e7ee      	b.n	800177e <HAL_TIM_Base_Init+0xa2>
    tmpcr1 &= ~TIM_CR1_CKD;
 80017a0:	4e0a      	ldr	r6, [pc, #40]	@ (80017cc <HAL_TIM_Base_Init+0xf0>)
 80017a2:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017a4:	6926      	ldr	r6, [r4, #16]
 80017a6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017a8:	2680      	movs	r6, #128	@ 0x80
 80017aa:	43b3      	bics	r3, r6
 80017ac:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 80017ae:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017b0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017b2:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017b4:	e7c6      	b.n	8001744 <HAL_TIM_Base_Init+0x68>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	40000400 	.word	0x40000400
 80017c0:	40002000 	.word	0x40002000
 80017c4:	40014400 	.word	0x40014400
 80017c8:	40014800 	.word	0x40014800
 80017cc:	fffffcff 	.word	0xfffffcff

080017d0 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80017d0:	4770      	bx	lr
 80017d2:	46c0      	nop			@ (mov r8, r8)

080017d4 <HAL_TIM_PWM_Init>:
{
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80017d8:	d05c      	beq.n	8001894 <HAL_TIM_PWM_Init+0xc0>
  if (htim->State == HAL_TIM_STATE_RESET)
 80017da:	233d      	movs	r3, #61	@ 0x3d
 80017dc:	5cc3      	ldrb	r3, [r0, r3]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d049      	beq.n	8001878 <HAL_TIM_PWM_Init+0xa4>
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	233d      	movs	r3, #61	@ 0x3d
 80017e6:	2202      	movs	r2, #2
 80017e8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ea:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017ec:	4e30      	ldr	r6, [pc, #192]	@ (80018b0 <HAL_TIM_PWM_Init+0xdc>)
  tmpcr1 = TIMx->CR1;
 80017ee:	6813      	ldr	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80017f0:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017f2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017f4:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017f6:	42b2      	cmp	r2, r6
 80017f8:	d012      	beq.n	8001820 <HAL_TIM_PWM_Init+0x4c>
 80017fa:	4e2e      	ldr	r6, [pc, #184]	@ (80018b4 <HAL_TIM_PWM_Init+0xe0>)
 80017fc:	42b2      	cmp	r2, r6
 80017fe:	d040      	beq.n	8001882 <HAL_TIM_PWM_Init+0xae>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001800:	4e2d      	ldr	r6, [pc, #180]	@ (80018b8 <HAL_TIM_PWM_Init+0xe4>)
 8001802:	42b2      	cmp	r2, r6
 8001804:	d041      	beq.n	800188a <HAL_TIM_PWM_Init+0xb6>
 8001806:	4e2d      	ldr	r6, [pc, #180]	@ (80018bc <HAL_TIM_PWM_Init+0xe8>)
 8001808:	42b2      	cmp	r2, r6
 800180a:	d00d      	beq.n	8001828 <HAL_TIM_PWM_Init+0x54>
 800180c:	4e2c      	ldr	r6, [pc, #176]	@ (80018c0 <HAL_TIM_PWM_Init+0xec>)
 800180e:	42b2      	cmp	r2, r6
 8001810:	d042      	beq.n	8001898 <HAL_TIM_PWM_Init+0xc4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001812:	2680      	movs	r6, #128	@ 0x80
 8001814:	43b3      	bics	r3, r6
 8001816:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001818:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800181a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800181c:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800181e:	e00f      	b.n	8001840 <HAL_TIM_PWM_Init+0x6c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001820:	2670      	movs	r6, #112	@ 0x70
 8001822:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8001824:	68a6      	ldr	r6, [r4, #8]
 8001826:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001828:	4e26      	ldr	r6, [pc, #152]	@ (80018c4 <HAL_TIM_PWM_Init+0xf0>)
 800182a:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800182c:	6926      	ldr	r6, [r4, #16]
 800182e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001830:	2680      	movs	r6, #128	@ 0x80
 8001832:	43b3      	bics	r3, r6
 8001834:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001836:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001838:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800183a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800183c:	6963      	ldr	r3, [r4, #20]
 800183e:	6313      	str	r3, [r2, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001840:	2301      	movs	r3, #1
 8001842:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001844:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8001846:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001848:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800184a:	3a0a      	subs	r2, #10
 800184c:	54a3      	strb	r3, [r4, r2]
 800184e:	3201      	adds	r2, #1
 8001850:	54a3      	strb	r3, [r4, r2]
 8001852:	3201      	adds	r2, #1
 8001854:	54a3      	strb	r3, [r4, r2]
 8001856:	3201      	adds	r2, #1
 8001858:	54a3      	strb	r3, [r4, r2]
 800185a:	3201      	adds	r2, #1
 800185c:	54a3      	strb	r3, [r4, r2]
 800185e:	3201      	adds	r2, #1
 8001860:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001862:	3201      	adds	r2, #1
 8001864:	54a3      	strb	r3, [r4, r2]
 8001866:	3201      	adds	r2, #1
 8001868:	54a3      	strb	r3, [r4, r2]
 800186a:	3201      	adds	r2, #1
 800186c:	54a3      	strb	r3, [r4, r2]
 800186e:	3201      	adds	r2, #1
 8001870:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001872:	3a0a      	subs	r2, #10
 8001874:	54a3      	strb	r3, [r4, r2]
}
 8001876:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001878:	333c      	adds	r3, #60	@ 0x3c
 800187a:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800187c:	f7ff ffa8 	bl	80017d0 <HAL_TIM_PWM_MspInit>
 8001880:	e7b0      	b.n	80017e4 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001882:	2670      	movs	r6, #112	@ 0x70
 8001884:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8001886:	68a6      	ldr	r6, [r4, #8]
 8001888:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800188a:	4e0e      	ldr	r6, [pc, #56]	@ (80018c4 <HAL_TIM_PWM_Init+0xf0>)
 800188c:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800188e:	6926      	ldr	r6, [r4, #16]
 8001890:	4333      	orrs	r3, r6
 8001892:	e7be      	b.n	8001812 <HAL_TIM_PWM_Init+0x3e>
    return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e7ee      	b.n	8001876 <HAL_TIM_PWM_Init+0xa2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001898:	4e0a      	ldr	r6, [pc, #40]	@ (80018c4 <HAL_TIM_PWM_Init+0xf0>)
 800189a:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800189c:	6926      	ldr	r6, [r4, #16]
 800189e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018a0:	2680      	movs	r6, #128	@ 0x80
 80018a2:	43b3      	bics	r3, r6
 80018a4:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 80018a6:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018a8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018aa:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018ac:	e7c6      	b.n	800183c <HAL_TIM_PWM_Init+0x68>
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	40012c00 	.word	0x40012c00
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40002000 	.word	0x40002000
 80018bc:	40014400 	.word	0x40014400
 80018c0:	40014800 	.word	0x40014800
 80018c4:	fffffcff 	.word	0xfffffcff

080018c8 <HAL_TIM_PWM_MspDeInit>:
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
 80018c8:	4770      	bx	lr
 80018ca:	46c0      	nop			@ (mov r8, r8)

080018cc <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 80018cc:	233d      	movs	r3, #61	@ 0x3d
 80018ce:	2202      	movs	r2, #2
{
 80018d0:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80018d2:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_DISABLE(htim);
 80018d4:	6803      	ldr	r3, [r0, #0]
 80018d6:	4a16      	ldr	r2, [pc, #88]	@ (8001930 <HAL_TIM_PWM_DeInit+0x64>)
 80018d8:	6a19      	ldr	r1, [r3, #32]
{
 80018da:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 80018dc:	4211      	tst	r1, r2
 80018de:	d107      	bne.n	80018f0 <HAL_TIM_PWM_DeInit+0x24>
 80018e0:	6a19      	ldr	r1, [r3, #32]
 80018e2:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <HAL_TIM_PWM_DeInit+0x68>)
 80018e4:	4211      	tst	r1, r2
 80018e6:	d103      	bne.n	80018f0 <HAL_TIM_PWM_DeInit+0x24>
 80018e8:	2101      	movs	r1, #1
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	438a      	bics	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 80018f0:	0020      	movs	r0, r4
 80018f2:	f7ff ffe9 	bl	80018c8 <HAL_TIM_PWM_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	2248      	movs	r2, #72	@ 0x48
 80018fa:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80018fc:	3a0a      	subs	r2, #10
 80018fe:	54a3      	strb	r3, [r4, r2]
 8001900:	3201      	adds	r2, #1
 8001902:	54a3      	strb	r3, [r4, r2]
 8001904:	3201      	adds	r2, #1
 8001906:	54a3      	strb	r3, [r4, r2]
 8001908:	3201      	adds	r2, #1
 800190a:	54a3      	strb	r3, [r4, r2]
 800190c:	3201      	adds	r2, #1
 800190e:	54a3      	strb	r3, [r4, r2]
 8001910:	3201      	adds	r2, #1
 8001912:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001914:	3201      	adds	r2, #1
 8001916:	54a3      	strb	r3, [r4, r2]
 8001918:	3201      	adds	r2, #1
 800191a:	54a3      	strb	r3, [r4, r2]
 800191c:	3201      	adds	r2, #1
 800191e:	54a3      	strb	r3, [r4, r2]
 8001920:	3201      	adds	r2, #1
 8001922:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_RESET;
 8001924:	3a0a      	subs	r2, #10
 8001926:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(htim);
 8001928:	3a01      	subs	r2, #1
}
 800192a:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800192c:	54a3      	strb	r3, [r4, r2]
}
 800192e:	bd10      	pop	{r4, pc}
 8001930:	00001111 	.word	0x00001111
 8001934:	00000444 	.word	0x00000444

08001938 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8001938:	2910      	cmp	r1, #16
 800193a:	d803      	bhi.n	8001944 <HAL_TIM_PWM_Start+0xc>
 800193c:	4a2a      	ldr	r2, [pc, #168]	@ (80019e8 <HAL_TIM_PWM_Start+0xb0>)
 800193e:	008b      	lsls	r3, r1, #2
 8001940:	58d3      	ldr	r3, [r2, r3]
 8001942:	469f      	mov	pc, r3
 8001944:	2343      	movs	r3, #67	@ 0x43
 8001946:	5cc2      	ldrb	r2, [r0, r3]
 8001948:	2a01      	cmp	r2, #1
 800194a:	d12a      	bne.n	80019a2 <HAL_TIM_PWM_Start+0x6a>
 800194c:	2202      	movs	r2, #2
 800194e:	54c2      	strb	r2, [r0, r3]
 8001950:	221f      	movs	r2, #31
 8001952:	4011      	ands	r1, r2
 8001954:	3a1e      	subs	r2, #30
 8001956:	408a      	lsls	r2, r1
 8001958:	6803      	ldr	r3, [r0, #0]
 800195a:	6a19      	ldr	r1, [r3, #32]
 800195c:	4391      	bics	r1, r2
 800195e:	6219      	str	r1, [r3, #32]
 8001960:	6a19      	ldr	r1, [r3, #32]
 8001962:	430a      	orrs	r2, r1
 8001964:	621a      	str	r2, [r3, #32]
 8001966:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <HAL_TIM_PWM_Start+0xb4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d036      	beq.n	80019da <HAL_TIM_PWM_Start+0xa2>
 800196c:	4a20      	ldr	r2, [pc, #128]	@ (80019f0 <HAL_TIM_PWM_Start+0xb8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02d      	beq.n	80019ce <HAL_TIM_PWM_Start+0x96>
 8001972:	4a20      	ldr	r2, [pc, #128]	@ (80019f4 <HAL_TIM_PWM_Start+0xbc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d02a      	beq.n	80019ce <HAL_TIM_PWM_Start+0x96>
 8001978:	4a1f      	ldr	r2, [pc, #124]	@ (80019f8 <HAL_TIM_PWM_Start+0xc0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d107      	bne.n	800198e <HAL_TIM_PWM_Start+0x56>
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	491e      	ldr	r1, [pc, #120]	@ (80019fc <HAL_TIM_PWM_Start+0xc4>)
 8001982:	400a      	ands	r2, r1
 8001984:	2a06      	cmp	r2, #6
 8001986:	d006      	beq.n	8001996 <HAL_TIM_PWM_Start+0x5e>
 8001988:	3907      	subs	r1, #7
 800198a:	428a      	cmp	r2, r1
 800198c:	d003      	beq.n	8001996 <HAL_TIM_PWM_Start+0x5e>
 800198e:	2101      	movs	r1, #1
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	2000      	movs	r0, #0
 8001998:	4770      	bx	lr
 800199a:	233e      	movs	r3, #62	@ 0x3e
 800199c:	5cc2      	ldrb	r2, [r0, r3]
 800199e:	2a01      	cmp	r2, #1
 80019a0:	d0d4      	beq.n	800194c <HAL_TIM_PWM_Start+0x14>
 80019a2:	2001      	movs	r0, #1
 80019a4:	e7f8      	b.n	8001998 <HAL_TIM_PWM_Start+0x60>
 80019a6:	233f      	movs	r3, #63	@ 0x3f
 80019a8:	5cc2      	ldrb	r2, [r0, r3]
 80019aa:	2a01      	cmp	r2, #1
 80019ac:	d0ce      	beq.n	800194c <HAL_TIM_PWM_Start+0x14>
 80019ae:	e7f8      	b.n	80019a2 <HAL_TIM_PWM_Start+0x6a>
 80019b0:	2340      	movs	r3, #64	@ 0x40
 80019b2:	5cc2      	ldrb	r2, [r0, r3]
 80019b4:	2a01      	cmp	r2, #1
 80019b6:	d0c9      	beq.n	800194c <HAL_TIM_PWM_Start+0x14>
 80019b8:	e7f3      	b.n	80019a2 <HAL_TIM_PWM_Start+0x6a>
 80019ba:	2341      	movs	r3, #65	@ 0x41
 80019bc:	5cc2      	ldrb	r2, [r0, r3]
 80019be:	2a01      	cmp	r2, #1
 80019c0:	d0c4      	beq.n	800194c <HAL_TIM_PWM_Start+0x14>
 80019c2:	e7ee      	b.n	80019a2 <HAL_TIM_PWM_Start+0x6a>
 80019c4:	2342      	movs	r3, #66	@ 0x42
 80019c6:	5cc2      	ldrb	r2, [r0, r3]
 80019c8:	2a01      	cmp	r2, #1
 80019ca:	d0bf      	beq.n	800194c <HAL_TIM_PWM_Start+0x14>
 80019cc:	e7e9      	b.n	80019a2 <HAL_TIM_PWM_Start+0x6a>
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019d2:	0212      	lsls	r2, r2, #8
 80019d4:	430a      	orrs	r2, r1
 80019d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80019d8:	e7d9      	b.n	800198e <HAL_TIM_PWM_Start+0x56>
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019de:	0212      	lsls	r2, r2, #8
 80019e0:	430a      	orrs	r2, r1
 80019e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80019e4:	e7cb      	b.n	800197e <HAL_TIM_PWM_Start+0x46>
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	08002b70 	.word	0x08002b70
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40014400 	.word	0x40014400
 80019f4:	40014800 	.word	0x40014800
 80019f8:	40000400 	.word	0x40000400
 80019fc:	00010007 	.word	0x00010007

08001a00 <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8001a00:	b530      	push	{r4, r5, lr}
 8001a02:	251f      	movs	r5, #31
 8001a04:	2401      	movs	r4, #1
 8001a06:	400d      	ands	r5, r1
 8001a08:	40ac      	lsls	r4, r5
 8001a0a:	6803      	ldr	r3, [r0, #0]
 8001a0c:	6a1a      	ldr	r2, [r3, #32]
 8001a0e:	43a2      	bics	r2, r4
 8001a10:	621a      	str	r2, [r3, #32]
 8001a12:	6a1a      	ldr	r2, [r3, #32]
 8001a14:	621a      	str	r2, [r3, #32]
 8001a16:	4a23      	ldr	r2, [pc, #140]	@ (8001aa4 <HAL_TIM_PWM_Stop+0xa4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d014      	beq.n	8001a46 <HAL_TIM_PWM_Stop+0x46>
 8001a1c:	4a22      	ldr	r2, [pc, #136]	@ (8001aa8 <HAL_TIM_PWM_Stop+0xa8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d011      	beq.n	8001a46 <HAL_TIM_PWM_Stop+0x46>
 8001a22:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <HAL_TIM_PWM_Stop+0xac>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d00e      	beq.n	8001a46 <HAL_TIM_PWM_Stop+0x46>
 8001a28:	6a1c      	ldr	r4, [r3, #32]
 8001a2a:	4a21      	ldr	r2, [pc, #132]	@ (8001ab0 <HAL_TIM_PWM_Stop+0xb0>)
 8001a2c:	4214      	tst	r4, r2
 8001a2e:	d103      	bne.n	8001a38 <HAL_TIM_PWM_Stop+0x38>
 8001a30:	6a1c      	ldr	r4, [r3, #32]
 8001a32:	4a20      	ldr	r2, [pc, #128]	@ (8001ab4 <HAL_TIM_PWM_Stop+0xb4>)
 8001a34:	4214      	tst	r4, r2
 8001a36:	d01f      	beq.n	8001a78 <HAL_TIM_PWM_Stop+0x78>
 8001a38:	2900      	cmp	r1, #0
 8001a3a:	d111      	bne.n	8001a60 <HAL_TIM_PWM_Stop+0x60>
 8001a3c:	233e      	movs	r3, #62	@ 0x3e
 8001a3e:	2201      	movs	r2, #1
 8001a40:	54c2      	strb	r2, [r0, r3]
 8001a42:	2000      	movs	r0, #0
 8001a44:	bd30      	pop	{r4, r5, pc}
 8001a46:	6a1c      	ldr	r4, [r3, #32]
 8001a48:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <HAL_TIM_PWM_Stop+0xb0>)
 8001a4a:	4214      	tst	r4, r2
 8001a4c:	d1ec      	bne.n	8001a28 <HAL_TIM_PWM_Stop+0x28>
 8001a4e:	6a1c      	ldr	r4, [r3, #32]
 8001a50:	4a18      	ldr	r2, [pc, #96]	@ (8001ab4 <HAL_TIM_PWM_Stop+0xb4>)
 8001a52:	4214      	tst	r4, r2
 8001a54:	d1e8      	bne.n	8001a28 <HAL_TIM_PWM_Stop+0x28>
 8001a56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a58:	4c17      	ldr	r4, [pc, #92]	@ (8001ab8 <HAL_TIM_PWM_Stop+0xb8>)
 8001a5a:	4022      	ands	r2, r4
 8001a5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a5e:	e7e3      	b.n	8001a28 <HAL_TIM_PWM_Stop+0x28>
 8001a60:	2904      	cmp	r1, #4
 8001a62:	d00e      	beq.n	8001a82 <HAL_TIM_PWM_Stop+0x82>
 8001a64:	2908      	cmp	r1, #8
 8001a66:	d014      	beq.n	8001a92 <HAL_TIM_PWM_Stop+0x92>
 8001a68:	290c      	cmp	r1, #12
 8001a6a:	d00e      	beq.n	8001a8a <HAL_TIM_PWM_Stop+0x8a>
 8001a6c:	2910      	cmp	r1, #16
 8001a6e:	d014      	beq.n	8001a9a <HAL_TIM_PWM_Stop+0x9a>
 8001a70:	2343      	movs	r3, #67	@ 0x43
 8001a72:	2201      	movs	r2, #1
 8001a74:	54c2      	strb	r2, [r0, r3]
 8001a76:	e7e4      	b.n	8001a42 <HAL_TIM_PWM_Stop+0x42>
 8001a78:	2401      	movs	r4, #1
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	43a2      	bics	r2, r4
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e7da      	b.n	8001a38 <HAL_TIM_PWM_Stop+0x38>
 8001a82:	233f      	movs	r3, #63	@ 0x3f
 8001a84:	2201      	movs	r2, #1
 8001a86:	54c2      	strb	r2, [r0, r3]
 8001a88:	e7db      	b.n	8001a42 <HAL_TIM_PWM_Stop+0x42>
 8001a8a:	2341      	movs	r3, #65	@ 0x41
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	54c2      	strb	r2, [r0, r3]
 8001a90:	e7d7      	b.n	8001a42 <HAL_TIM_PWM_Stop+0x42>
 8001a92:	2340      	movs	r3, #64	@ 0x40
 8001a94:	2201      	movs	r2, #1
 8001a96:	54c2      	strb	r2, [r0, r3]
 8001a98:	e7d3      	b.n	8001a42 <HAL_TIM_PWM_Stop+0x42>
 8001a9a:	2342      	movs	r3, #66	@ 0x42
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	54c2      	strb	r2, [r0, r3]
 8001aa0:	e7cf      	b.n	8001a42 <HAL_TIM_PWM_Stop+0x42>
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40014400 	.word	0x40014400
 8001aac:	40014800 	.word	0x40014800
 8001ab0:	00001111 	.word	0x00001111
 8001ab4:	00000444 	.word	0x00000444
 8001ab8:	ffff7fff 	.word	0xffff7fff

08001abc <HAL_TIM_PWM_ConfigChannel>:
{
 8001abc:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001abe:	203c      	movs	r0, #60	@ 0x3c
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001ac2:	5c1c      	ldrb	r4, [r3, r0]
 8001ac4:	2c01      	cmp	r4, #1
 8001ac6:	d100      	bne.n	8001aca <HAL_TIM_PWM_ConfigChannel+0xe>
 8001ac8:	e16b      	b.n	8001da2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8001aca:	2401      	movs	r4, #1
 8001acc:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8001ace:	2a14      	cmp	r2, #20
 8001ad0:	d803      	bhi.n	8001ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ad2:	48b5      	ldr	r0, [pc, #724]	@ (8001da8 <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	5882      	ldr	r2, [r0, r2]
 8001ad8:	4697      	mov	pc, r2
 8001ada:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001adc:	223c      	movs	r2, #60	@ 0x3c
 8001ade:	2100      	movs	r1, #0
 8001ae0:	5499      	strb	r1, [r3, r2]
}
 8001ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001ae4:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001ae6:	4db1      	ldr	r5, [pc, #708]	@ (8001dac <HAL_TIM_PWM_ConfigChannel+0x2f0>)
  tmpccer = TIMx->CCER;
 8001ae8:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001aea:	6a10      	ldr	r0, [r2, #32]
 8001aec:	4028      	ands	r0, r5
 8001aee:	6210      	str	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001af0:	4daf      	ldr	r5, [pc, #700]	@ (8001db0 <HAL_TIM_PWM_ConfigChannel+0x2f4>)
  tmpcr2 =  TIMx->CR2;
 8001af2:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001af4:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001af6:	4028      	ands	r0, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001af8:	680d      	ldr	r5, [r1, #0]
 8001afa:	022d      	lsls	r5, r5, #8
 8001afc:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001afe:	48ad      	ldr	r0, [pc, #692]	@ (8001db4 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
 8001b00:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001b02:	6888      	ldr	r0, [r1, #8]
 8001b04:	0500      	lsls	r0, r0, #20
 8001b06:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b08:	4cab      	ldr	r4, [pc, #684]	@ (8001db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001b0a:	42a2      	cmp	r2, r4
 8001b0c:	d100      	bne.n	8001b10 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001b0e:	e118      	b.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x286>
 8001b10:	4caa      	ldr	r4, [pc, #680]	@ (8001dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001b12:	42a2      	cmp	r2, r4
 8001b14:	d100      	bne.n	8001b18 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001b16:	e114      	b.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x286>
 8001b18:	4ca9      	ldr	r4, [pc, #676]	@ (8001dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001b1a:	42a2      	cmp	r2, r4
 8001b1c:	d100      	bne.n	8001b20 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001b1e:	e110      	b.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x286>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001b20:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001b22:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001b24:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8001b26:	65d4      	str	r4, [r2, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b28:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b2a:	2080      	movs	r0, #128	@ 0x80
 8001b2c:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8001b2e:	0100      	lsls	r0, r0, #4
 8001b30:	4320      	orrs	r0, r4
 8001b32:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b34:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001b36:	4ca3      	ldr	r4, [pc, #652]	@ (8001dc4 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b38:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b3a:	4020      	ands	r0, r4
 8001b3c:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b3e:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001b40:	0209      	lsls	r1, r1, #8
 8001b42:	4301      	orrs	r1, r0
 8001b44:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2000      	movs	r0, #0
 8001b48:	e7c8      	b.n	8001adc <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b4a:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b4c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b4e:	4e9e      	ldr	r6, [pc, #632]	@ (8001dc8 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer = TIMx->CCER;
 8001b50:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b52:	6a14      	ldr	r4, [r2, #32]
 8001b54:	43ac      	bics	r4, r5
 8001b56:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001b58:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b5a:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b5c:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001b5e:	680e      	ldr	r6, [r1, #0]
 8001b60:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8001b62:	2602      	movs	r6, #2
 8001b64:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8001b66:	688e      	ldr	r6, [r1, #8]
 8001b68:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b6a:	4e93      	ldr	r6, [pc, #588]	@ (8001db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001b6c:	42b2      	cmp	r2, r6
 8001b6e:	d100      	bne.n	8001b72 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8001b70:	e0da      	b.n	8001d28 <HAL_TIM_PWM_ConfigChannel+0x26c>
 8001b72:	4e92      	ldr	r6, [pc, #584]	@ (8001dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001b74:	42b2      	cmp	r2, r6
 8001b76:	d100      	bne.n	8001b7a <HAL_TIM_PWM_ConfigChannel+0xbe>
 8001b78:	e0d6      	b.n	8001d28 <HAL_TIM_PWM_ConfigChannel+0x26c>
 8001b7a:	4e91      	ldr	r6, [pc, #580]	@ (8001dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001b7c:	42b2      	cmp	r2, r6
 8001b7e:	d100      	bne.n	8001b82 <HAL_TIM_PWM_ConfigChannel+0xc6>
 8001b80:	e0d2      	b.n	8001d28 <HAL_TIM_PWM_ConfigChannel+0x26c>
  TIMx->CR2 = tmpcr2;
 8001b82:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b84:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001b86:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b88:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8001b8a:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b8c:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001b8e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b90:	6990      	ldr	r0, [r2, #24]
 8001b92:	4320      	orrs	r0, r4
 8001b94:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b96:	6990      	ldr	r0, [r2, #24]
 8001b98:	3c04      	subs	r4, #4
 8001b9a:	43a0      	bics	r0, r4
 8001b9c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b9e:	6990      	ldr	r0, [r2, #24]
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e799      	b.n	8001adc <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ba8:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001baa:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 8001bac:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bae:	6a14      	ldr	r4, [r2, #32]
 8001bb0:	43ac      	bics	r4, r5
 8001bb2:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001bb4:	4d85      	ldr	r5, [pc, #532]	@ (8001dcc <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8001bb6:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001bb8:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001bba:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bbc:	680d      	ldr	r5, [r1, #0]
 8001bbe:	022d      	lsls	r5, r5, #8
 8001bc0:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001bc2:	2420      	movs	r4, #32
 8001bc4:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001bc6:	688c      	ldr	r4, [r1, #8]
 8001bc8:	0124      	lsls	r4, r4, #4
 8001bca:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001bcc:	487a      	ldr	r0, [pc, #488]	@ (8001db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001bce:	4282      	cmp	r2, r0
 8001bd0:	d100      	bne.n	8001bd4 <HAL_TIM_PWM_ConfigChannel+0x118>
 8001bd2:	e0c2      	b.n	8001d5a <HAL_TIM_PWM_ConfigChannel+0x29e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd4:	4879      	ldr	r0, [pc, #484]	@ (8001dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001bd6:	4282      	cmp	r2, r0
 8001bd8:	d100      	bne.n	8001bdc <HAL_TIM_PWM_ConfigChannel+0x120>
 8001bda:	e0c5      	b.n	8001d68 <HAL_TIM_PWM_ConfigChannel+0x2ac>
 8001bdc:	4878      	ldr	r0, [pc, #480]	@ (8001dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001bde:	4282      	cmp	r2, r0
 8001be0:	d100      	bne.n	8001be4 <HAL_TIM_PWM_ConfigChannel+0x128>
 8001be2:	e0c1      	b.n	8001d68 <HAL_TIM_PWM_ConfigChannel+0x2ac>
  TIMx->CCR2 = OC_Config->Pulse;
 8001be4:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001be6:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001be8:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001bea:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bec:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 8001bee:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bf0:	6994      	ldr	r4, [r2, #24]
 8001bf2:	0100      	lsls	r0, r0, #4
 8001bf4:	4320      	orrs	r0, r4
 8001bf6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bf8:	6990      	ldr	r0, [r2, #24]
 8001bfa:	4c72      	ldr	r4, [pc, #456]	@ (8001dc4 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bfc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bfe:	4020      	ands	r0, r4
 8001c00:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c02:	6990      	ldr	r0, [r2, #24]
 8001c04:	0209      	lsls	r1, r1, #8
 8001c06:	4301      	orrs	r1, r0
 8001c08:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	e766      	b.n	8001adc <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c0e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c10:	4d6f      	ldr	r5, [pc, #444]	@ (8001dd0 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpccer = TIMx->CCER;
 8001c12:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c14:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c16:	4e6c      	ldr	r6, [pc, #432]	@ (8001dc8 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c18:	402c      	ands	r4, r5
 8001c1a:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001c1c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c1e:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c20:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001c22:	680e      	ldr	r6, [r1, #0]
 8001c24:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001c26:	4c6b      	ldr	r4, [pc, #428]	@ (8001dd4 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8001c28:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c2a:	688c      	ldr	r4, [r1, #8]
 8001c2c:	0224      	lsls	r4, r4, #8
 8001c2e:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c30:	4c61      	ldr	r4, [pc, #388]	@ (8001db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001c32:	42a2      	cmp	r2, r4
 8001c34:	d100      	bne.n	8001c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c36:	e0a5      	b.n	8001d84 <HAL_TIM_PWM_ConfigChannel+0x2c8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c38:	4c60      	ldr	r4, [pc, #384]	@ (8001dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001c3a:	42a2      	cmp	r2, r4
 8001c3c:	d100      	bne.n	8001c40 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001c3e:	e0a8      	b.n	8001d92 <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8001c40:	4c5f      	ldr	r4, [pc, #380]	@ (8001dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001c42:	42a2      	cmp	r2, r4
 8001c44:	d100      	bne.n	8001c48 <HAL_TIM_PWM_ConfigChannel+0x18c>
 8001c46:	e0a4      	b.n	8001d92 <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CCR3 = OC_Config->Pulse;
 8001c48:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c4a:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c4c:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001c4e:	63d4      	str	r4, [r2, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c50:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001c52:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c54:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c56:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c58:	4320      	orrs	r0, r4
 8001c5a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c5c:	69d0      	ldr	r0, [r2, #28]
 8001c5e:	3c04      	subs	r4, #4
 8001c60:	43a0      	bics	r0, r4
 8001c62:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c64:	69d0      	ldr	r0, [r2, #28]
 8001c66:	4301      	orrs	r1, r0
 8001c68:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	e736      	b.n	8001adc <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c6e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c70:	4d59      	ldr	r5, [pc, #356]	@ (8001dd8 <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 8001c72:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c74:	6a10      	ldr	r0, [r2, #32]
 8001c76:	4028      	ands	r0, r5
 8001c78:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c7a:	4d54      	ldr	r5, [pc, #336]	@ (8001dcc <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8001c7c:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c7e:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c80:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c82:	680d      	ldr	r5, [r1, #0]
 8001c84:	022d      	lsls	r5, r5, #8
 8001c86:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8001c88:	4854      	ldr	r0, [pc, #336]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x320>)
 8001c8a:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c8c:	6888      	ldr	r0, [r1, #8]
 8001c8e:	0300      	lsls	r0, r0, #12
 8001c90:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c92:	4c49      	ldr	r4, [pc, #292]	@ (8001db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001c94:	42a2      	cmp	r2, r4
 8001c96:	d06f      	beq.n	8001d78 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8001c98:	4c48      	ldr	r4, [pc, #288]	@ (8001dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001c9a:	42a2      	cmp	r2, r4
 8001c9c:	d06c      	beq.n	8001d78 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8001c9e:	4c48      	ldr	r4, [pc, #288]	@ (8001dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001ca0:	42a2      	cmp	r2, r4
 8001ca2:	d069      	beq.n	8001d78 <HAL_TIM_PWM_ConfigChannel+0x2bc>
  TIMx->CCR4 = OC_Config->Pulse;
 8001ca4:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001ca6:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001ca8:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001caa:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8001cac:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cae:	2080      	movs	r0, #128	@ 0x80
 8001cb0:	69d4      	ldr	r4, [r2, #28]
 8001cb2:	0100      	lsls	r0, r0, #4
 8001cb4:	4320      	orrs	r0, r4
 8001cb6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cb8:	69d0      	ldr	r0, [r2, #28]
 8001cba:	4c42      	ldr	r4, [pc, #264]	@ (8001dc4 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cbc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cbe:	4020      	ands	r0, r4
 8001cc0:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cc2:	69d0      	ldr	r0, [r2, #28]
 8001cc4:	0209      	lsls	r1, r1, #8
 8001cc6:	4301      	orrs	r1, r0
 8001cc8:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	2000      	movs	r0, #0
 8001ccc:	e706      	b.n	8001adc <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001cce:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001cd0:	4d43      	ldr	r5, [pc, #268]	@ (8001de0 <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 8001cd2:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001cd4:	6a10      	ldr	r0, [r2, #32]
 8001cd6:	4028      	ands	r0, r5
 8001cd8:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001cda:	4d42      	ldr	r5, [pc, #264]	@ (8001de4 <HAL_TIM_PWM_ConfigChannel+0x328>)
  tmpcr2 =  TIMx->CR2;
 8001cdc:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001cde:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001ce0:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8001ce2:	680d      	ldr	r5, [r1, #0]
 8001ce4:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC5P;
 8001ce6:	4840      	ldr	r0, [pc, #256]	@ (8001de8 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8001ce8:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001cea:	6888      	ldr	r0, [r1, #8]
 8001cec:	0400      	lsls	r0, r0, #16
 8001cee:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cf0:	4c31      	ldr	r4, [pc, #196]	@ (8001db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001cf2:	42a2      	cmp	r2, r4
 8001cf4:	d02b      	beq.n	8001d4e <HAL_TIM_PWM_ConfigChannel+0x292>
 8001cf6:	4c31      	ldr	r4, [pc, #196]	@ (8001dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001cf8:	42a2      	cmp	r2, r4
 8001cfa:	d028      	beq.n	8001d4e <HAL_TIM_PWM_ConfigChannel+0x292>
 8001cfc:	4c30      	ldr	r4, [pc, #192]	@ (8001dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001cfe:	42a2      	cmp	r2, r4
 8001d00:	d025      	beq.n	8001d4e <HAL_TIM_PWM_ConfigChannel+0x292>
  TIMx->CCR5 = OC_Config->Pulse;
 8001d02:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001d04:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001d06:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8001d08:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d0a:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001d0c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d0e:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d10:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d12:	4320      	orrs	r0, r4
 8001d14:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d16:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001d18:	3c04      	subs	r4, #4
 8001d1a:	43a0      	bics	r0, r4
 8001d1c:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d1e:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001d20:	4301      	orrs	r1, r0
 8001d22:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001d24:	2000      	movs	r0, #0
 8001d26:	e6d9      	b.n	8001adc <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d28:	2608      	movs	r6, #8
 8001d2a:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8001d2c:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d2e:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8001d30:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d32:	2604      	movs	r6, #4
 8001d34:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d36:	4e2d      	ldr	r6, [pc, #180]	@ (8001dec <HAL_TIM_PWM_ConfigChannel+0x330>)
 8001d38:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d3a:	694d      	ldr	r5, [r1, #20]
 8001d3c:	433d      	orrs	r5, r7
 8001d3e:	4335      	orrs	r5, r6
 8001d40:	e71f      	b.n	8001b82 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001d42:	4c2b      	ldr	r4, [pc, #172]	@ (8001df0 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8001d44:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001d46:	694e      	ldr	r6, [r1, #20]
 8001d48:	02b6      	lsls	r6, r6, #10
 8001d4a:	4326      	orrs	r6, r4
 8001d4c:	e6e8      	b.n	8001b20 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001d4e:	4c24      	ldr	r4, [pc, #144]	@ (8001de0 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8001d50:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001d52:	694e      	ldr	r6, [r1, #20]
 8001d54:	0236      	lsls	r6, r6, #8
 8001d56:	4326      	orrs	r6, r4
 8001d58:	e7d3      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x246>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d5a:	2080      	movs	r0, #128	@ 0x80
 8001d5c:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d5e:	68c8      	ldr	r0, [r1, #12]
 8001d60:	0100      	lsls	r0, r0, #4
 8001d62:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d64:	2040      	movs	r0, #64	@ 0x40
 8001d66:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d68:	4822      	ldr	r0, [pc, #136]	@ (8001df4 <HAL_TIM_PWM_ConfigChannel+0x338>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d6a:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d6c:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d6e:	698e      	ldr	r6, [r1, #24]
 8001d70:	433e      	orrs	r6, r7
 8001d72:	00b6      	lsls	r6, r6, #2
 8001d74:	4306      	orrs	r6, r0
 8001d76:	e735      	b.n	8001be4 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d78:	4c1f      	ldr	r4, [pc, #124]	@ (8001df8 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8001d7a:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d7c:	694e      	ldr	r6, [r1, #20]
 8001d7e:	01b6      	lsls	r6, r6, #6
 8001d80:	4326      	orrs	r6, r4
 8001d82:	e78f      	b.n	8001ca4 <HAL_TIM_PWM_ConfigChannel+0x1e8>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d84:	4c1d      	ldr	r4, [pc, #116]	@ (8001dfc <HAL_TIM_PWM_ConfigChannel+0x340>)
 8001d86:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d88:	68cc      	ldr	r4, [r1, #12]
 8001d8a:	0224      	lsls	r4, r4, #8
 8001d8c:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d8e:	480d      	ldr	r0, [pc, #52]	@ (8001dc4 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8001d90:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d92:	4c1b      	ldr	r4, [pc, #108]	@ (8001e00 <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d94:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d96:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d98:	698d      	ldr	r5, [r1, #24]
 8001d9a:	433d      	orrs	r5, r7
 8001d9c:	012d      	lsls	r5, r5, #4
 8001d9e:	4325      	orrs	r5, r4
 8001da0:	e752      	b.n	8001c48 <HAL_TIM_PWM_ConfigChannel+0x18c>
  __HAL_LOCK(htim);
 8001da2:	2002      	movs	r0, #2
 8001da4:	e69d      	b.n	8001ae2 <HAL_TIM_PWM_ConfigChannel+0x26>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	08002bb4 	.word	0x08002bb4
 8001dac:	ffefffff 	.word	0xffefffff
 8001db0:	feff8fff 	.word	0xfeff8fff
 8001db4:	ffdfffff 	.word	0xffdfffff
 8001db8:	40012c00 	.word	0x40012c00
 8001dbc:	40014400 	.word	0x40014400
 8001dc0:	40014800 	.word	0x40014800
 8001dc4:	fffffbff 	.word	0xfffffbff
 8001dc8:	fffeff8c 	.word	0xfffeff8c
 8001dcc:	feff8cff 	.word	0xfeff8cff
 8001dd0:	fffffeff 	.word	0xfffffeff
 8001dd4:	fffffdff 	.word	0xfffffdff
 8001dd8:	ffffefff 	.word	0xffffefff
 8001ddc:	ffffdfff 	.word	0xffffdfff
 8001de0:	fffeffff 	.word	0xfffeffff
 8001de4:	fffeff8f 	.word	0xfffeff8f
 8001de8:	fffdffff 	.word	0xfffdffff
 8001dec:	fffffcff 	.word	0xfffffcff
 8001df0:	fffbffff 	.word	0xfffbffff
 8001df4:	fffff3ff 	.word	0xfffff3ff
 8001df8:	ffffbfff 	.word	0xffffbfff
 8001dfc:	fffff7ff 	.word	0xfffff7ff
 8001e00:	ffffcfff 	.word	0xffffcfff

08001e04 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e04:	233c      	movs	r3, #60	@ 0x3c
{
 8001e06:	b570      	push	{r4, r5, r6, lr}
 8001e08:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8001e0a:	5cc0      	ldrb	r0, [r0, r3]
 8001e0c:	2801      	cmp	r0, #1
 8001e0e:	d100      	bne.n	8001e12 <HAL_TIM_ConfigClockSource+0xe>
 8001e10:	e073      	b.n	8001efa <HAL_TIM_ConfigClockSource+0xf6>
 8001e12:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001e16:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e18:	3301      	adds	r3, #1
 8001e1a:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001e1c:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e1e:	4d51      	ldr	r5, [pc, #324]	@ (8001f64 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8001e20:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e22:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8001e24:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e26:	680b      	ldr	r3, [r1, #0]
 8001e28:	2b60      	cmp	r3, #96	@ 0x60
 8001e2a:	d100      	bne.n	8001e2e <HAL_TIM_ConfigClockSource+0x2a>
 8001e2c:	e067      	b.n	8001efe <HAL_TIM_ConfigClockSource+0xfa>
 8001e2e:	d81d      	bhi.n	8001e6c <HAL_TIM_ConfigClockSource+0x68>
 8001e30:	2b40      	cmp	r3, #64	@ 0x40
 8001e32:	d100      	bne.n	8001e36 <HAL_TIM_ConfigClockSource+0x32>
 8001e34:	e07d      	b.n	8001f32 <HAL_TIM_ConfigClockSource+0x12e>
 8001e36:	d93f      	bls.n	8001eb8 <HAL_TIM_ConfigClockSource+0xb4>
 8001e38:	2b50      	cmp	r3, #80	@ 0x50
 8001e3a:	d135      	bne.n	8001ea8 <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 8001e3c:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001e3e:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e40:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e42:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e44:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e46:	43a6      	bics	r6, r4
 8001e48:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e4a:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001e4c:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e4e:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e50:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e52:	240a      	movs	r4, #10
 8001e54:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001e56:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e58:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e5a:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e5c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e5e:	4942      	ldr	r1, [pc, #264]	@ (8001f68 <HAL_TIM_ConfigClockSource+0x164>)
 8001e60:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e62:	2157      	movs	r1, #87	@ 0x57
 8001e64:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e66:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e68:	2000      	movs	r0, #0
 8001e6a:	e01e      	b.n	8001eaa <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001e6c:	2480      	movs	r4, #128	@ 0x80
 8001e6e:	0164      	lsls	r4, r4, #5
 8001e70:	42a3      	cmp	r3, r4
 8001e72:	d0f9      	beq.n	8001e68 <HAL_TIM_ConfigClockSource+0x64>
 8001e74:	2480      	movs	r4, #128	@ 0x80
 8001e76:	01a4      	lsls	r4, r4, #6
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	d12b      	bne.n	8001ed4 <HAL_TIM_ConfigClockSource+0xd0>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e7c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f6c <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e80:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e82:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e84:	688b      	ldr	r3, [r1, #8]
 8001e86:	68c9      	ldr	r1, [r1, #12]
 8001e88:	432b      	orrs	r3, r5
 8001e8a:	0209      	lsls	r1, r1, #8
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e90:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	6881      	ldr	r1, [r0, #8]
 8001e96:	01db      	lsls	r3, r3, #7
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	e004      	b.n	8001eaa <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	001c      	movs	r4, r3
 8001ea4:	438c      	bics	r4, r1
 8001ea6:	d00c      	beq.n	8001ec2 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8001ea8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001eaa:	233d      	movs	r3, #61	@ 0x3d
 8001eac:	2101      	movs	r1, #1
 8001eae:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	54d1      	strb	r1, [r2, r3]
}
 8001eb6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d002      	beq.n	8001ec2 <HAL_TIM_ConfigClockSource+0xbe>
 8001ebc:	d9f0      	bls.n	8001ea0 <HAL_TIM_ConfigClockSource+0x9c>
 8001ebe:	2b30      	cmp	r3, #48	@ 0x30
 8001ec0:	d1f2      	bne.n	8001ea8 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001ec2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ec4:	4c28      	ldr	r4, [pc, #160]	@ (8001f68 <HAL_TIM_ConfigClockSource+0x164>)
 8001ec6:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	2107      	movs	r1, #7
 8001ecc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001ece:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	e7ea      	b.n	8001eaa <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001ed4:	2b70      	cmp	r3, #112	@ 0x70
 8001ed6:	d1e7      	bne.n	8001ea8 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001ed8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eda:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001edc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ede:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ee0:	688b      	ldr	r3, [r1, #8]
 8001ee2:	68c9      	ldr	r1, [r1, #12]
 8001ee4:	432b      	orrs	r3, r5
 8001ee6:	0209      	lsls	r1, r1, #8
 8001ee8:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eea:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eec:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001eee:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001ef0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ef2:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8001ef4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	e7d7      	b.n	8001eaa <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 8001efa:	2002      	movs	r0, #2
 8001efc:	e7db      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001efe:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8001f00:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f02:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8001f04:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f06:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 8001f08:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f0a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f0c:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f0e:	4e18      	ldr	r6, [pc, #96]	@ (8001f70 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f10:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f12:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f14:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f16:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f18:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f1a:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f1c:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001f1e:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f20:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001f22:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f24:	4910      	ldr	r1, [pc, #64]	@ (8001f68 <HAL_TIM_ConfigClockSource+0x164>)
 8001f26:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f28:	2167      	movs	r1, #103	@ 0x67
 8001f2a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001f2c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2000      	movs	r0, #0
 8001f30:	e7bb      	b.n	8001eaa <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8001f32:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001f34:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f36:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f38:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f3a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f3c:	43a6      	bics	r6, r4
 8001f3e:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f40:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001f42:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f44:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f46:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f48:	240a      	movs	r4, #10
 8001f4a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001f4c:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001f4e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f50:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001f52:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f54:	4904      	ldr	r1, [pc, #16]	@ (8001f68 <HAL_TIM_ConfigClockSource+0x164>)
 8001f56:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f58:	2147      	movs	r1, #71	@ 0x47
 8001f5a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001f5c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5e:	2000      	movs	r0, #0
 8001f60:	e7a3      	b.n	8001eaa <HAL_TIM_ConfigClockSource+0xa6>
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	ffce0088 	.word	0xffce0088
 8001f68:	ffcfff8f 	.word	0xffcfff8f
 8001f6c:	ffff00ff 	.word	0xffff00ff
 8001f70:	ffff0fff 	.word	0xffff0fff

08001f74 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f74:	233c      	movs	r3, #60	@ 0x3c
{
 8001f76:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001f78:	5cc3      	ldrb	r3, [r0, r3]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d026      	beq.n	8001fcc <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7e:	233d      	movs	r3, #61	@ 0x3d
 8001f80:	2202      	movs	r2, #2
 8001f82:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f84:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f86:	4d12      	ldr	r5, [pc, #72]	@ (8001fd0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 8001f88:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f8a:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001f8c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f8e:	42aa      	cmp	r2, r5
 8001f90:	d00e      	beq.n	8001fb0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f92:	2570      	movs	r5, #112	@ 0x70
 8001f94:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f96:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f98:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d00f      	beq.n	8001fc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	233d      	movs	r3, #61	@ 0x3d
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8001fac:	2000      	movs	r0, #0
}
 8001fae:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001fb0:	4d09      	ldr	r5, [pc, #36]	@ (8001fd8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001fb2:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001fb4:	684d      	ldr	r5, [r1, #4]
 8001fb6:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fb8:	2570      	movs	r5, #112	@ 0x70
 8001fba:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fbc:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 8001fbe:	6053      	str	r3, [r2, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	439c      	bics	r4, r3
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fc4:	688b      	ldr	r3, [r1, #8]
 8001fc6:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8001fc8:	6094      	str	r4, [r2, #8]
 8001fca:	e7e9      	b.n	8001fa0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8001fcc:	2002      	movs	r0, #2
 8001fce:	e7ee      	b.n	8001fae <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	ff0fffff 	.word	0xff0fffff

08001fdc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fdc:	233c      	movs	r3, #60	@ 0x3c
{
 8001fde:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001fe0:	5cc3      	ldrb	r3, [r0, r3]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d03d      	beq.n	8002062 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001fe6:	4a20      	ldr	r2, [pc, #128]	@ (8002068 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8001fe8:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8001fea:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001fec:	4013      	ands	r3, r2
 8001fee:	688a      	ldr	r2, [r1, #8]
 8001ff0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800206c <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	684a      	ldr	r2, [r1, #4]
 8001ff8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8002070 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	680a      	ldr	r2, [r1, #0]
 8002000:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002002:	4a1c      	ldr	r2, [pc, #112]	@ (8002074 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8002004:	4013      	ands	r3, r2
 8002006:	690a      	ldr	r2, [r1, #16]
 8002008:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800200a:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 800200c:	4013      	ands	r3, r2
 800200e:	694a      	ldr	r2, [r1, #20]
 8002010:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002012:	4a1a      	ldr	r2, [pc, #104]	@ (800207c <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8002014:	4013      	ands	r3, r2
 8002016:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002018:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800201a:	4a19      	ldr	r2, [pc, #100]	@ (8002080 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800201c:	4013      	ands	r3, r2
 800201e:	698a      	ldr	r2, [r1, #24]
 8002020:	0412      	lsls	r2, r2, #16
 8002022:	4313      	orrs	r3, r2
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002024:	4a17      	ldr	r2, [pc, #92]	@ (8002084 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002026:	4294      	cmp	r4, r2
 8002028:	d005      	beq.n	8002036 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800202a:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800202c:	2200      	movs	r2, #0
 800202e:	233c      	movs	r3, #60	@ 0x3c
 8002030:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002032:	2000      	movs	r0, #0
}
 8002034:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002036:	4a14      	ldr	r2, [pc, #80]	@ (8002088 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002038:	4013      	ands	r3, r2
 800203a:	69ca      	ldr	r2, [r1, #28]
 800203c:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800203e:	4a13      	ldr	r2, [pc, #76]	@ (800208c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002040:	4013      	ands	r3, r2
 8002042:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002044:	0512      	lsls	r2, r2, #20
 8002046:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800204a:	401a      	ands	r2, r3
 800204c:	6a0b      	ldr	r3, [r1, #32]
 800204e:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002050:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002052:	401a      	ands	r2, r3
 8002054:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8002056:	431a      	orrs	r2, r3
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 800205a:	401a      	ands	r2, r3
 800205c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800205e:	4313      	orrs	r3, r2
 8002060:	e7e3      	b.n	800202a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
  __HAL_LOCK(htim);
 8002062:	2002      	movs	r0, #2
 8002064:	e7e6      	b.n	8002034 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	fffffcff 	.word	0xfffffcff
 800206c:	fffffbff 	.word	0xfffffbff
 8002070:	fffff7ff 	.word	0xfffff7ff
 8002074:	ffffefff 	.word	0xffffefff
 8002078:	ffffdfff 	.word	0xffffdfff
 800207c:	ffffbfff 	.word	0xffffbfff
 8002080:	fff0ffff 	.word	0xfff0ffff
 8002084:	40012c00 	.word	0x40012c00
 8002088:	efffffff 	.word	0xefffffff
 800208c:	ff0fffff 	.word	0xff0fffff
 8002090:	feffffff 	.word	0xfeffffff
 8002094:	fdffffff 	.word	0xfdffffff
 8002098:	dfffffff 	.word	0xdfffffff

0800209c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800209c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800209e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020a0:	071a      	lsls	r2, r3, #28
 80020a2:	d506      	bpl.n	80020b2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020a4:	6801      	ldr	r1, [r0, #0]
 80020a6:	4c28      	ldr	r4, [pc, #160]	@ (8002148 <UART_AdvFeatureConfig+0xac>)
 80020a8:	684a      	ldr	r2, [r1, #4]
 80020aa:	4022      	ands	r2, r4
 80020ac:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80020ae:	4322      	orrs	r2, r4
 80020b0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020b2:	07da      	lsls	r2, r3, #31
 80020b4:	d506      	bpl.n	80020c4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020b6:	6801      	ldr	r1, [r0, #0]
 80020b8:	4c24      	ldr	r4, [pc, #144]	@ (800214c <UART_AdvFeatureConfig+0xb0>)
 80020ba:	684a      	ldr	r2, [r1, #4]
 80020bc:	4022      	ands	r2, r4
 80020be:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80020c0:	4322      	orrs	r2, r4
 80020c2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020c4:	079a      	lsls	r2, r3, #30
 80020c6:	d506      	bpl.n	80020d6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020c8:	6801      	ldr	r1, [r0, #0]
 80020ca:	4c21      	ldr	r4, [pc, #132]	@ (8002150 <UART_AdvFeatureConfig+0xb4>)
 80020cc:	684a      	ldr	r2, [r1, #4]
 80020ce:	4022      	ands	r2, r4
 80020d0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80020d2:	4322      	orrs	r2, r4
 80020d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020d6:	075a      	lsls	r2, r3, #29
 80020d8:	d506      	bpl.n	80020e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020da:	6801      	ldr	r1, [r0, #0]
 80020dc:	4c1d      	ldr	r4, [pc, #116]	@ (8002154 <UART_AdvFeatureConfig+0xb8>)
 80020de:	684a      	ldr	r2, [r1, #4]
 80020e0:	4022      	ands	r2, r4
 80020e2:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80020e4:	4322      	orrs	r2, r4
 80020e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020e8:	06da      	lsls	r2, r3, #27
 80020ea:	d506      	bpl.n	80020fa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020ec:	6801      	ldr	r1, [r0, #0]
 80020ee:	4c1a      	ldr	r4, [pc, #104]	@ (8002158 <UART_AdvFeatureConfig+0xbc>)
 80020f0:	688a      	ldr	r2, [r1, #8]
 80020f2:	4022      	ands	r2, r4
 80020f4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80020f6:	4322      	orrs	r2, r4
 80020f8:	608a      	str	r2, [r1, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020fa:	069a      	lsls	r2, r3, #26
 80020fc:	d506      	bpl.n	800210c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020fe:	6801      	ldr	r1, [r0, #0]
 8002100:	4c16      	ldr	r4, [pc, #88]	@ (800215c <UART_AdvFeatureConfig+0xc0>)
 8002102:	688a      	ldr	r2, [r1, #8]
 8002104:	4022      	ands	r2, r4
 8002106:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002108:	4322      	orrs	r2, r4
 800210a:	608a      	str	r2, [r1, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800210c:	065a      	lsls	r2, r3, #25
 800210e:	d50a      	bpl.n	8002126 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002110:	6801      	ldr	r1, [r0, #0]
 8002112:	4d13      	ldr	r5, [pc, #76]	@ (8002160 <UART_AdvFeatureConfig+0xc4>)
 8002114:	684a      	ldr	r2, [r1, #4]
 8002116:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002118:	402a      	ands	r2, r5
 800211a:	4322      	orrs	r2, r4
 800211c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800211e:	2280      	movs	r2, #128	@ 0x80
 8002120:	0352      	lsls	r2, r2, #13
 8002122:	4294      	cmp	r4, r2
 8002124:	d009      	beq.n	800213a <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002126:	061b      	lsls	r3, r3, #24
 8002128:	d506      	bpl.n	8002138 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800212a:	6802      	ldr	r2, [r0, #0]
 800212c:	490d      	ldr	r1, [pc, #52]	@ (8002164 <UART_AdvFeatureConfig+0xc8>)
 800212e:	6853      	ldr	r3, [r2, #4]
 8002130:	400b      	ands	r3, r1
 8002132:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8002134:	430b      	orrs	r3, r1
 8002136:	6053      	str	r3, [r2, #4]
  }
}
 8002138:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800213a:	684a      	ldr	r2, [r1, #4]
 800213c:	4c0a      	ldr	r4, [pc, #40]	@ (8002168 <UART_AdvFeatureConfig+0xcc>)
 800213e:	4022      	ands	r2, r4
 8002140:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8002142:	4322      	orrs	r2, r4
 8002144:	604a      	str	r2, [r1, #4]
 8002146:	e7ee      	b.n	8002126 <UART_AdvFeatureConfig+0x8a>
 8002148:	ffff7fff 	.word	0xffff7fff
 800214c:	fffdffff 	.word	0xfffdffff
 8002150:	fffeffff 	.word	0xfffeffff
 8002154:	fffbffff 	.word	0xfffbffff
 8002158:	ffffefff 	.word	0xffffefff
 800215c:	ffffdfff 	.word	0xffffdfff
 8002160:	ffefffff 	.word	0xffefffff
 8002164:	fff7ffff 	.word	0xfff7ffff
 8002168:	ff9fffff 	.word	0xff9fffff

0800216c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216e:	2390      	movs	r3, #144	@ 0x90
 8002170:	2200      	movs	r2, #0
{
 8002172:	46c6      	mov	lr, r8
 8002174:	0004      	movs	r4, r0
 8002176:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800217a:	f7fe fc6d 	bl	8000a58 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800217e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002180:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	0712      	lsls	r2, r2, #28
 8002186:	d411      	bmi.n	80021ac <UART_CheckIdleState+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	0752      	lsls	r2, r2, #29
 800218c:	d43e      	bmi.n	800220c <UART_CheckIdleState+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800218e:	2320      	movs	r3, #32
 8002190:	2288      	movs	r2, #136	@ 0x88
 8002192:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002194:	3204      	adds	r2, #4
 8002196:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002198:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 800219a:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800219c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800219e:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80021a0:	2384      	movs	r3, #132	@ 0x84
 80021a2:	2200      	movs	r2, #0
 80021a4:	54e2      	strb	r2, [r4, r3]
}
 80021a6:	bc80      	pop	{r7}
 80021a8:	46b8      	mov	r8, r7
 80021aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	0292      	lsls	r2, r2, #10
 80021b0:	d4ea      	bmi.n	8002188 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021b4:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80021b6:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021b8:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ba:	04b6      	lsls	r6, r6, #18
 80021bc:	e010      	b.n	80021e0 <UART_CheckIdleState+0x74>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4217      	tst	r7, r2
 80021c4:	d009      	beq.n	80021da <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021c6:	4641      	mov	r1, r8
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	4211      	tst	r1, r2
 80021cc:	d159      	bne.n	8002282 <UART_CheckIdleState+0x116>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021ce:	2280      	movs	r2, #128	@ 0x80
 80021d0:	69d9      	ldr	r1, [r3, #28]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	4211      	tst	r1, r2
 80021d6:	d000      	beq.n	80021da <UART_CheckIdleState+0x6e>
 80021d8:	e085      	b.n	80022e6 <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	0292      	lsls	r2, r2, #10
 80021de:	d4d3      	bmi.n	8002188 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e0:	f7fe fc3a 	bl	8000a58 <HAL_GetTick>
 80021e4:	1b40      	subs	r0, r0, r5
 80021e6:	42b0      	cmp	r0, r6
 80021e8:	d3e9      	bcc.n	80021be <UART_CheckIdleState+0x52>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80021ea:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ee:	2301      	movs	r3, #1
 80021f0:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80021f4:	2080      	movs	r0, #128	@ 0x80
 80021f6:	6822      	ldr	r2, [r4, #0]
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	4383      	bics	r3, r0
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002202:	2388      	movs	r3, #136	@ 0x88
 8002204:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8002206:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8002208:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800220a:	e7c9      	b.n	80021a0 <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	025b      	lsls	r3, r3, #9
 8002210:	d4bd      	bmi.n	800218e <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002212:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002214:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002216:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002218:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	04b6      	lsls	r6, r6, #18
 800221c:	e011      	b.n	8002242 <UART_CheckIdleState+0xd6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4217      	tst	r7, r2
 8002224:	d00a      	beq.n	800223c <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002226:	4641      	mov	r1, r8
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	4211      	tst	r1, r2
 800222c:	d000      	beq.n	8002230 <UART_CheckIdleState+0xc4>
 800222e:	e08b      	b.n	8002348 <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	69d9      	ldr	r1, [r3, #28]
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	4211      	tst	r1, r2
 8002238:	d000      	beq.n	800223c <UART_CheckIdleState+0xd0>
 800223a:	e0b7      	b.n	80023ac <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	025b      	lsls	r3, r3, #9
 8002240:	d4a5      	bmi.n	800218e <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7fe fc09 	bl	8000a58 <HAL_GetTick>
 8002246:	1b40      	subs	r0, r0, r5
 8002248:	42b0      	cmp	r0, r6
 800224a:	d3e8      	bcc.n	800221e <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800224c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	2201      	movs	r2, #1
 8002252:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002256:	6821      	ldr	r1, [r4, #0]
 8002258:	4d6d      	ldr	r5, [pc, #436]	@ (8002410 <UART_CheckIdleState+0x2a4>)
 800225a:	680b      	ldr	r3, [r1, #0]
 800225c:	402b      	ands	r3, r5
 800225e:	600b      	str	r3, [r1, #0]
 8002260:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002264:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002268:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800226c:	6821      	ldr	r1, [r4, #0]
 800226e:	688b      	ldr	r3, [r1, #8]
 8002270:	4393      	bics	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
 8002274:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002278:	238c      	movs	r3, #140	@ 0x8c
 800227a:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 800227c:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 800227e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002280:	e78e      	b.n	80021a0 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002282:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002284:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002288:	2201      	movs	r2, #1
 800228a:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800228e:	6821      	ldr	r1, [r4, #0]
 8002290:	4d5f      	ldr	r5, [pc, #380]	@ (8002410 <UART_CheckIdleState+0x2a4>)
 8002292:	680b      	ldr	r3, [r1, #0]
 8002294:	402b      	ands	r3, r5
 8002296:	600b      	str	r3, [r1, #0]
 8002298:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800229c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80022a4:	6822      	ldr	r2, [r4, #0]
 80022a6:	485b      	ldr	r0, [pc, #364]	@ (8002414 <UART_CheckIdleState+0x2a8>)
 80022a8:	6893      	ldr	r3, [r2, #8]
 80022aa:	4003      	ands	r3, r0
 80022ac:	6093      	str	r3, [r2, #8]
 80022ae:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022b2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d10a      	bne.n	80022ce <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022bc:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c0:	2010      	movs	r0, #16
 80022c2:	6822      	ldr	r2, [r4, #0]
 80022c4:	6813      	ldr	r3, [r2, #0]
 80022c6:	4383      	bics	r3, r0
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022ce:	238c      	movs	r3, #140	@ 0x8c
 80022d0:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022d2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80022d4:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d6:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022d8:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022da:	66e3      	str	r3, [r4, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80022dc:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022de:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 80022e0:	3a0c      	subs	r2, #12
 80022e2:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80022e4:	e781      	b.n	80021ea <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022e6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ec:	2201      	movs	r2, #1
 80022ee:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80022f2:	6821      	ldr	r1, [r4, #0]
 80022f4:	4d46      	ldr	r5, [pc, #280]	@ (8002410 <UART_CheckIdleState+0x2a4>)
 80022f6:	680b      	ldr	r3, [r1, #0]
 80022f8:	402b      	ands	r3, r5
 80022fa:	600b      	str	r3, [r1, #0]
 80022fc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002300:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002304:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002308:	6822      	ldr	r2, [r4, #0]
 800230a:	4842      	ldr	r0, [pc, #264]	@ (8002414 <UART_CheckIdleState+0x2a8>)
 800230c:	6893      	ldr	r3, [r2, #8]
 800230e:	4003      	ands	r3, r0
 8002310:	6093      	str	r3, [r2, #8]
 8002312:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002316:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10a      	bne.n	8002332 <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800231c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002320:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002324:	2010      	movs	r0, #16
 8002326:	6822      	ldr	r2, [r4, #0]
 8002328:	6813      	ldr	r3, [r2, #0]
 800232a:	4383      	bics	r3, r0
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002332:	2220      	movs	r2, #32
 8002334:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002336:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8002338:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233a:	2300      	movs	r3, #0
 800233c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 800233e:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002340:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002342:	3264      	adds	r2, #100	@ 0x64
 8002344:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002346:	e750      	b.n	80021ea <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002348:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800234a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234e:	2201      	movs	r2, #1
 8002350:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002354:	6821      	ldr	r1, [r4, #0]
 8002356:	4d2e      	ldr	r5, [pc, #184]	@ (8002410 <UART_CheckIdleState+0x2a4>)
 8002358:	680b      	ldr	r3, [r1, #0]
 800235a:	402b      	ands	r3, r5
 800235c:	600b      	str	r3, [r1, #0]
 800235e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002362:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002366:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	4829      	ldr	r0, [pc, #164]	@ (8002414 <UART_CheckIdleState+0x2a8>)
 800236e:	6893      	ldr	r3, [r2, #8]
 8002370:	4003      	ands	r3, r0
 8002372:	6093      	str	r3, [r2, #8]
 8002374:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002378:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10a      	bne.n	8002394 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800237e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002382:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002386:	2010      	movs	r0, #16
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	6813      	ldr	r3, [r2, #0]
 800238c:	4383      	bics	r3, r0
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002394:	238c      	movs	r3, #140	@ 0x8c
 8002396:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002398:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800239a:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800239c:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800239e:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a0:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80023a2:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023a4:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 80023a6:	3a0c      	subs	r2, #12
 80023a8:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80023aa:	e74f      	b.n	800224c <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80023ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b2:	2201      	movs	r2, #1
 80023b4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80023b8:	6821      	ldr	r1, [r4, #0]
 80023ba:	4d15      	ldr	r5, [pc, #84]	@ (8002410 <UART_CheckIdleState+0x2a4>)
 80023bc:	680b      	ldr	r3, [r1, #0]
 80023be:	402b      	ands	r3, r5
 80023c0:	600b      	str	r3, [r1, #0]
 80023c2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80023c6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	4810      	ldr	r0, [pc, #64]	@ (8002414 <UART_CheckIdleState+0x2a8>)
 80023d2:	6893      	ldr	r3, [r2, #8]
 80023d4:	4003      	ands	r3, r0
 80023d6:	6093      	str	r3, [r2, #8]
 80023d8:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023dc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10a      	bne.n	80023f8 <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80023e2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023ea:	2010      	movs	r0, #16
 80023ec:	6822      	ldr	r2, [r4, #0]
 80023ee:	6813      	ldr	r3, [r2, #0]
 80023f0:	4383      	bics	r3, r0
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80023f8:	2220      	movs	r2, #32
 80023fa:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023fc:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 80023fe:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002400:	2300      	movs	r3, #0
 8002402:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8002404:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002406:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002408:	3264      	adds	r2, #100	@ 0x64
 800240a:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 800240c:	e71e      	b.n	800224c <UART_CheckIdleState+0xe0>
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	fffffedf 	.word	0xfffffedf
 8002414:	effffffe 	.word	0xeffffffe

08002418 <HAL_UART_Init>:
{
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800241c:	d03a      	beq.n	8002494 <HAL_UART_Init+0x7c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800241e:	2388      	movs	r3, #136	@ 0x88
 8002420:	58c3      	ldr	r3, [r0, r3]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d100      	bne.n	8002428 <HAL_UART_Init+0x10>
 8002426:	e072      	b.n	800250e <HAL_UART_Init+0xf6>
  huart->gState = HAL_UART_STATE_BUSY;
 8002428:	2388      	movs	r3, #136	@ 0x88
 800242a:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800242c:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800242e:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8002430:	682b      	ldr	r3, [r5, #0]
 8002432:	3a23      	subs	r2, #35	@ 0x23
 8002434:	4393      	bics	r3, r2
 8002436:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002438:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d163      	bne.n	8002506 <HAL_UART_Init+0xee>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800243e:	6921      	ldr	r1, [r4, #16]
 8002440:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002442:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002444:	430b      	orrs	r3, r1
 8002446:	6961      	ldr	r1, [r4, #20]
 8002448:	69e0      	ldr	r0, [r4, #28]
 800244a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800244c:	495e      	ldr	r1, [pc, #376]	@ (80025c8 <HAL_UART_Init+0x1b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800244e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002450:	400a      	ands	r2, r1
 8002452:	4313      	orrs	r3, r2
 8002454:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002456:	686b      	ldr	r3, [r5, #4]
 8002458:	4a5c      	ldr	r2, [pc, #368]	@ (80025cc <HAL_UART_Init+0x1b4>)
  tmpreg |= huart->Init.OneBitSampling;
 800245a:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800245c:	4013      	ands	r3, r2
 800245e:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002460:	6a66      	ldr	r6, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002462:	4313      	orrs	r3, r2
 8002464:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002466:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002468:	68aa      	ldr	r2, [r5, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800246a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800246c:	4958      	ldr	r1, [pc, #352]	@ (80025d0 <HAL_UART_Init+0x1b8>)
 800246e:	400a      	ands	r2, r1
 8002470:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002472:	220f      	movs	r2, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002474:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002476:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002478:	4393      	bics	r3, r2
 800247a:	4333      	orrs	r3, r6
 800247c:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800247e:	4b55      	ldr	r3, [pc, #340]	@ (80025d4 <HAL_UART_Init+0x1bc>)
 8002480:	429d      	cmp	r5, r3
 8002482:	d009      	beq.n	8002498 <HAL_UART_Init+0x80>
 8002484:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <HAL_UART_Init+0x1c0>)
 8002486:	429d      	cmp	r5, r3
 8002488:	d00d      	beq.n	80024a6 <HAL_UART_Init+0x8e>
  huart->NbRxDataToProcess = 1;
 800248a:	4b54      	ldr	r3, [pc, #336]	@ (80025dc <HAL_UART_Init+0x1c4>)
 800248c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800248e:	2300      	movs	r3, #0
 8002490:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002492:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 8002494:	2001      	movs	r0, #1
}
 8002496:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002498:	2303      	movs	r3, #3
 800249a:	4951      	ldr	r1, [pc, #324]	@ (80025e0 <HAL_UART_Init+0x1c8>)
 800249c:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800249e:	4013      	ands	r3, r2
 80024a0:	3b01      	subs	r3, #1
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d938      	bls.n	8002518 <HAL_UART_Init+0x100>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a6:	2380      	movs	r3, #128	@ 0x80
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	4298      	cmp	r0, r3
 80024ac:	d049      	beq.n	8002542 <HAL_UART_Init+0x12a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ae:	f7ff f867 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d068      	beq.n	8002588 <HAL_UART_Init+0x170>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024b6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80024b8:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <HAL_UART_Init+0x1cc>)
 80024ba:	0076      	lsls	r6, r6, #1
 80024bc:	5af1      	ldrh	r1, [r6, r3]
 80024be:	f7fd fe23 	bl	8000108 <__udivsi3>
 80024c2:	6865      	ldr	r5, [r4, #4]
 80024c4:	086b      	lsrs	r3, r5, #1
 80024c6:	18c0      	adds	r0, r0, r3
 80024c8:	0029      	movs	r1, r5
 80024ca:	f7fd fe1d 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024ce:	0002      	movs	r2, r0
 80024d0:	4b45      	ldr	r3, [pc, #276]	@ (80025e8 <HAL_UART_Init+0x1d0>)
 80024d2:	3a10      	subs	r2, #16
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d8d8      	bhi.n	800248a <HAL_UART_Init+0x72>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80024dc:	4a3f      	ldr	r2, [pc, #252]	@ (80025dc <HAL_UART_Init+0x1c4>)
 80024de:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80024e0:	2200      	movs	r2, #0
 80024e2:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80024e4:	67a2      	str	r2, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	4940      	ldr	r1, [pc, #256]	@ (80025ec <HAL_UART_Init+0x1d4>)
  return (UART_CheckIdleState(huart));
 80024ea:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ec:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ee:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	438a      	bics	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	3929      	subs	r1, #41	@ 0x29
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002500:	f7ff fe34 	bl	800216c <UART_CheckIdleState>
 8002504:	e7c7      	b.n	8002496 <HAL_UART_Init+0x7e>
    UART_AdvFeatureConfig(huart);
 8002506:	0020      	movs	r0, r4
 8002508:	f7ff fdc8 	bl	800209c <UART_AdvFeatureConfig>
 800250c:	e797      	b.n	800243e <HAL_UART_Init+0x26>
    huart->Lock = HAL_UNLOCKED;
 800250e:	2284      	movs	r2, #132	@ 0x84
 8002510:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002512:	f7fe f9a1 	bl	8000858 <HAL_UART_MspInit>
 8002516:	e787      	b.n	8002428 <HAL_UART_Init+0x10>
 8002518:	4a35      	ldr	r2, [pc, #212]	@ (80025f0 <HAL_UART_Init+0x1d8>)
 800251a:	5cd2      	ldrb	r2, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	4298      	cmp	r0, r3
 8002522:	d03a      	beq.n	800259a <HAL_UART_Init+0x182>
    switch (clocksource)
 8002524:	2a04      	cmp	r2, #4
 8002526:	d035      	beq.n	8002594 <HAL_UART_Init+0x17c>
 8002528:	d82a      	bhi.n	8002580 <HAL_UART_Init+0x168>
 800252a:	2a00      	cmp	r2, #0
 800252c:	d0bf      	beq.n	80024ae <HAL_UART_Init+0x96>
 800252e:	2a02      	cmp	r2, #2
 8002530:	d1ab      	bne.n	800248a <HAL_UART_Init+0x72>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	482f      	ldr	r0, [pc, #188]	@ (80025f4 <HAL_UART_Init+0x1dc>)
 8002536:	0609      	lsls	r1, r1, #24
 8002538:	0f49      	lsrs	r1, r1, #29
 800253a:	3101      	adds	r1, #1
 800253c:	f7fd fde4 	bl	8000108 <__udivsi3>
    if (pclk != 0U)
 8002540:	e7ba      	b.n	80024b8 <HAL_UART_Init+0xa0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002542:	f7ff f81d 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002546:	2800      	cmp	r0, #0
 8002548:	d01e      	beq.n	8002588 <HAL_UART_Init+0x170>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800254a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800254c:	4b25      	ldr	r3, [pc, #148]	@ (80025e4 <HAL_UART_Init+0x1cc>)
 800254e:	0076      	lsls	r6, r6, #1
 8002550:	5af1      	ldrh	r1, [r6, r3]
 8002552:	f7fd fdd9 	bl	8000108 <__udivsi3>
 8002556:	6865      	ldr	r5, [r4, #4]
 8002558:	0040      	lsls	r0, r0, #1
 800255a:	086b      	lsrs	r3, r5, #1
 800255c:	18c0      	adds	r0, r0, r3
 800255e:	0029      	movs	r1, r5
 8002560:	f7fd fdd2 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002564:	0002      	movs	r2, r0
 8002566:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <HAL_UART_Init+0x1d0>)
 8002568:	3a10      	subs	r2, #16
 800256a:	429a      	cmp	r2, r3
 800256c:	d900      	bls.n	8002570 <HAL_UART_Init+0x158>
 800256e:	e78c      	b.n	800248a <HAL_UART_Init+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002570:	4a21      	ldr	r2, [pc, #132]	@ (80025f8 <HAL_UART_Init+0x1e0>)
        huart->Instance->BRR = brrtemp;
 8002572:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002574:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002576:	0700      	lsls	r0, r0, #28
 8002578:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800257a:	4302      	orrs	r2, r0
 800257c:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 800257e:	e7ad      	b.n	80024dc <HAL_UART_Init+0xc4>
    switch (clocksource)
 8002580:	0018      	movs	r0, r3
 8002582:	2a08      	cmp	r2, #8
 8002584:	d098      	beq.n	80024b8 <HAL_UART_Init+0xa0>
 8002586:	e780      	b.n	800248a <HAL_UART_Init+0x72>
  huart->NbRxDataToProcess = 1;
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <HAL_UART_Init+0x1c4>)
  huart->RxISR = NULL;
 800258a:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800258c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800258e:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	e7a8      	b.n	80024e6 <HAL_UART_Init+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8002594:	f7fe ffc6 	bl	8001524 <HAL_RCC_GetSysClockFreq>
        break;
 8002598:	e78b      	b.n	80024b2 <HAL_UART_Init+0x9a>
    switch (clocksource)
 800259a:	2a04      	cmp	r2, #4
 800259c:	d00d      	beq.n	80025ba <HAL_UART_Init+0x1a2>
 800259e:	d80f      	bhi.n	80025c0 <HAL_UART_Init+0x1a8>
 80025a0:	2a00      	cmp	r2, #0
 80025a2:	d0ce      	beq.n	8002542 <HAL_UART_Init+0x12a>
 80025a4:	2a02      	cmp	r2, #2
 80025a6:	d000      	beq.n	80025aa <HAL_UART_Init+0x192>
 80025a8:	e76f      	b.n	800248a <HAL_UART_Init+0x72>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80025aa:	6809      	ldr	r1, [r1, #0]
 80025ac:	4811      	ldr	r0, [pc, #68]	@ (80025f4 <HAL_UART_Init+0x1dc>)
 80025ae:	0609      	lsls	r1, r1, #24
 80025b0:	0f49      	lsrs	r1, r1, #29
 80025b2:	3101      	adds	r1, #1
 80025b4:	f7fd fda8 	bl	8000108 <__udivsi3>
    if (pclk != 0U)
 80025b8:	e7c8      	b.n	800254c <HAL_UART_Init+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 80025ba:	f7fe ffb3 	bl	8001524 <HAL_RCC_GetSysClockFreq>
        break;
 80025be:	e7c2      	b.n	8002546 <HAL_UART_Init+0x12e>
    switch (clocksource)
 80025c0:	2a08      	cmp	r2, #8
 80025c2:	d0c3      	beq.n	800254c <HAL_UART_Init+0x134>
 80025c4:	e761      	b.n	800248a <HAL_UART_Init+0x72>
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	cfff69f3 	.word	0xcfff69f3
 80025cc:	ffffcfff 	.word	0xffffcfff
 80025d0:	11fff4ff 	.word	0x11fff4ff
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40004400 	.word	0x40004400
 80025dc:	00010001 	.word	0x00010001
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08002c0c 	.word	0x08002c0c
 80025e8:	0000ffef 	.word	0x0000ffef
 80025ec:	ffffb7ff 	.word	0xffffb7ff
 80025f0:	08002c08 	.word	0x08002c08
 80025f4:	02dc6c00 	.word	0x02dc6c00
 80025f8:	0000fff0 	.word	0x0000fff0

080025fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80025fc:	b570      	push	{r4, r5, r6, lr}

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80025fe:	2484      	movs	r4, #132	@ 0x84
 8002600:	5d03      	ldrb	r3, [r0, r4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d012      	beq.n	800262c <HAL_UARTEx_DisableFifoMode+0x30>

  huart->gState = HAL_UART_STATE_BUSY;
 8002606:	2588      	movs	r5, #136	@ 0x88
 8002608:	2324      	movs	r3, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800260a:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800260e:	6803      	ldr	r3, [r0, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	43b1      	bics	r1, r6
 8002616:	6019      	str	r1, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002618:	4905      	ldr	r1, [pc, #20]	@ (8002630 <HAL_UARTEx_DisableFifoMode+0x34>)
 800261a:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800261c:	2100      	movs	r1, #0
 800261e:	6641      	str	r1, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002622:	2320      	movs	r3, #32
 8002624:	5143      	str	r3, [r0, r5]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002626:	5501      	strb	r1, [r0, r4]

  return HAL_OK;
 8002628:	2000      	movs	r0, #0
}
 800262a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800262c:	2002      	movs	r0, #2
 800262e:	e7fc      	b.n	800262a <HAL_UARTEx_DisableFifoMode+0x2e>
 8002630:	dfffffff 	.word	0xdfffffff

08002634 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002636:	46d6      	mov	lr, sl
 8002638:	464f      	mov	r7, r9
 800263a:	4646      	mov	r6, r8
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800263c:	2384      	movs	r3, #132	@ 0x84
{
 800263e:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 8002640:	5cc3      	ldrb	r3, [r0, r3]
{
 8002642:	0004      	movs	r4, r0
 8002644:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8002646:	2b01      	cmp	r3, #1
 8002648:	d03d      	beq.n	80026c6 <HAL_UARTEx_SetTxFifoThreshold+0x92>

  huart->gState = HAL_UART_STATE_BUSY;
 800264a:	2388      	movs	r3, #136	@ 0x88
 800264c:	2124      	movs	r1, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800264e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002650:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002652:	682e      	ldr	r6, [r5, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	3923      	subs	r1, #35	@ 0x23
 8002658:	438b      	bics	r3, r1
 800265a:	602b      	str	r3, [r5, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800265c:	68ab      	ldr	r3, [r5, #8]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	08d9      	lsrs	r1, r3, #3
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002662:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002664:	4311      	orrs	r1, r2
 8002666:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002668:	2b00      	cmp	r3, #0
 800266a:	d029      	beq.n	80026c0 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800266c:	68ab      	ldr	r3, [r5, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800266e:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <HAL_UARTEx_SetTxFifoThreshold+0x98>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002670:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002672:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002674:	68ab      	ldr	r3, [r5, #8]
 8002676:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002678:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800267a:	4a15      	ldr	r2, [pc, #84]	@ (80026d0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800267c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800267e:	5cd1      	ldrb	r1, [r2, r3]
 8002680:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002682:	f7fd fdcb 	bl	800021c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002686:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002688:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800268a:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800268c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800268e:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002690:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002692:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002694:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002696:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002698:	f7fd fdc0 	bl	800021c <__divsi3>
 800269c:	b280      	uxth	r0, r0
 800269e:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 80026a0:	2220      	movs	r2, #32
 80026a2:	52e0      	strh	r0, [r4, r3]
 80026a4:	3302      	adds	r3, #2
 80026a6:	52e7      	strh	r7, [r4, r3]
 80026a8:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80026aa:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80026ac:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80026ae:	2200      	movs	r2, #0
  return HAL_OK;
 80026b0:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80026b2:	3b04      	subs	r3, #4
 80026b4:	54e2      	strb	r2, [r4, r3]
}
 80026b6:	bce0      	pop	{r5, r6, r7}
 80026b8:	46ba      	mov	sl, r7
 80026ba:	46b1      	mov	r9, r6
 80026bc:	46a8      	mov	r8, r5
 80026be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 80026c0:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 80026c2:	2701      	movs	r7, #1
 80026c4:	e7eb      	b.n	800269e <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 80026c6:	2002      	movs	r0, #2
 80026c8:	e7f5      	b.n	80026b6 <HAL_UARTEx_SetTxFifoThreshold+0x82>
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	08002c2c 	.word	0x08002c2c
 80026d0:	08002c24 	.word	0x08002c24

080026d4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	46d6      	mov	lr, sl
 80026d8:	464f      	mov	r7, r9
 80026da:	4646      	mov	r6, r8
  __HAL_LOCK(huart);
 80026dc:	2384      	movs	r3, #132	@ 0x84
{
 80026de:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 80026e0:	5cc3      	ldrb	r3, [r0, r3]
{
 80026e2:	0004      	movs	r4, r0
 80026e4:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d03d      	beq.n	8002766 <HAL_UARTEx_SetRxFifoThreshold+0x92>
  huart->gState = HAL_UART_STATE_BUSY;
 80026ea:	2388      	movs	r3, #136	@ 0x88
 80026ec:	2124      	movs	r1, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026ee:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026f0:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026f2:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80026f4:	682b      	ldr	r3, [r5, #0]
 80026f6:	3923      	subs	r1, #35	@ 0x23
 80026f8:	438b      	bics	r3, r1
 80026fa:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80026fc:	68a9      	ldr	r1, [r5, #8]
 80026fe:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <HAL_UARTEx_SetRxFifoThreshold+0x98>)
 8002700:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002702:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002704:	4311      	orrs	r1, r2
 8002706:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002708:	2b00      	cmp	r3, #0
 800270a:	d029      	beq.n	8002760 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800270c:	68ab      	ldr	r3, [r5, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800270e:	4a18      	ldr	r2, [pc, #96]	@ (8002770 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002710:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002712:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002714:	68ab      	ldr	r3, [r5, #8]
 8002716:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002718:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800271a:	4a16      	ldr	r2, [pc, #88]	@ (8002774 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800271c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800271e:	5cd1      	ldrb	r1, [r2, r3]
 8002720:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002722:	f7fd fd7b 	bl	800021c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002726:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002728:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800272a:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800272c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800272e:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002730:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002732:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002734:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002736:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002738:	f7fd fd70 	bl	800021c <__divsi3>
 800273c:	b280      	uxth	r0, r0
 800273e:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8002740:	2220      	movs	r2, #32
 8002742:	52e0      	strh	r0, [r4, r3]
 8002744:	3302      	adds	r3, #2
 8002746:	52e7      	strh	r7, [r4, r3]
 8002748:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800274a:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800274c:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800274e:	2200      	movs	r2, #0
  return HAL_OK;
 8002750:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8002752:	3b04      	subs	r3, #4
 8002754:	54e2      	strb	r2, [r4, r3]
}
 8002756:	bce0      	pop	{r5, r6, r7}
 8002758:	46ba      	mov	sl, r7
 800275a:	46b1      	mov	r9, r6
 800275c:	46a8      	mov	r8, r5
 800275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 8002760:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 8002762:	2701      	movs	r7, #1
 8002764:	e7eb      	b.n	800273e <HAL_UARTEx_SetRxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8002766:	2002      	movs	r0, #2
 8002768:	e7f5      	b.n	8002756 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	f1ffffff 	.word	0xf1ffffff
 8002770:	08002c2c 	.word	0x08002c2c
 8002774:	08002c24 	.word	0x08002c24

08002778 <begin>:
//buffer za LEDICE
uint32_t *pwmBuffer = NULL;


void begin(TIM_HandleTypeDef *_htim, DMA_HandleTypeDef *_dmahtim ,uint32_t channel, uint16_t numofleds)
{
 8002778:	b510      	push	{r4, lr}
	pwmBuffer = (uint32_t*)malloc(numofleds * sizeof(uint32_t));
 800277a:	2101      	movs	r1, #1
{
 800277c:	0004      	movs	r4, r0
	pwmBuffer = (uint32_t*)malloc(numofleds * sizeof(uint32_t));
 800277e:	0098      	lsls	r0, r3, #2
 8002780:	f000 f88a 	bl	8002898 <calloc>
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <begin+0x20>)
	memset((uint32_t*)pwmBuffer, 0, sizeof(uint32_t) * numofleds);

	__HAL_TIM_SET_PRESCALER(_htim, 5);
 8002786:	6822      	ldr	r2, [r4, #0]
	pwmBuffer = (uint32_t*)malloc(numofleds * sizeof(uint32_t));
 8002788:	6018      	str	r0, [r3, #0]
	__HAL_TIM_SET_PRESCALER(_htim, 5);
 800278a:	2305      	movs	r3, #5
 800278c:	6293      	str	r3, [r2, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(_htim, 9);
 800278e:	3304      	adds	r3, #4
 8002790:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002792:	60e3      	str	r3, [r4, #12]

}
 8002794:	bd10      	pop	{r4, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	20000208 	.word	0x20000208

0800279c <turnOnLed>:
void turnOnLed(TIM_HandleTypeDef *_htim, DMA_HandleTypeDef *_dmahtim  ,uint32_t channel, uint16_t numofleds)
{
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	464e      	mov	r6, r9
 80027a0:	46de      	mov	lr, fp
 80027a2:	4657      	mov	r7, sl
 80027a4:	4645      	mov	r5, r8
 80027a6:	b5e0      	push	{r5, r6, r7, lr}
 80027a8:	b085      	sub	sp, #20
 80027aa:	4691      	mov	r9, r2
 80027ac:	9102      	str	r1, [sp, #8]
 80027ae:	9300      	str	r3, [sp, #0]



	for(int i = 0; i < numofleds; i++)
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d04a      	beq.n	800284a <turnOnLed+0xae>
 80027b4:	2200      	movs	r2, #0
	{
	convertToPWM(buffer, pwmBuffer[i]);
	__HAL_TIM_ENABLE_DMA(_htim, TIM_DMA_CC1);
 80027b6:	6803      	ldr	r3, [r0, #0]
 80027b8:	492c      	ldr	r1, [pc, #176]	@ (800286c <turnOnLed+0xd0>)
 80027ba:	469b      	mov	fp, r3
	__HAL_TIM_SET_COUNTER(_htim, 0);
	HAL_DMA_Start(_dmahtim, (uint32_t)buffer, (uint32_t)&(_htim->Instance->CCR1), sizeof(buffer)/sizeof(uint16_t));
 80027bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002870 <turnOnLed+0xd4>)
 80027be:	4688      	mov	r8, r1
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	3334      	adds	r3, #52	@ 0x34
 80027c4:	001d      	movs	r5, r3
	for(int i = 0; i < 24 ; i++)
	{
		uint8_t bit = (rgbBuffer >> (23-i) & 1);
		if(bit == 1)
		{
			bufferLEDs[i + 2] = 6;
 80027c6:	2606      	movs	r6, #6
	__HAL_TIM_SET_COUNTER(_htim, 0);
 80027c8:	4692      	mov	sl, r2
 80027ca:	9003      	str	r0, [sp, #12]
	convertToPWM(buffer, pwmBuffer[i]);
 80027cc:	4643      	mov	r3, r8
 80027ce:	4652      	mov	r2, sl
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	58d7      	ldr	r7, [r2, r3]
 80027d6:	2117      	movs	r1, #23
		uint8_t bit = (rgbBuffer >> (23-i) & 1);
 80027d8:	2201      	movs	r2, #1
			bufferLEDs[i + 2] = 6;
 80027da:	2403      	movs	r4, #3
 80027dc:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <turnOnLed+0xd8>)
		uint8_t bit = (rgbBuffer >> (23-i) & 1);
 80027de:	0038      	movs	r0, r7
 80027e0:	40c8      	lsrs	r0, r1
		if(bit == 1)
 80027e2:	4202      	tst	r2, r0
 80027e4:	d13b      	bne.n	800285e <turnOnLed+0xc2>
			bufferLEDs[i + 2] = 6;
 80027e6:	801c      	strh	r4, [r3, #0]
	for(int i = 0; i < 24 ; i++)
 80027e8:	3302      	adds	r3, #2
 80027ea:	3901      	subs	r1, #1
 80027ec:	429d      	cmp	r5, r3
 80027ee:	d1f6      	bne.n	80027de <turnOnLed+0x42>
	__HAL_TIM_ENABLE_DMA(_htim, TIM_DMA_CC1);
 80027f0:	465b      	mov	r3, fp
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4313      	orrs	r3, r2
 80027fa:	465a      	mov	r2, fp
 80027fc:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(_htim, 0);
 80027fe:	465b      	mov	r3, fp
 8002800:	2200      	movs	r2, #0
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_DMA_Start(_dmahtim, (uint32_t)buffer, (uint32_t)&(_htim->Instance->CCR1), sizeof(buffer)/sizeof(uint16_t));
 8002804:	465a      	mov	r2, fp
 8002806:	9f02      	ldr	r7, [sp, #8]
 8002808:	231c      	movs	r3, #28
 800280a:	3234      	adds	r2, #52	@ 0x34
 800280c:	9901      	ldr	r1, [sp, #4]
 800280e:	0038      	movs	r0, r7
 8002810:	f7fe fa04 	bl	8000c1c <HAL_DMA_Start>
	HAL_TIM_PWM_Start(_htim, channel);
 8002814:	9c03      	ldr	r4, [sp, #12]
 8002816:	4649      	mov	r1, r9
 8002818:	0020      	movs	r0, r4
 800281a:	f7ff f88d 	bl	8001938 <HAL_TIM_PWM_Start>
	HAL_DMA_PollForTransfer(_dmahtim, HAL_DMA_FULL_TRANSFER  , 5);
 800281e:	2205      	movs	r2, #5
 8002820:	2100      	movs	r1, #0
 8002822:	0038      	movs	r0, r7
 8002824:	f7fe fa3a 	bl	8000c9c <HAL_DMA_PollForTransfer>
	HAL_TIM_PWM_Stop(_htim, channel);
 8002828:	4649      	mov	r1, r9
 800282a:	0020      	movs	r0, r4
 800282c:	f7ff f8e8 	bl	8001a00 <HAL_TIM_PWM_Stop>
	__HAL_TIM_DISABLE_DMA(_htim, TIM_DMA_CC1);
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <turnOnLed+0xdc>)
 8002834:	469b      	mov	fp, r3
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	465a      	mov	r2, fp
 800283c:	60d3      	str	r3, [r2, #12]
	for(int i = 0; i < numofleds; i++)
 800283e:	2301      	movs	r3, #1
 8002840:	469c      	mov	ip, r3
 8002842:	9b00      	ldr	r3, [sp, #0]
 8002844:	44e2      	add	sl, ip
 8002846:	4553      	cmp	r3, sl
 8002848:	dcc0      	bgt.n	80027cc <turnOnLed+0x30>
	HAL_Delay(50);
 800284a:	2032      	movs	r0, #50	@ 0x32
 800284c:	f7fe f90a 	bl	8000a64 <HAL_Delay>
}
 8002850:	b005      	add	sp, #20
 8002852:	bcf0      	pop	{r4, r5, r6, r7}
 8002854:	46bb      	mov	fp, r7
 8002856:	46b2      	mov	sl, r6
 8002858:	46a9      	mov	r9, r5
 800285a:	46a0      	mov	r8, r4
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bufferLEDs[i + 2] = 6;
 800285e:	801e      	strh	r6, [r3, #0]
	for(int i = 0; i < 24 ; i++)
 8002860:	3302      	adds	r3, #2
 8002862:	3901      	subs	r1, #1
 8002864:	429d      	cmp	r5, r3
 8002866:	d1ba      	bne.n	80027de <turnOnLed+0x42>
 8002868:	e7c2      	b.n	80027f0 <turnOnLed+0x54>
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	20000208 	.word	0x20000208
 8002870:	2000020c 	.word	0x2000020c
 8002874:	20000210 	.word	0x20000210
 8002878:	fffffdff 	.word	0xfffffdff

0800287c <setLed>:
{
 800287c:	b510      	push	{r4, lr}
	if(index < 12)
 800287e:	280b      	cmp	r0, #11
 8002880:	d807      	bhi.n	8002892 <setLed+0x16>
	pwmBuffer[index] = ( (uint32_t)g<<16 | (uint32_t)r<<8 | (uint32_t)b );
 8002882:	4c04      	ldr	r4, [pc, #16]	@ (8002894 <setLed+0x18>)
 8002884:	0212      	lsls	r2, r2, #8
 8002886:	6824      	ldr	r4, [r4, #0]
 8002888:	431a      	orrs	r2, r3
 800288a:	0409      	lsls	r1, r1, #16
 800288c:	0080      	lsls	r0, r0, #2
 800288e:	430a      	orrs	r2, r1
 8002890:	5102      	str	r2, [r0, r4]
}
 8002892:	bd10      	pop	{r4, pc}
 8002894:	20000208 	.word	0x20000208

08002898 <calloc>:
 8002898:	b510      	push	{r4, lr}
 800289a:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <calloc+0x10>)
 800289c:	000a      	movs	r2, r1
 800289e:	0001      	movs	r1, r0
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	f000 f803 	bl	80028ac <_calloc_r>
 80028a6:	bd10      	pop	{r4, pc}
 80028a8:	2000000c 	.word	0x2000000c

080028ac <_calloc_r>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	0c0b      	lsrs	r3, r1, #16
 80028b0:	0c15      	lsrs	r5, r2, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11e      	bne.n	80028f4 <_calloc_r+0x48>
 80028b6:	2d00      	cmp	r5, #0
 80028b8:	d10c      	bne.n	80028d4 <_calloc_r+0x28>
 80028ba:	b289      	uxth	r1, r1
 80028bc:	b294      	uxth	r4, r2
 80028be:	434c      	muls	r4, r1
 80028c0:	0021      	movs	r1, r4
 80028c2:	f000 f843 	bl	800294c <_malloc_r>
 80028c6:	1e05      	subs	r5, r0, #0
 80028c8:	d01a      	beq.n	8002900 <_calloc_r+0x54>
 80028ca:	0022      	movs	r2, r4
 80028cc:	2100      	movs	r1, #0
 80028ce:	f000 f8cd 	bl	8002a6c <memset>
 80028d2:	e016      	b.n	8002902 <_calloc_r+0x56>
 80028d4:	1c2b      	adds	r3, r5, #0
 80028d6:	1c0c      	adds	r4, r1, #0
 80028d8:	b289      	uxth	r1, r1
 80028da:	b292      	uxth	r2, r2
 80028dc:	434a      	muls	r2, r1
 80028de:	b29b      	uxth	r3, r3
 80028e0:	b2a1      	uxth	r1, r4
 80028e2:	4359      	muls	r1, r3
 80028e4:	0c14      	lsrs	r4, r2, #16
 80028e6:	190c      	adds	r4, r1, r4
 80028e8:	0c23      	lsrs	r3, r4, #16
 80028ea:	d107      	bne.n	80028fc <_calloc_r+0x50>
 80028ec:	0424      	lsls	r4, r4, #16
 80028ee:	b292      	uxth	r2, r2
 80028f0:	4314      	orrs	r4, r2
 80028f2:	e7e5      	b.n	80028c0 <_calloc_r+0x14>
 80028f4:	2d00      	cmp	r5, #0
 80028f6:	d101      	bne.n	80028fc <_calloc_r+0x50>
 80028f8:	1c14      	adds	r4, r2, #0
 80028fa:	e7ed      	b.n	80028d8 <_calloc_r+0x2c>
 80028fc:	230c      	movs	r3, #12
 80028fe:	6003      	str	r3, [r0, #0]
 8002900:	2500      	movs	r5, #0
 8002902:	0028      	movs	r0, r5
 8002904:	bd70      	pop	{r4, r5, r6, pc}
	...

08002908 <sbrk_aligned>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	4e0f      	ldr	r6, [pc, #60]	@ (8002948 <sbrk_aligned+0x40>)
 800290c:	000d      	movs	r5, r1
 800290e:	6831      	ldr	r1, [r6, #0]
 8002910:	0004      	movs	r4, r0
 8002912:	2900      	cmp	r1, #0
 8002914:	d102      	bne.n	800291c <sbrk_aligned+0x14>
 8002916:	f000 f8b1 	bl	8002a7c <_sbrk_r>
 800291a:	6030      	str	r0, [r6, #0]
 800291c:	0029      	movs	r1, r5
 800291e:	0020      	movs	r0, r4
 8002920:	f000 f8ac 	bl	8002a7c <_sbrk_r>
 8002924:	1c43      	adds	r3, r0, #1
 8002926:	d103      	bne.n	8002930 <sbrk_aligned+0x28>
 8002928:	2501      	movs	r5, #1
 800292a:	426d      	negs	r5, r5
 800292c:	0028      	movs	r0, r5
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	2303      	movs	r3, #3
 8002932:	1cc5      	adds	r5, r0, #3
 8002934:	439d      	bics	r5, r3
 8002936:	42a8      	cmp	r0, r5
 8002938:	d0f8      	beq.n	800292c <sbrk_aligned+0x24>
 800293a:	1a29      	subs	r1, r5, r0
 800293c:	0020      	movs	r0, r4
 800293e:	f000 f89d 	bl	8002a7c <_sbrk_r>
 8002942:	3001      	adds	r0, #1
 8002944:	d1f2      	bne.n	800292c <sbrk_aligned+0x24>
 8002946:	e7ef      	b.n	8002928 <sbrk_aligned+0x20>
 8002948:	20000244 	.word	0x20000244

0800294c <_malloc_r>:
 800294c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800294e:	2203      	movs	r2, #3
 8002950:	1ccb      	adds	r3, r1, #3
 8002952:	4393      	bics	r3, r2
 8002954:	3308      	adds	r3, #8
 8002956:	0005      	movs	r5, r0
 8002958:	001f      	movs	r7, r3
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d234      	bcs.n	80029c8 <_malloc_r+0x7c>
 800295e:	270c      	movs	r7, #12
 8002960:	42b9      	cmp	r1, r7
 8002962:	d833      	bhi.n	80029cc <_malloc_r+0x80>
 8002964:	0028      	movs	r0, r5
 8002966:	f000 f871 	bl	8002a4c <__malloc_lock>
 800296a:	4e37      	ldr	r6, [pc, #220]	@ (8002a48 <_malloc_r+0xfc>)
 800296c:	6833      	ldr	r3, [r6, #0]
 800296e:	001c      	movs	r4, r3
 8002970:	2c00      	cmp	r4, #0
 8002972:	d12f      	bne.n	80029d4 <_malloc_r+0x88>
 8002974:	0039      	movs	r1, r7
 8002976:	0028      	movs	r0, r5
 8002978:	f7ff ffc6 	bl	8002908 <sbrk_aligned>
 800297c:	0004      	movs	r4, r0
 800297e:	1c43      	adds	r3, r0, #1
 8002980:	d15f      	bne.n	8002a42 <_malloc_r+0xf6>
 8002982:	6834      	ldr	r4, [r6, #0]
 8002984:	9400      	str	r4, [sp, #0]
 8002986:	9b00      	ldr	r3, [sp, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d14a      	bne.n	8002a22 <_malloc_r+0xd6>
 800298c:	2c00      	cmp	r4, #0
 800298e:	d052      	beq.n	8002a36 <_malloc_r+0xea>
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	0028      	movs	r0, r5
 8002994:	18e3      	adds	r3, r4, r3
 8002996:	9900      	ldr	r1, [sp, #0]
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	f000 f86f 	bl	8002a7c <_sbrk_r>
 800299e:	9b01      	ldr	r3, [sp, #4]
 80029a0:	4283      	cmp	r3, r0
 80029a2:	d148      	bne.n	8002a36 <_malloc_r+0xea>
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	0028      	movs	r0, r5
 80029a8:	1aff      	subs	r7, r7, r3
 80029aa:	0039      	movs	r1, r7
 80029ac:	f7ff ffac 	bl	8002908 <sbrk_aligned>
 80029b0:	3001      	adds	r0, #1
 80029b2:	d040      	beq.n	8002a36 <_malloc_r+0xea>
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	19db      	adds	r3, r3, r7
 80029b8:	6023      	str	r3, [r4, #0]
 80029ba:	6833      	ldr	r3, [r6, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	2a00      	cmp	r2, #0
 80029c0:	d133      	bne.n	8002a2a <_malloc_r+0xde>
 80029c2:	9b00      	ldr	r3, [sp, #0]
 80029c4:	6033      	str	r3, [r6, #0]
 80029c6:	e019      	b.n	80029fc <_malloc_r+0xb0>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	dac9      	bge.n	8002960 <_malloc_r+0x14>
 80029cc:	230c      	movs	r3, #12
 80029ce:	602b      	str	r3, [r5, #0]
 80029d0:	2000      	movs	r0, #0
 80029d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029d4:	6821      	ldr	r1, [r4, #0]
 80029d6:	1bc9      	subs	r1, r1, r7
 80029d8:	d420      	bmi.n	8002a1c <_malloc_r+0xd0>
 80029da:	290b      	cmp	r1, #11
 80029dc:	d90a      	bls.n	80029f4 <_malloc_r+0xa8>
 80029de:	19e2      	adds	r2, r4, r7
 80029e0:	6027      	str	r7, [r4, #0]
 80029e2:	42a3      	cmp	r3, r4
 80029e4:	d104      	bne.n	80029f0 <_malloc_r+0xa4>
 80029e6:	6032      	str	r2, [r6, #0]
 80029e8:	6863      	ldr	r3, [r4, #4]
 80029ea:	6011      	str	r1, [r2, #0]
 80029ec:	6053      	str	r3, [r2, #4]
 80029ee:	e005      	b.n	80029fc <_malloc_r+0xb0>
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	e7f9      	b.n	80029e8 <_malloc_r+0x9c>
 80029f4:	6862      	ldr	r2, [r4, #4]
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	d10e      	bne.n	8002a18 <_malloc_r+0xcc>
 80029fa:	6032      	str	r2, [r6, #0]
 80029fc:	0028      	movs	r0, r5
 80029fe:	f000 f82d 	bl	8002a5c <__malloc_unlock>
 8002a02:	0020      	movs	r0, r4
 8002a04:	2207      	movs	r2, #7
 8002a06:	300b      	adds	r0, #11
 8002a08:	1d23      	adds	r3, r4, #4
 8002a0a:	4390      	bics	r0, r2
 8002a0c:	1ac2      	subs	r2, r0, r3
 8002a0e:	4298      	cmp	r0, r3
 8002a10:	d0df      	beq.n	80029d2 <_malloc_r+0x86>
 8002a12:	1a1b      	subs	r3, r3, r0
 8002a14:	50a3      	str	r3, [r4, r2]
 8002a16:	e7dc      	b.n	80029d2 <_malloc_r+0x86>
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	e7ef      	b.n	80029fc <_malloc_r+0xb0>
 8002a1c:	0023      	movs	r3, r4
 8002a1e:	6864      	ldr	r4, [r4, #4]
 8002a20:	e7a6      	b.n	8002970 <_malloc_r+0x24>
 8002a22:	9c00      	ldr	r4, [sp, #0]
 8002a24:	6863      	ldr	r3, [r4, #4]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	e7ad      	b.n	8002986 <_malloc_r+0x3a>
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	42a3      	cmp	r3, r4
 8002a30:	d1fb      	bne.n	8002a2a <_malloc_r+0xde>
 8002a32:	2300      	movs	r3, #0
 8002a34:	e7da      	b.n	80029ec <_malloc_r+0xa0>
 8002a36:	230c      	movs	r3, #12
 8002a38:	0028      	movs	r0, r5
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	f000 f80e 	bl	8002a5c <__malloc_unlock>
 8002a40:	e7c6      	b.n	80029d0 <_malloc_r+0x84>
 8002a42:	6007      	str	r7, [r0, #0]
 8002a44:	e7da      	b.n	80029fc <_malloc_r+0xb0>
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	20000248 	.word	0x20000248

08002a4c <__malloc_lock>:
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <__malloc_lock+0xc>)
 8002a50:	f000 f850 	bl	8002af4 <__retarget_lock_acquire_recursive>
 8002a54:	bd10      	pop	{r4, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	20000388 	.word	0x20000388

08002a5c <__malloc_unlock>:
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <__malloc_unlock+0xc>)
 8002a60:	f000 f849 	bl	8002af6 <__retarget_lock_release_recursive>
 8002a64:	bd10      	pop	{r4, pc}
 8002a66:	46c0      	nop			@ (mov r8, r8)
 8002a68:	20000388 	.word	0x20000388

08002a6c <memset>:
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	1882      	adds	r2, r0, r2
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d100      	bne.n	8002a76 <memset+0xa>
 8002a74:	4770      	bx	lr
 8002a76:	7019      	strb	r1, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	e7f9      	b.n	8002a70 <memset+0x4>

08002a7c <_sbrk_r>:
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	b570      	push	{r4, r5, r6, lr}
 8002a80:	4d06      	ldr	r5, [pc, #24]	@ (8002a9c <_sbrk_r+0x20>)
 8002a82:	0004      	movs	r4, r0
 8002a84:	0008      	movs	r0, r1
 8002a86:	602b      	str	r3, [r5, #0]
 8002a88:	f7fd ff54 	bl	8000934 <_sbrk>
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	d103      	bne.n	8002a98 <_sbrk_r+0x1c>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d000      	beq.n	8002a98 <_sbrk_r+0x1c>
 8002a96:	6023      	str	r3, [r4, #0]
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	20000384 	.word	0x20000384

08002aa0 <__errno>:
 8002aa0:	4b01      	ldr	r3, [pc, #4]	@ (8002aa8 <__errno+0x8>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	4770      	bx	lr
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	2000000c 	.word	0x2000000c

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	2600      	movs	r6, #0
 8002ab0:	4c0c      	ldr	r4, [pc, #48]	@ (8002ae4 <__libc_init_array+0x38>)
 8002ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8002ae8 <__libc_init_array+0x3c>)
 8002ab4:	1b64      	subs	r4, r4, r5
 8002ab6:	10a4      	asrs	r4, r4, #2
 8002ab8:	42a6      	cmp	r6, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	2600      	movs	r6, #0
 8002abe:	f000 f81b 	bl	8002af8 <_init>
 8002ac2:	4c0a      	ldr	r4, [pc, #40]	@ (8002aec <__libc_init_array+0x40>)
 8002ac4:	4d0a      	ldr	r5, [pc, #40]	@ (8002af0 <__libc_init_array+0x44>)
 8002ac6:	1b64      	subs	r4, r4, r5
 8002ac8:	10a4      	asrs	r4, r4, #2
 8002aca:	42a6      	cmp	r6, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	00b3      	lsls	r3, r6, #2
 8002ad2:	58eb      	ldr	r3, [r5, r3]
 8002ad4:	4798      	blx	r3
 8002ad6:	3601      	adds	r6, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	00b3      	lsls	r3, r6, #2
 8002adc:	58eb      	ldr	r3, [r5, r3]
 8002ade:	4798      	blx	r3
 8002ae0:	3601      	adds	r6, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08002c34 	.word	0x08002c34
 8002ae8:	08002c34 	.word	0x08002c34
 8002aec:	08002c38 	.word	0x08002c38
 8002af0:	08002c34 	.word	0x08002c34

08002af4 <__retarget_lock_acquire_recursive>:
 8002af4:	4770      	bx	lr

08002af6 <__retarget_lock_release_recursive>:
 8002af6:	4770      	bx	lr

08002af8 <_init>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	46c0      	nop			@ (mov r8, r8)
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr

08002b04 <_fini>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr
